{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Eng Learning Site \u00b6 \u6b22\u8fce\u5927\u5bb6\u6765\u5230\u6211\u7684Learning Site\uff01\u9996\u5148\u611f\u8c22 mkdocs-material \u4e3a\u6211\u4eec\u63d0\u4f9b\u8fd9\u4e48\u68d2\u7684\u4e3b\u9898\u3002 \u6211\u5728\u8fd9\u91cc\u8d34\u51fa\u6765\u6211\u7684\u7f51\u7ad9\u8fd9\u4e2a\u4e3b\u9898\u7684\u914d\u7f6e\u6587\u4ef6 mkdocs.yml\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Site Information site_name : <site-name> site_description : <site_description> site_author : <author_name> site_url : https://yongqilei.github.io # Repository repo_name : 'Programming Space' repo_url : https://github.com/yongqilei/yongqilei.github.io # Copyright copyright : 'Copyright &copy; 2021 - 2022 Eng Learning by Torres' # Contents nav : - intro : ... # Plugins plugins : - search # Theme theme : name : null language : zh custom_dir : 'mkdocs-material/material' static_templates : - 404.html include_search_page : false search_index_only : true palette : - sheme : default primary : indigo accent : indigo toggle : icon : material/toggle-switch name : Switch to dark mode - scheme : slate primary : red accent : red toggle : icon : material/toggle-switch-off-outline name : Switch to light mode font : text : 'Fira Sans' code : 'Fira Mono' features : - search.suggest - search.highlight - search.share - navigation.tabs - navigation.instant - navigation.tracking - navigation.top - content.tabs.link icon : repo : fontawesome/brands/github-alt logo : material/book-education-outline admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 favicon : 'favicon.ico' extra : disqus : <disqus-shortname> # Extensions markdown_extensions : - admonition - codehilite : guess_lang : false linenums : true - def_list - footnotes - meta - toc : permalink : true - pymdownx.arithmatex - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.highlight : linenums : true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink - pymdownx.mark - pymdownx.snippets - pymdownx.progressbar - pymdownx.smartsymbols - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde - pymdownx.tabbed : alternate_style : true \u5982\u679c\u6709\u4ec0\u4e48\u6211\u5199\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u8bf7\u5927\u5bb6\u6307\u51fa\u6765\u5e76report\u5230issues\u4e2d\u3002","title":"Getting Started"},{"location":"#welcome-to-eng-learning-site","text":"\u6b22\u8fce\u5927\u5bb6\u6765\u5230\u6211\u7684Learning Site\uff01\u9996\u5148\u611f\u8c22 mkdocs-material \u4e3a\u6211\u4eec\u63d0\u4f9b\u8fd9\u4e48\u68d2\u7684\u4e3b\u9898\u3002 \u6211\u5728\u8fd9\u91cc\u8d34\u51fa\u6765\u6211\u7684\u7f51\u7ad9\u8fd9\u4e2a\u4e3b\u9898\u7684\u914d\u7f6e\u6587\u4ef6 mkdocs.yml\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 # Site Information site_name : <site-name> site_description : <site_description> site_author : <author_name> site_url : https://yongqilei.github.io # Repository repo_name : 'Programming Space' repo_url : https://github.com/yongqilei/yongqilei.github.io # Copyright copyright : 'Copyright &copy; 2021 - 2022 Eng Learning by Torres' # Contents nav : - intro : ... # Plugins plugins : - search # Theme theme : name : null language : zh custom_dir : 'mkdocs-material/material' static_templates : - 404.html include_search_page : false search_index_only : true palette : - sheme : default primary : indigo accent : indigo toggle : icon : material/toggle-switch name : Switch to dark mode - scheme : slate primary : red accent : red toggle : icon : material/toggle-switch-off-outline name : Switch to light mode font : text : 'Fira Sans' code : 'Fira Mono' features : - search.suggest - search.highlight - search.share - navigation.tabs - navigation.instant - navigation.tracking - navigation.top - content.tabs.link icon : repo : fontawesome/brands/github-alt logo : material/book-education-outline admonition : note : octicons/tag-16 abstract : octicons/checklist-16 info : octicons/info-16 tip : octicons/squirrel-16 success : octicons/check-16 question : octicons/question-16 warning : octicons/alert-16 failure : octicons/x-circle-16 danger : octicons/zap-16 bug : octicons/bug-16 example : octicons/beaker-16 quote : octicons/quote-16 favicon : 'favicon.ico' extra : disqus : <disqus-shortname> # Extensions markdown_extensions : - admonition - codehilite : guess_lang : false linenums : true - def_list - footnotes - meta - toc : permalink : true - pymdownx.arithmatex - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.highlight : linenums : true - pymdownx.inlinehilite - pymdownx.keys - pymdownx.magiclink - pymdownx.mark - pymdownx.snippets - pymdownx.progressbar - pymdownx.smartsymbols - pymdownx.superfences : custom_fences : - name : mermaid class : mermaid format : !!python/name:pymdownx.superfences.fence_code_format - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde - pymdownx.tabbed : alternate_style : true \u5982\u679c\u6709\u4ec0\u4e48\u6211\u5199\u7684\u4e0d\u5bf9\u7684\u5730\u65b9\uff0c\u8bf7\u5927\u5bb6\u6307\u51fa\u6765\u5e76report\u5230issues\u4e2d\u3002","title":"Welcome to Eng Learning Site"},{"location":"about-en/","text":"Self Introduction \u00b6 Personal Info Current Status Name : Yongqi Lei Birthday : 1996/10 Email Addr : yongqi.a.lei@gmail.com / yongqi.lei@outlook.com Location : Tokyo Expected Salary : 15M ~ (JPY) Current Status : On Job Self Introduction I'm working as a software engineer in Morgan Stanley, mainly doing data process and some of infrastructure work. Advanced level of Java, adept in reactive programming, troubleshooting and problem solving. Experience with Docker and Kubernetes operations and CI/CD pipelines such as Jenkins. Passionate about learning new thing and new programming languages and willing to learn more about cutting-edge technologies. I'm able to effectively self-manage during independent projects as well as collaborate as part of a productive team. Experience \u00b6 Morgan Stanley \u00b6 Title and Duration Title : Software Engineer Duration : 2022/04/26 ~ Present Employee Type: Regular Refactoring existing project with new big data framework in the team. Supporting production issue and monitoring. ... Rakuten Group \u00b6 Title and Duration Title : Applications Engineer Duration : 2021/04/01 ~ 2022/04/25 Employee Type: Regular Collaborated with people across multiple teams aligns with the group's objectives. Led development and code review for Rakuten Fashion , NetSuper , main engineer for Rakuten Ichiba . With ELK and Prometheus metrics, worked on troubleshooting and bug analyzing. Participated in Load Test for Sprint Release and Super Sale (QPS estimation, JMX update, Data retrieval, Monitoring). Responsible for release operations for Rakuten Fashion and Rakuten NetSuper using Jenkins and Kubernetes. Education \u00b6 Education University : Major : Telecommunication Engineering Degree : Bachelor Skills \u00b6 Programming Skills : Java, Scala, Python, Go Language : Chinese Mandarin(Native), English(Business) Hobby : Programming, Basketball, Video Games, Movies","title":"About Me"},{"location":"about-en/#self-introduction","text":"Personal Info Current Status Name : Yongqi Lei Birthday : 1996/10 Email Addr : yongqi.a.lei@gmail.com / yongqi.lei@outlook.com Location : Tokyo Expected Salary : 15M ~ (JPY) Current Status : On Job Self Introduction I'm working as a software engineer in Morgan Stanley, mainly doing data process and some of infrastructure work. Advanced level of Java, adept in reactive programming, troubleshooting and problem solving. Experience with Docker and Kubernetes operations and CI/CD pipelines such as Jenkins. Passionate about learning new thing and new programming languages and willing to learn more about cutting-edge technologies. I'm able to effectively self-manage during independent projects as well as collaborate as part of a productive team.","title":"Self Introduction"},{"location":"about-en/#experience","text":"","title":"Experience"},{"location":"about-en/#morgan-stanley","text":"Title and Duration Title : Software Engineer Duration : 2022/04/26 ~ Present Employee Type: Regular Refactoring existing project with new big data framework in the team. Supporting production issue and monitoring. ...","title":"Morgan Stanley"},{"location":"about-en/#rakuten-group","text":"Title and Duration Title : Applications Engineer Duration : 2021/04/01 ~ 2022/04/25 Employee Type: Regular Collaborated with people across multiple teams aligns with the group's objectives. Led development and code review for Rakuten Fashion , NetSuper , main engineer for Rakuten Ichiba . With ELK and Prometheus metrics, worked on troubleshooting and bug analyzing. Participated in Load Test for Sprint Release and Super Sale (QPS estimation, JMX update, Data retrieval, Monitoring). Responsible for release operations for Rakuten Fashion and Rakuten NetSuper using Jenkins and Kubernetes.","title":"Rakuten Group"},{"location":"about-en/#education","text":"Education University : Major : Telecommunication Engineering Degree : Bachelor","title":"Education"},{"location":"about-en/#skills","text":"Programming Skills : Java, Scala, Python, Go Language : Chinese Mandarin(Native), English(Business) Hobby : Programming, Basketball, Video Games, Movies","title":"Skills"},{"location":"about/","text":"\u81ea\u6211\u8bc4\u4ef7 \u76ee\u524d\u5728 Rakuten Group \u5c31\u804c\uff0c\u662f\u4e00\u540d Software Engineer\uff0c\u4e3b\u8981\u5de5\u4f5c\u662f\u9488\u5bf9\u4e50\u5929\u5e02\u573a\u7684\u670d\u52a1\u7aef\u5e94\u7528\u505a\u4e00\u4e9bTechnical Enhancement\u4ee5\u53ca\u9700\u6c42\u5f00\u53d1\u3002 \u719f\u6089Java\u4ee5\u53caJava\u4e2d\u7684\u6570\u636e\u7ed3\u6784\u76f8\u5173\u7c7b\u578b\u4f7f\u7528\u548c\u539f\u7406\uff0c\u719f\u6089Spring Framework\uff0c\u719f\u7ec3\u4f7f\u7528Spring Boot\u548cSpring Cloud\u5f00\u53d1\u5fae\u670d\u52a1\u5e94\u7528\u3002\u4e86\u89e3\u5e76\u80fd\u719f\u7ec3\u4f7f\u7528NoSQL(Redis)\u3001MySQL\u3001PostgreSQL\u3002\u719f\u6089Reactive Programming\uff0c\u80fd\u591f\u719f\u7ec3\u4f7f\u7528Reactor Netty\u4ee5\u53caSpring Webflux\u3002 \u80fd\u591f\u719f\u7ec3\u8fd0\u7528ELK\u3001Prometheus\u3001Grafana\u8fdb\u884c\u6545\u969c\u5b9a\u4f4d\uff0cbug\u6839\u672c\u539f\u56e0\u5206\u6790\u3002\u719f\u6089Kubernetes\u7684manifest\u914d\u7f6e\u4ee5\u53ca\u719f\u7ec3\u5e94\u7528kubectl\u64cd\u4f5cKubernetes\u96c6\u7fa4\u3002\u80fd\u591f\u72ec\u7acb\u5b8c\u6210\u5f00\u53d1\u4efb\u52a1\u5e76\u5bf9\u4ee3\u7801\u89c4\u8303\u8981\u6c42\u9ad8\u3002 \u82f1\u8bed\u80fd\u8fbe\u5230\u5546\u52a1\u7ea7\u522b\u6c9f\u901a\uff0c\u76ee\u524d\u65e5\u5e38\u5de5\u4f5c\u8bed\u8a00\u73af\u5883\u662f\u82f1\u8bed\u3002 Position (\u5c97\u4f4d): Software Engineer Job Searching Status - \u6c42\u804c\u72b6\u6001 Location (\u5de5\u4f5c\u5730\u70b9) : Tokyo Expected Salary (\u671f\u671b\u85aa\u8d44) : 15M ~ (JPY) Current Status (\u76ee\u524d\u72b6\u6001) : On-job (\u5728\u804c) Personal Information - \u4e2a\u4eba\u4fe1\u606f Name (\u59d3\u540d) : Yongqi Lei (\u96f7\u6c38\u9e92) Birthday (\u751f\u5e74\u6708) : 1996-10 Email (\u90ae\u7bb1) : yongqi.a.lei@gmail.com / yongqi.lei@outlook.com Skills - \u4e13\u4e1a\u6280\u80fd \u00b6 Tech Languages Skills (\u6280\u80fd) Familarity (\u719f\u7ec3\u5ea6) Data Structure and Algorithms Skillful (\u719f\u6089) Java Advanaced (\u7cbe\u901a) Spring Framework (Spring Boot, Spring Cloud) Skillful (\u719f\u7ec3\u5e94\u7528) Kubernetes Experienced (\u719f\u6089) ELK, Grafana, Prometheus Experienced (\u719f\u6089) Linux Experienced (\u719f\u6089) NoSQL (Redis) Experienced (\u719f\u6089) RDBMS (MySQL, PostgreSQL) Experienced (\u719f\u6089) Kafka Experienced (\u7ecf\u9a8c) English : Business Level TOEIC 810 Chinese : Native Speaker Experience \u00b6 Rakuten Group, Inc. \u00b6 Regular - 2021/04/01 ~ Present Worked as app lead for Rakuten Fashion and Rakuten NetSuper , main engineer for Rakuten Ichiba. Collaborated with people across multiple teams to align with group's objectives. Did troubleshooting, bug analysis by using ELK and Prometheus(Grafana) metrics. Be responsible for development and code review. Participated in Load Test for Sprint Release and Super Sale ( QPS estimation , JMX update , Data retrieval). In charge of Rakuten Fashion and NetSuper release operations. Served for : Rakuten Ichiba, Rakuten Fashion, Rakuten NetSuper Tech Stack : BFF Architecture, Spring Boot, Reactor Netty, Spring Cloud, Resillience4J, Kubernetes, Prometheus, FileBeat, Grafana, ELK, Jenkins \u682a\u5f0f\u4f1a\u793e C & J \u00b6 Note Title: Software Engineer Total Period: 2020/01/01 ~ 2021/02/28 Contract - \u682a\u5f0f\u4f1a\u793e\u6771\u4e9c\u7523\u696d - 2020/11/01 ~ 2021/02/28 Developed RESTful APIs TOA Online Shopping Site. Developed both frontend page and server functions for cart module. Participated in API design and Documentation tasks. Designed and implemented Exception Handling module. Tech Stack : Spring Boot, Kafka, Redis, AWS, Github Actions... Contract - \u682a\u5f0f\u4f1a\u793e\u30a4\u30f3\u30bf\u30fc\u30c8\u30ec\u30fc\u30c9 - 2020/01/01 ~ 2020/10/31 Built crypto currency exchange platform with Spring Boot and Spring Cloud (Microservices). Developed REST APIs of Authentication, part of Trading Functions and Account Profile. Developed and maintained real-time application using Kafka Streams. Implemented websocket application to fetch latest price data using other platforms' Open API. Participated in release operation and automated test using AWS EC2 with docker and Gitlab CI pipeline. Tech Stack : Spring Boot, Spring Cloud, Kafka Stream, Apache Avro, Spring RSocket, AWS, Gitlab CI/CD \u682a\u5f0f\u4f1a\u793e\u30a2\u30c0\u30e0\u30bd\u30d5\u30c8 - AdamSoft \u00b6 Note Title: Software Engineer Contract - EXA Corporation - 2019/01/01 ~ 2019/12/31 Maintained and enhanced internal system which manages employee's profile, salary, residence status... Developed and tested server-side function using Java swing Wrote Document such as Test plan and Q&A excel. Education \u00b6 \u6559\u80b2 University Name (\u5b66\u6821\u540d\u79f0) : \u7535\u5b50\u79d1\u6280\u5927\u5b66\u6210\u90fd\u5b66\u9662 Major (\u4e13\u4e1a) : Telecommunication Engineering Degree (\u5b66\u4f4d) : Bachelor (\u672c\u79d1) Others \u00b6 \u5176\u4ed6 \u6280\u80fd \uff1aPython, Golang, \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784, \u7cfb\u7edf\u8bbe\u8ba1 \u8bed\u8a00 \uff1a\u666e\u901a\u8bdd(\u6bcd\u8bed), \u82f1\u8bed( \u5546\u52a1\u7ea7\u522b ), \u65e5\u8bed(N3) \u5174\u8da3\u7231\u597d \uff1a\u7f16\u7a0b, \u7bee\u7403, \u6e38\u620f, \u770b\u5267, \u770b\u7535\u5f71","title":"\u5173\u4e8e\u6211"},{"location":"about/#skills-","text":"Tech Languages Skills (\u6280\u80fd) Familarity (\u719f\u7ec3\u5ea6) Data Structure and Algorithms Skillful (\u719f\u6089) Java Advanaced (\u7cbe\u901a) Spring Framework (Spring Boot, Spring Cloud) Skillful (\u719f\u7ec3\u5e94\u7528) Kubernetes Experienced (\u719f\u6089) ELK, Grafana, Prometheus Experienced (\u719f\u6089) Linux Experienced (\u719f\u6089) NoSQL (Redis) Experienced (\u719f\u6089) RDBMS (MySQL, PostgreSQL) Experienced (\u719f\u6089) Kafka Experienced (\u7ecf\u9a8c) English : Business Level TOEIC 810 Chinese : Native Speaker","title":"Skills - \u4e13\u4e1a\u6280\u80fd"},{"location":"about/#experience","text":"","title":"Experience"},{"location":"about/#rakuten-group-inc","text":"Regular - 2021/04/01 ~ Present Worked as app lead for Rakuten Fashion and Rakuten NetSuper , main engineer for Rakuten Ichiba. Collaborated with people across multiple teams to align with group's objectives. Did troubleshooting, bug analysis by using ELK and Prometheus(Grafana) metrics. Be responsible for development and code review. Participated in Load Test for Sprint Release and Super Sale ( QPS estimation , JMX update , Data retrieval). In charge of Rakuten Fashion and NetSuper release operations. Served for : Rakuten Ichiba, Rakuten Fashion, Rakuten NetSuper Tech Stack : BFF Architecture, Spring Boot, Reactor Netty, Spring Cloud, Resillience4J, Kubernetes, Prometheus, FileBeat, Grafana, ELK, Jenkins","title":"Rakuten Group, Inc."},{"location":"about/#c-j","text":"Note Title: Software Engineer Total Period: 2020/01/01 ~ 2021/02/28 Contract - \u682a\u5f0f\u4f1a\u793e\u6771\u4e9c\u7523\u696d - 2020/11/01 ~ 2021/02/28 Developed RESTful APIs TOA Online Shopping Site. Developed both frontend page and server functions for cart module. Participated in API design and Documentation tasks. Designed and implemented Exception Handling module. Tech Stack : Spring Boot, Kafka, Redis, AWS, Github Actions... Contract - \u682a\u5f0f\u4f1a\u793e\u30a4\u30f3\u30bf\u30fc\u30c8\u30ec\u30fc\u30c9 - 2020/01/01 ~ 2020/10/31 Built crypto currency exchange platform with Spring Boot and Spring Cloud (Microservices). Developed REST APIs of Authentication, part of Trading Functions and Account Profile. Developed and maintained real-time application using Kafka Streams. Implemented websocket application to fetch latest price data using other platforms' Open API. Participated in release operation and automated test using AWS EC2 with docker and Gitlab CI pipeline. Tech Stack : Spring Boot, Spring Cloud, Kafka Stream, Apache Avro, Spring RSocket, AWS, Gitlab CI/CD","title":"\u682a\u5f0f\u4f1a\u793e C &amp; J"},{"location":"about/#-adamsoft","text":"Note Title: Software Engineer Contract - EXA Corporation - 2019/01/01 ~ 2019/12/31 Maintained and enhanced internal system which manages employee's profile, salary, residence status... Developed and tested server-side function using Java swing Wrote Document such as Test plan and Q&A excel.","title":"\u682a\u5f0f\u4f1a\u793e\u30a2\u30c0\u30e0\u30bd\u30d5\u30c8 - AdamSoft"},{"location":"about/#education","text":"\u6559\u80b2 University Name (\u5b66\u6821\u540d\u79f0) : \u7535\u5b50\u79d1\u6280\u5927\u5b66\u6210\u90fd\u5b66\u9662 Major (\u4e13\u4e1a) : Telecommunication Engineering Degree (\u5b66\u4f4d) : Bachelor (\u672c\u79d1)","title":"Education"},{"location":"about/#others","text":"\u5176\u4ed6 \u6280\u80fd \uff1aPython, Golang, \u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784, \u7cfb\u7edf\u8bbe\u8ba1 \u8bed\u8a00 \uff1a\u666e\u901a\u8bdd(\u6bcd\u8bed), \u82f1\u8bed( \u5546\u52a1\u7ea7\u522b ), \u65e5\u8bed(N3) \u5174\u8da3\u7231\u597d \uff1a\u7f16\u7a0b, \u7bee\u7403, \u6e38\u620f, \u770b\u5267, \u770b\u7535\u5f71","title":"Others"},{"location":"tags/","text":"\u6682\u65f6\u4e0d\u4f7f\u7528","title":"\u6807\u7b7e"},{"location":"algo/insertion-sort/","tags":["sort"],"text":"Concept \u00b6 \u5047\u8bbe\u6570\u7ec4 a \u6709 N \u4e2a\u5143\u7d20\uff0c\u5bf9\u4e8e 1 \u5230 N - 1 \u4e4b\u95f4\u6bcf\u4e00\u4e2a i \uff0c\u5c06 a[i] \u4e0e a[0] \u5230 a[i-1] \u4e2d\u6bd4\u5b83\u5c0f\u7684\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u6709\u5e8f\u5730\u4ea4\u6362\u3002\u5728\u7d22\u5f15 i \u4ece\u5de6\u5230\u53f3\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u5de6\u4fa7\u7684\u5143\u7d20\u59cb\u7ec8\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5f53 i \u5230\u8fbe\u6570\u7ec4\u6700\u53f3\u7aef\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u6570\u7ec4\u5c31\u662f\u6709\u5e8f\u7684\u4e86\u3002 \u5b9e\u73b0 \u00b6 Insertion Sort \u4f18\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void insertionSort ( int [] a ) { int n = a . length ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j > 0 && a [ j ] < a [ j - 1 ] ; j -- ) { exchange ( a , j , j - 1 ); } } } private void exchange ( int [] a , i , j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; } \u60f3\u8981\u4f18\u5316\u63d2\u5165\u6392\u5e8f\u7684\u901f\u5ea6\uff0c\u53ea\u9700\u8981\u5728\u5185\u5faa\u73af\u4e2d\u5c06\u8f83\u5927\u7684\u5143\u7d20\u5f80\u53f3\u79fb\u52a8\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\uff08\u8bbf\u95ee\u6570\u7ec4\u7684\u6b21\u6570\u5c31\u80fd\u51cf\u534a\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 public void insertionSort ( int [] a ) { int n = a . length ; for ( int i = 1 ; i < n ; i ++ ) { int v = a [ i ] ; int j = i - 1 ; while ( j >= 0 && v < a [ j ] ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = v ; } return a ; }","title":"\u63d2\u5165\u6392\u5e8f"},{"location":"algo/insertion-sort/#concept","text":"\u5047\u8bbe\u6570\u7ec4 a \u6709 N \u4e2a\u5143\u7d20\uff0c\u5bf9\u4e8e 1 \u5230 N - 1 \u4e4b\u95f4\u6bcf\u4e00\u4e2a i \uff0c\u5c06 a[i] \u4e0e a[0] \u5230 a[i-1] \u4e2d\u6bd4\u5b83\u5c0f\u7684\u6240\u6709\u5143\u7d20\u4f9d\u6b21\u6709\u5e8f\u5730\u4ea4\u6362\u3002\u5728\u7d22\u5f15 i \u4ece\u5de6\u5230\u53f3\u53d8\u5316\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5b83\u5de6\u4fa7\u7684\u5143\u7d20\u59cb\u7ec8\u662f\u6709\u5e8f\u7684\uff0c\u6240\u4ee5\u5f53 i \u5230\u8fbe\u6570\u7ec4\u6700\u53f3\u7aef\u7684\u65f6\u5019\uff0c\u6574\u4e2a\u6570\u7ec4\u5c31\u662f\u6709\u5e8f\u7684\u4e86\u3002","title":"Concept"},{"location":"algo/insertion-sort/#_1","text":"Insertion Sort \u4f18\u5316 1 2 3 4 5 6 7 8 9 10 11 12 13 14 public void insertionSort ( int [] a ) { int n = a . length ; for ( int i = 1 ; i < n ; i ++ ) { for ( int j = i ; j > 0 && a [ j ] < a [ j - 1 ] ; j -- ) { exchange ( a , j , j - 1 ); } } } private void exchange ( int [] a , i , j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; } \u60f3\u8981\u4f18\u5316\u63d2\u5165\u6392\u5e8f\u7684\u901f\u5ea6\uff0c\u53ea\u9700\u8981\u5728\u5185\u5faa\u73af\u4e2d\u5c06\u8f83\u5927\u7684\u5143\u7d20\u5f80\u53f3\u79fb\u52a8\u800c\u4e0d\u662f\u6bcf\u6b21\u90fd\u4ea4\u6362\u4e24\u4e2a\u5143\u7d20\uff08\u8bbf\u95ee\u6570\u7ec4\u7684\u6b21\u6570\u5c31\u80fd\u51cf\u534a\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 public void insertionSort ( int [] a ) { int n = a . length ; for ( int i = 1 ; i < n ; i ++ ) { int v = a [ i ] ; int j = i - 1 ; while ( j >= 0 && v < a [ j ] ) { a [ j + 1 ] = a [ j ] ; j -- ; } a [ j + 1 ] = v ; } return a ; }","title":"\u5b9e\u73b0"},{"location":"algo/leetcode/","text":"\u8fd9\u91cc\u8bb0\u5f55\u4e86\u6211\u7684\u5237\u9898\u5386\u7a0b\uff0c\u6211\u76ee\u524d\u56fd\u5185\u56fd\u5916\u4e24\u4e2a\u7ad9\u70b9\u4e00\u8d77\u5237\uff0c\u4e24\u4e2a\u7ad9\u70b9\u7684\u6bcf\u65e5\u4e00\u9898\u4e0d\u4e00\u6837\u3002 Leetcode CN Leetcode US Daily Problems \u00b6 Date Title Difficulty Category Finished Solution 2021/11/04 367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570 Easy \u6570\u5b66 Done Solution(Python) 2021/11/06 268. \u6d88\u5931\u7684\u6570\u5b57 Easy \u6570\u7ec4, \u4f4d\u8fd0\u7b97 Done Solution(Python) 2021/11/07 598. \u8303\u56f4\u6c42\u548c II Easy \u6570\u7ec4 Done Solution(Python) 2021/11/08 299. \u731c\u6570\u5b57\u6e38\u620f Medium \u6570\u7ec4 Done Solution(Python) , Solution(Go) 2021/11/09 488. \u7956\u739b\u6e38\u620f Hard In Progress Solution(Python) , Solution(Go) 2021/11/10 495. \u63d0\u83ab\u653b\u51fb Easy \u6570\u7ec4 Done Solution(Python) 2021/11/11 629. K\u4e2a\u9006\u5e8f\u5bf9\u6570\u7ec4 Hard \u5e8f\u5217DP, \u6570\u7ec4 Done Solution(Python) 2021/11/12 375. \u731c\u6570\u5b57\u5927\u5c0f II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Go) , Solution(Python) 2021/11/13 520. \u68c0\u6d4b\u5927\u5199\u5b57\u6bcd Easy \u5b57\u7b26\u4e32 Done Solution(Go) 2021/11/14 677. \u952e\u503c\u6620\u5c04 Medium \u6570\u636e\u7ed3\u6784 Done Solution(Java) 2021/11/15 319. \u706f\u6ce1\u5f00\u5173 Medium \u6570\u5b66 Done Solution(Java) 2021/11/16 391. \u5b8c\u7f8e\u77e9\u5f62 Hard In Progress 2021/11/17 318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef Medium \u4f4d\u8fd0\u7b97 Done Solution(Java) , Solution(Python) 2021/11/18 563. \u4e8c\u53c9\u6811\u7684\u5761\u5ea6 Easy \u4e8c\u53c9\u6811, \u540e\u5e8f\u904d\u5386 Done Solution(Java) , Solution(Go) , Solution(Python) 2021/11/19 397. \u6574\u6570\u66ff\u6362 Medium DFS,\u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Go) 2021/11/20 594. \u6700\u957f\u548c\u8c10\u5b50\u5e8f\u5217 Easy \u679a\u4e3e, Hash\u8868 Done Solution(Java) 2021/11/21 559. N \u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 Easy \u9012\u5f52 Done Solution(Java) 2021/11/22 384. \u6253\u4e71\u6570\u7ec4 Medium Knuth\u7b97\u6cd5, \u6d17\u724c\u7b97\u6cd5 Done Solution(Go) 2021/11/22 450. Delete Node in a BST Medium BST, recursive Done Solution(Java) 2021/11/23 859. \u4eb2\u5bc6\u5b57\u7b26\u4e32 Easy \u5b57\u7b26\u4e32 Done Solution(Go) 2021/11/24 423. \u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57 Medium \u77e9\u9635 Done Solution(Python) , Solution(Java) 2021/11/25 458. \u53ef\u601c\u7684\u5c0f\u732a Hard \u8fdb\u5236 Done Solution(Go) , Solution(Java) 2021/11/26 700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 Easy BST, \u9012\u5f52 Done Solution(Python) , Solution(Java) 2021/11/28 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd Medium \u6570\u7ec4, \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) 2021/11/29 786. \u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570 Hard PriorityQueue Done Solution(Java) 2021/11/30 400. \u7b2c N \u4f4d\u6570\u5b57 Medium \u4f4d\u6570\u6362\u7b97, \u6570\u5b66\u63a8\u7406 Done Solution(Java) 2021/12/01 1446. \u8fde\u7eed\u5b57\u7b26 Easy \u6570\u7ec4 Done Solution(Java) 2021/12/02 506. \u76f8\u5bf9\u540d\u6b21 Easy \u6570\u7ec4 Done Solution(Java) 2021/12/14 630. \u8bfe\u7a0b\u8868 III Hard \u8d2a\u5fc3\u7b97\u6cd5, \u4f18\u5148\u7ea7\u961f\u5217 Done Solution(Java) 2021/12/17 1518. \u6362\u9152\u95ee\u9898 Easy \u4e58\u9664 Done Solution(Java) 2021/12/23 1044. \u6700\u957f\u91cd\u590d\u5b50\u4e32 Hard \u5b57\u7b26\u4e32\u54c8\u5e0c Done Solution(Java) 2021/12/25 1609. \u5947\u5076\u6811 Medium \u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386 Done Solution(Java) 2021/12/26 1078. Bigram \u5206\u8bcd Easy \u5b57\u7b26\u4e32 Done Solution(Java) 2021/12/30 846. \u4e00\u624b\u987a\u5b50 Medium \u6a21\u62df, \u6392\u5e8f, \u5806, \u54c8\u5e0c\u8ba1\u6570 Done Solution(Java) 2021/12/31 507. \u5b8c\u7f8e\u6570 Easy \u6a21\u62df Done Solution(Java) , Solution(Go) 2021/12/31 1026. Maximum Difference Between Node and Ancestor Medium \u4e8c\u53c9\u6811, \u904d\u5386, \u5de6\u53f3\u5b50\u6811\u6700\u5927\u5dee\u5f02 Done Solution(Java) 2022/01/02 390. \u6d88\u9664\u6e38\u620f Medium \u6570\u5b66, \u7ea6\u745f\u592b\u73af Done Solution(Java) 2022/01/02 1010. Pairs of Songs With Total Durations Divisible by 60 Medium TwoSum.. Done Solution(Java) 2022/01/03 1185. \u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929 Easy \u6a21\u62df\u5e74\u4efd Done Solution(Java) 2022/01/03 997. Find the Town Judge Easy \u6570\u7ec4 Done Solution(Java) 2022/01/06 71. \u7b80\u5316\u8def\u5f84 Medium \u5b57\u7b26\u4e32\u6a21\u62df Done Solution(Java) 2022/01/07 1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6 Easy \u5b57\u7b26\u4e32 Done Solution(Java) 2022/01/07 382. Linked List Random Node Medium \u968f\u673a\u8bbf\u95ee, \u6c34\u5858\u62bd\u6837, Reservoir Sampling Done Solution(Java) 2022/01/16 849. Maximize Distance to Closest Person Medium \u6570\u7ec4, \u53cc\u6307\u9488 Done Solution(Java) 2022/01/17 [ 290. Word Pattern Easy \u6570\u636e\u7ed3\u6784, \u5b57\u7b26\u4e32 Done Solution(Java) Leetcode Roadmap \u00b6 Title Difficulty Category Finished Solution 124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c Hard \u4e8c\u53c9\u6811, \u540e\u5e8f\u904d\u5386 In Progress 105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 Medium \u4e8c\u53c9\u6811, \u4e2d\u5e8f\u904d\u5386, \u524d\u5e8f\u904d\u5386 Done Solution(Python) , Solution(Go) 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 Medium \u4e8c\u53c9\u6811, \u4e2d\u5e8f\u904d\u5386 Done Solution(Python) , Solution(Go) 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 Medium \u4e8c\u53c9\u641c\u7d22\u6811 Done Solution , Solution(Java) 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 Easy \u4e8c\u53c9\u6811 Done Solution(Python) , Solution(Go) 322. \u96f6\u94b1\u5151\u6362 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Go) 46. \u5168\u6392\u5217 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 51. N \u7687\u540e Hard \u56de\u6eaf Done Solution(Python) , Solution(Java) 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 Medium \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) , Solution(Go) , Solution(Python) 11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 Medium \u6570\u7ec4, \u53cc\u6307\u9488 Done Solution(Java) , Solution(Go) , Solution(Python) 551. \u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 I Easy \u6570\u636e\u7ed3\u6784\uff0c\u5b57\u7b26\u4e32 Done Solution(Java) 983. \u6700\u4f4e\u7968\u4ef7 Medium \u52a8\u6001\u89c4\u5212\uff08\u4e0e\u96f6\u94b1\u5151\u6362\u76f8\u4f3c\uff09 Done Solution(Java) 55. \u8df3\u8dc3\u6e38\u620f Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Python) 62. \u4e0d\u540c\u8def\u5f84 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 63. \u4e0d\u540c\u8def\u5f84 II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 279. \u5b8c\u5168\u5e73\u65b9\u6570 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a Easy \u52a8\u6001\u89c4\u5212 Done Solution(Java) 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III Hard \u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Python) 22. \u62ec\u53f7\u751f\u6210 Medium DFS Done Solution(Java) 198. \u6253\u5bb6\u52ab\u820d Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 213. \u6253\u5bb6\u52ab\u820d II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 221. \u6700\u5927\u6b63\u65b9\u5f62 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u52a8\u6001\u89c4\u5212, \u66b4\u529b\u641c\u7d22 Done Solution(Java) 206. \u53cd\u8f6c\u94fe\u8868 Easy \u9012\u5f52 Done Solution(Go) 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u9012\u5f52 Done Solution(Java) 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 53. \u6700\u5927\u5b50\u5e8f\u548c Easy \u52a8\u6001\u89c4\u5212 Done Solution(Java) 918. \u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c Easy \u6700\u5c0f\u5b50\u5e8f\u548c, \u6700\u5927\u5b50\u5e8f\u548c Done Solution(Java) 127. \u5355\u8bcd\u63a5\u9f99 Hard BFS, \u53cc\u5411BFS Done Solution(Java) 207. \u8bfe\u7a0b\u8868 Medium \u6709\u5411\u65e0\u73af\u56fe(DAG) Done Solution(Java) , Solution(Python) 210. \u8bfe\u7a0b\u8868 II Medium \u6709\u5411\u65e0\u73af\u56fe(DAG) Done Solution(Java) 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) Medium \u5b57\u7b26\u4e32, \u6570\u7ec4 Done Solution(Java) , Solution(Java) 2 15. \u4e09\u6570\u4e4b\u548c Medium \u53cc\u6307\u9488, \u6392\u5e8f Done Solution(Java) , Solution(Go) 109. Convert Sorted List to Binary Search Tree Medium BST, \u4e2d\u5e8f\u904d\u5386 Done Solution(Java) 52. N\u7687\u540e II Hard \u56de\u6eaf Done Solution(Java) 200. Number of Islands Medium BFS Done Solution(Java) 2. Add Two Numbers Medium \u94fe\u8868 Done Solution(Java) 3. Longest Substring Without Repeating Characters Medium \u5b57\u7b26\u4e32, \u53cc\u6307\u9488 Done Solution(Java) 5. Longest Palindromic Substring Medium \u56de\u6587\u4e32 Done Solution(Java) 7. Reverse Integer Medium \u6570\u5b66 Done Solution(Java) 34. Find First and Last Position of Element in Sorted Array Medium Binary Search Done Solution(Java) O(n) , Solution(Java) O(log(n)) 7. \u6574\u6570\u53cd\u8f6c Medium \u6570\u5b66 Done Solution(Java) \u5251\u6307 Offer II \u00b6 Title Difficulty Category Finished Solution \u5251\u6307 Offer II 001. \u6574\u6570\u9664\u6cd5 Easy \u4f4d\u8fd0\u7b97 Done Solution(Python) \u5251\u6307 Offer II 002. \u4e8c\u8fdb\u5236\u52a0\u6cd5 Easy \u4f4d\u8fd0\u7b97, \u6570\u5b66, \u5b57\u7b26\u4e32 Done Solution(Python) \u5251\u6307 Offer II 003. \u524d n \u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 Easy \u4f4d\u8fd0\u7b97, \u6570\u5b66, \u9012\u5f52 Done Solution(Go) \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 Easy \u6808, \u6570\u7ec4 Done Solution(Go) \u5251\u6307 Offer II 004. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 Medium Hash\u8868 Done Solution(Go) \u5251\u6307 Offer II 005. \u5355\u8bcd\u957f\u5ea6\u7684\u6700\u5927\u4e58\u79ef Medium \u4f4d\u8fd0\u7b97 Done Solution(Go) \u5251\u6307 Offer II 006. \u6392\u5e8f\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c Easy Hash\u8868 Done Solution(Go) \u5251\u6307 Offer II 007. \u6570\u7ec4\u4e2d\u548c\u4e3a 0 \u7684\u4e09\u4e2a\u6570 Medium \u53cc\u6307\u9488 Done Solution(Python) \u5251\u6307 Offer II 008. \u548c\u5927\u4e8e\u7b49\u4e8e target \u7684\u6700\u77ed\u5b50\u6570\u7ec4 Medium \u4e8c\u5206\u67e5\u627e, \u524d\u7f00\u548c; \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) \u5251\u6307 Offer II 009. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4 Medium \u6ed1\u52a8\u7a97\u53e3 Done Solution(Go) \u5251\u6307 Offer II 010. \u548c\u4e3a k \u7684\u5b50\u6570\u7ec4 Medium \u524d\u7f00\u548c+HashTable Done Solution(Java) , Solution(Go) \u5251\u6307 Offer II 011. 0 \u548c 1 \u4e2a\u6570\u76f8\u540c\u7684\u5b50\u6570\u7ec4 Medium \u524d\u7f00\u548c+HashTable Done Solution(Java) \u5251\u6307 Offer II 012. \u5de6\u53f3\u4e24\u8fb9\u5b50\u6570\u7ec4\u7684\u548c\u76f8\u7b49 Easy \u524d\u7f00\u548c Done Solution(Java) \u5251\u6307 Offer II 013. \u4e8c\u7ef4\u5b50\u77e9\u9635\u7684\u548c Medium \u4e8c\u7ef4\u6570\u7ec4\u524d\u7f00\u548c Done Solution(Java) \u5251\u6307 Offer II 030. \u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u8bbf\u95ee\u90fd\u662f O(1) \u7684\u5bb9\u5668 Medium \u6570\u636e\u7ed3\u6784, Hash\u8868, \u94fe\u8868 Done Solution(Java)","title":"Leetcode\u5237\u9898\u8bb0\u5f55"},{"location":"algo/leetcode/#daily-problems","text":"Date Title Difficulty Category Finished Solution 2021/11/04 367. \u6709\u6548\u7684\u5b8c\u5168\u5e73\u65b9\u6570 Easy \u6570\u5b66 Done Solution(Python) 2021/11/06 268. \u6d88\u5931\u7684\u6570\u5b57 Easy \u6570\u7ec4, \u4f4d\u8fd0\u7b97 Done Solution(Python) 2021/11/07 598. \u8303\u56f4\u6c42\u548c II Easy \u6570\u7ec4 Done Solution(Python) 2021/11/08 299. \u731c\u6570\u5b57\u6e38\u620f Medium \u6570\u7ec4 Done Solution(Python) , Solution(Go) 2021/11/09 488. \u7956\u739b\u6e38\u620f Hard In Progress Solution(Python) , Solution(Go) 2021/11/10 495. \u63d0\u83ab\u653b\u51fb Easy \u6570\u7ec4 Done Solution(Python) 2021/11/11 629. K\u4e2a\u9006\u5e8f\u5bf9\u6570\u7ec4 Hard \u5e8f\u5217DP, \u6570\u7ec4 Done Solution(Python) 2021/11/12 375. \u731c\u6570\u5b57\u5927\u5c0f II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Go) , Solution(Python) 2021/11/13 520. \u68c0\u6d4b\u5927\u5199\u5b57\u6bcd Easy \u5b57\u7b26\u4e32 Done Solution(Go) 2021/11/14 677. \u952e\u503c\u6620\u5c04 Medium \u6570\u636e\u7ed3\u6784 Done Solution(Java) 2021/11/15 319. \u706f\u6ce1\u5f00\u5173 Medium \u6570\u5b66 Done Solution(Java) 2021/11/16 391. \u5b8c\u7f8e\u77e9\u5f62 Hard In Progress 2021/11/17 318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef Medium \u4f4d\u8fd0\u7b97 Done Solution(Java) , Solution(Python) 2021/11/18 563. \u4e8c\u53c9\u6811\u7684\u5761\u5ea6 Easy \u4e8c\u53c9\u6811, \u540e\u5e8f\u904d\u5386 Done Solution(Java) , Solution(Go) , Solution(Python) 2021/11/19 397. \u6574\u6570\u66ff\u6362 Medium DFS,\u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Go) 2021/11/20 594. \u6700\u957f\u548c\u8c10\u5b50\u5e8f\u5217 Easy \u679a\u4e3e, Hash\u8868 Done Solution(Java) 2021/11/21 559. N \u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 Easy \u9012\u5f52 Done Solution(Java) 2021/11/22 384. \u6253\u4e71\u6570\u7ec4 Medium Knuth\u7b97\u6cd5, \u6d17\u724c\u7b97\u6cd5 Done Solution(Go) 2021/11/22 450. Delete Node in a BST Medium BST, recursive Done Solution(Java) 2021/11/23 859. \u4eb2\u5bc6\u5b57\u7b26\u4e32 Easy \u5b57\u7b26\u4e32 Done Solution(Go) 2021/11/24 423. \u4ece\u82f1\u6587\u4e2d\u91cd\u5efa\u6570\u5b57 Medium \u77e9\u9635 Done Solution(Python) , Solution(Java) 2021/11/25 458. \u53ef\u601c\u7684\u5c0f\u732a Hard \u8fdb\u5236 Done Solution(Go) , Solution(Java) 2021/11/26 700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 Easy BST, \u9012\u5f52 Done Solution(Python) , Solution(Java) 2021/11/28 438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd Medium \u6570\u7ec4, \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) 2021/11/29 786. \u7b2c K \u4e2a\u6700\u5c0f\u7684\u7d20\u6570\u5206\u6570 Hard PriorityQueue Done Solution(Java) 2021/11/30 400. \u7b2c N \u4f4d\u6570\u5b57 Medium \u4f4d\u6570\u6362\u7b97, \u6570\u5b66\u63a8\u7406 Done Solution(Java) 2021/12/01 1446. \u8fde\u7eed\u5b57\u7b26 Easy \u6570\u7ec4 Done Solution(Java) 2021/12/02 506. \u76f8\u5bf9\u540d\u6b21 Easy \u6570\u7ec4 Done Solution(Java) 2021/12/14 630. \u8bfe\u7a0b\u8868 III Hard \u8d2a\u5fc3\u7b97\u6cd5, \u4f18\u5148\u7ea7\u961f\u5217 Done Solution(Java) 2021/12/17 1518. \u6362\u9152\u95ee\u9898 Easy \u4e58\u9664 Done Solution(Java) 2021/12/23 1044. \u6700\u957f\u91cd\u590d\u5b50\u4e32 Hard \u5b57\u7b26\u4e32\u54c8\u5e0c Done Solution(Java) 2021/12/25 1609. \u5947\u5076\u6811 Medium \u4e8c\u53c9\u6811\u5c42\u5e8f\u904d\u5386 Done Solution(Java) 2021/12/26 1078. Bigram \u5206\u8bcd Easy \u5b57\u7b26\u4e32 Done Solution(Java) 2021/12/30 846. \u4e00\u624b\u987a\u5b50 Medium \u6a21\u62df, \u6392\u5e8f, \u5806, \u54c8\u5e0c\u8ba1\u6570 Done Solution(Java) 2021/12/31 507. \u5b8c\u7f8e\u6570 Easy \u6a21\u62df Done Solution(Java) , Solution(Go) 2021/12/31 1026. Maximum Difference Between Node and Ancestor Medium \u4e8c\u53c9\u6811, \u904d\u5386, \u5de6\u53f3\u5b50\u6811\u6700\u5927\u5dee\u5f02 Done Solution(Java) 2022/01/02 390. \u6d88\u9664\u6e38\u620f Medium \u6570\u5b66, \u7ea6\u745f\u592b\u73af Done Solution(Java) 2022/01/02 1010. Pairs of Songs With Total Durations Divisible by 60 Medium TwoSum.. Done Solution(Java) 2022/01/03 1185. \u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929 Easy \u6a21\u62df\u5e74\u4efd Done Solution(Java) 2022/01/03 997. Find the Town Judge Easy \u6570\u7ec4 Done Solution(Java) 2022/01/06 71. \u7b80\u5316\u8def\u5f84 Medium \u5b57\u7b26\u4e32\u6a21\u62df Done Solution(Java) 2022/01/07 1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6 Easy \u5b57\u7b26\u4e32 Done Solution(Java) 2022/01/07 382. Linked List Random Node Medium \u968f\u673a\u8bbf\u95ee, \u6c34\u5858\u62bd\u6837, Reservoir Sampling Done Solution(Java) 2022/01/16 849. Maximize Distance to Closest Person Medium \u6570\u7ec4, \u53cc\u6307\u9488 Done Solution(Java) 2022/01/17 [ 290. Word Pattern Easy \u6570\u636e\u7ed3\u6784, \u5b57\u7b26\u4e32 Done Solution(Java)","title":"Daily Problems"},{"location":"algo/leetcode/#leetcode-roadmap","text":"Title Difficulty Category Finished Solution 124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c Hard \u4e8c\u53c9\u6811, \u540e\u5e8f\u904d\u5386 In Progress 105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 Medium \u4e8c\u53c9\u6811, \u4e2d\u5e8f\u904d\u5386, \u524d\u5e8f\u904d\u5386 Done Solution(Python) , Solution(Go) 99. \u6062\u590d\u4e8c\u53c9\u641c\u7d22\u6811 Medium \u4e8c\u53c9\u6811, \u4e2d\u5e8f\u904d\u5386 Done Solution(Python) , Solution(Go) 96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 Medium \u4e8c\u53c9\u641c\u7d22\u6811 Done Solution , Solution(Java) 104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 Easy \u4e8c\u53c9\u6811 Done Solution(Python) , Solution(Go) 322. \u96f6\u94b1\u5151\u6362 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Go) 46. \u5168\u6392\u5217 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 51. N \u7687\u540e Hard \u56de\u6eaf Done Solution(Python) , Solution(Java) 3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 Medium \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) , Solution(Go) , Solution(Python) 11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 Medium \u6570\u7ec4, \u53cc\u6307\u9488 Done Solution(Java) , Solution(Go) , Solution(Python) 551. \u5b66\u751f\u51fa\u52e4\u8bb0\u5f55 I Easy \u6570\u636e\u7ed3\u6784\uff0c\u5b57\u7b26\u4e32 Done Solution(Java) 983. \u6700\u4f4e\u7968\u4ef7 Medium \u52a8\u6001\u89c4\u5212\uff08\u4e0e\u96f6\u94b1\u5151\u6362\u76f8\u4f3c\uff09 Done Solution(Java) 55. \u8df3\u8dc3\u6e38\u620f Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Python) 62. \u4e0d\u540c\u8def\u5f84 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 63. \u4e0d\u540c\u8def\u5f84 II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 279. \u5b8c\u5168\u5e73\u65b9\u6570 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a Easy \u52a8\u6001\u89c4\u5212 Done Solution(Java) 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III Hard \u52a8\u6001\u89c4\u5212 Done Solution(Java) , Solution(Python) 22. \u62ec\u53f7\u751f\u6210 Medium DFS Done Solution(Java) 198. \u6253\u5bb6\u52ab\u820d Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 213. \u6253\u5bb6\u52ab\u820d II Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 221. \u6700\u5927\u6b63\u65b9\u5f62 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 5. \u6700\u957f\u56de\u6587\u5b50\u4e32 Medium \u52a8\u6001\u89c4\u5212, \u66b4\u529b\u641c\u7d22 Done Solution(Java) 206. \u53cd\u8f6c\u94fe\u8868 Easy \u9012\u5f52 Done Solution(Go) 92. \u53cd\u8f6c\u94fe\u8868 II Medium \u9012\u5f52 Done Solution(Java) 1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217 Medium \u52a8\u6001\u89c4\u5212 Done Solution(Java) 53. \u6700\u5927\u5b50\u5e8f\u548c Easy \u52a8\u6001\u89c4\u5212 Done Solution(Java) 918. \u73af\u5f62\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c Easy \u6700\u5c0f\u5b50\u5e8f\u548c, \u6700\u5927\u5b50\u5e8f\u548c Done Solution(Java) 127. \u5355\u8bcd\u63a5\u9f99 Hard BFS, \u53cc\u5411BFS Done Solution(Java) 207. \u8bfe\u7a0b\u8868 Medium \u6709\u5411\u65e0\u73af\u56fe(DAG) Done Solution(Java) , Solution(Python) 210. \u8bfe\u7a0b\u8868 II Medium \u6709\u5411\u65e0\u73af\u56fe(DAG) Done Solution(Java) 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) Medium \u5b57\u7b26\u4e32, \u6570\u7ec4 Done Solution(Java) , Solution(Java) 2 15. \u4e09\u6570\u4e4b\u548c Medium \u53cc\u6307\u9488, \u6392\u5e8f Done Solution(Java) , Solution(Go) 109. Convert Sorted List to Binary Search Tree Medium BST, \u4e2d\u5e8f\u904d\u5386 Done Solution(Java) 52. N\u7687\u540e II Hard \u56de\u6eaf Done Solution(Java) 200. Number of Islands Medium BFS Done Solution(Java) 2. Add Two Numbers Medium \u94fe\u8868 Done Solution(Java) 3. Longest Substring Without Repeating Characters Medium \u5b57\u7b26\u4e32, \u53cc\u6307\u9488 Done Solution(Java) 5. Longest Palindromic Substring Medium \u56de\u6587\u4e32 Done Solution(Java) 7. Reverse Integer Medium \u6570\u5b66 Done Solution(Java) 34. Find First and Last Position of Element in Sorted Array Medium Binary Search Done Solution(Java) O(n) , Solution(Java) O(log(n)) 7. \u6574\u6570\u53cd\u8f6c Medium \u6570\u5b66 Done Solution(Java)","title":"Leetcode Roadmap"},{"location":"algo/leetcode/#offer-ii","text":"Title Difficulty Category Finished Solution \u5251\u6307 Offer II 001. \u6574\u6570\u9664\u6cd5 Easy \u4f4d\u8fd0\u7b97 Done Solution(Python) \u5251\u6307 Offer II 002. \u4e8c\u8fdb\u5236\u52a0\u6cd5 Easy \u4f4d\u8fd0\u7b97, \u6570\u5b66, \u5b57\u7b26\u4e32 Done Solution(Python) \u5251\u6307 Offer II 003. \u524d n \u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 Easy \u4f4d\u8fd0\u7b97, \u6570\u5b66, \u9012\u5f52 Done Solution(Go) \u5251\u6307 Offer 30. \u5305\u542bmin\u51fd\u6570\u7684\u6808 Easy \u6808, \u6570\u7ec4 Done Solution(Go) \u5251\u6307 Offer II 004. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 Medium Hash\u8868 Done Solution(Go) \u5251\u6307 Offer II 005. \u5355\u8bcd\u957f\u5ea6\u7684\u6700\u5927\u4e58\u79ef Medium \u4f4d\u8fd0\u7b97 Done Solution(Go) \u5251\u6307 Offer II 006. \u6392\u5e8f\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u5b57\u4e4b\u548c Easy Hash\u8868 Done Solution(Go) \u5251\u6307 Offer II 007. \u6570\u7ec4\u4e2d\u548c\u4e3a 0 \u7684\u4e09\u4e2a\u6570 Medium \u53cc\u6307\u9488 Done Solution(Python) \u5251\u6307 Offer II 008. \u548c\u5927\u4e8e\u7b49\u4e8e target \u7684\u6700\u77ed\u5b50\u6570\u7ec4 Medium \u4e8c\u5206\u67e5\u627e, \u524d\u7f00\u548c; \u6ed1\u52a8\u7a97\u53e3 Done Solution(Java) \u5251\u6307 Offer II 009. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4 Medium \u6ed1\u52a8\u7a97\u53e3 Done Solution(Go) \u5251\u6307 Offer II 010. \u548c\u4e3a k \u7684\u5b50\u6570\u7ec4 Medium \u524d\u7f00\u548c+HashTable Done Solution(Java) , Solution(Go) \u5251\u6307 Offer II 011. 0 \u548c 1 \u4e2a\u6570\u76f8\u540c\u7684\u5b50\u6570\u7ec4 Medium \u524d\u7f00\u548c+HashTable Done Solution(Java) \u5251\u6307 Offer II 012. \u5de6\u53f3\u4e24\u8fb9\u5b50\u6570\u7ec4\u7684\u548c\u76f8\u7b49 Easy \u524d\u7f00\u548c Done Solution(Java) \u5251\u6307 Offer II 013. \u4e8c\u7ef4\u5b50\u77e9\u9635\u7684\u548c Medium \u4e8c\u7ef4\u6570\u7ec4\u524d\u7f00\u548c Done Solution(Java) \u5251\u6307 Offer II 030. \u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u8bbf\u95ee\u90fd\u662f O(1) \u7684\u5bb9\u5668 Medium \u6570\u636e\u7ed3\u6784, Hash\u8868, \u94fe\u8868 Done Solution(Java)","title":"\u5251\u6307 Offer II"},{"location":"algo/manacher-palindrome/","text":"","title":"Manacher\u7b97\u6cd5"},{"location":"algo/merge-sort/","tags":["sort"],"text":"\u6982\u5ff5 \u00b6 \u5f52\u5e76\u6392\u5e8f \u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u5c06\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5f52\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u57fa\u4e8e \u5f52\u5e76 \u8fd9\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u3002 \u5b9e\u73b0 \u00b6 \u81ea\u9876\u5411\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public void sort ( int [] a , int lo , int hi ) { if ( hi <= lo ) return ; int mid = ( lo + hi ) >> 1 ; sort ( a , lo , mid ); sort ( a , mid + 1 , hi ); merge ( a , lo , mid , hi ); } private void merge ( int [] a , int lo , int mid , int hi ) { int i = lo , j = mid + 1 ; int [] aux = new int [ a . length ] ; if ( hi + 1 - lo >= 0 ) System . arraycopy ( a , lo , aux , lo , hi + 1 - lo ); for ( int k = lo ; k <= hi ; k ++ ) { if ( i > mid ) a [ k ] = aux [ j ++] ; // \u5f53\u5de6\u534a\u8fb9\u6570\u7ec4\u7528\u5b8c\u65f6 else if ( j > hi ) a [ k ] = aux [ i ++] ; // \u5f53\u53f3\u534a\u8fb9\u6570\u7ec4\u7528\u5b8c\u65f6 else if ( aux [ j ] < aux [ i ] ) a [ k ] = aux [ j ++] ; // \u4e24\u8fb9\u7684\u6570\u7ec4\u6bd4\u8f83 else a [ k ] = aux [ i ++] ; } } \u5bf9\u4e8e\u5c0f\u89c4\u6a21\u7684\u6570\u7ec4\u6765\u8bf4\uff0c\u63d2\u5165\u6392\u5e8f\u53ef\u80fd\u6548\u7387\u6bd4\u5f52\u5e76\u6392\u5e8f\u66f4\u9ad8\uff0c\u56e0\u4e3a\u63d2\u5165\u6392\u5e8f\uff08\u6216\u8005\u9009\u62e9\u6392\u5e8f\uff09\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u4f7f\u7528\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 lo \u548c hi \u7684\u5dee\u503c\u6765\u5224\u65ad\u8be5\u5b50\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u7528\u63d2\u5165\u6392\u5e8f\u6765\u6392\u5e8f\uff0c\u6392\u5e8f\u597d\u4e4b\u540e\uff0c\u5728\u66f4\u5927\u89c4\u6a21\u7684\u6570\u7ec4\u6392\u5e8f\u65f6\uff0c\u5c31\u53ef\u4ee5\u8f6c\u56de\u7528\u5f52\u5e76\u6392\u5e8f\u3002 \u601d\u8003 \uff1a\u5982\u4f55\u8282\u7701\u5c06\u6570\u7ec4\u5143\u7d20\u590d\u5236\u5230\u52c7\u4e8e\u5f52\u5e76\u7684\u8f85\u52a9\u6570\u7ec4\u6240\u7528\u5230\u7684\u65f6\u95f4\uff1f \u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f \u00b6 1 2 3 4 5 6 7 8 9 public void sort ( int [] a ) { // \u8fdb\u884clgN\u4e24\u4e24\u5f52\u5e76 int N = a . length ; for ( int sz = 1 ; sz < N ; sz += sz ) { for ( int lo = 0 ; lo < N - sz ; lo += sz + sz ) { merge ( a , lo , lo + sz - 1 , Math . min ( lo + sz + sz - 1 , N - 1 )); // merge\u65b9\u6cd5\u8bf7\u53c2\u8003\u4e0a\u9762\u7684 } } }","title":"\u5f52\u5e76\u6392\u5e8f"},{"location":"algo/merge-sort/#_1","text":"\u5f52\u5e76\u6392\u5e8f \u4e3b\u8981\u89e3\u51b3\u7684\u95ee\u9898\u5c31\u662f\u5c06\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u5f52\u5e76\u6210\u4e00\u4e2a\u66f4\u5927\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u57fa\u4e8e \u5f52\u5e76 \u8fd9\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u3002","title":"\u6982\u5ff5"},{"location":"algo/merge-sort/#_2","text":"","title":"\u5b9e\u73b0"},{"location":"algo/merge-sort/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public void sort ( int [] a , int lo , int hi ) { if ( hi <= lo ) return ; int mid = ( lo + hi ) >> 1 ; sort ( a , lo , mid ); sort ( a , mid + 1 , hi ); merge ( a , lo , mid , hi ); } private void merge ( int [] a , int lo , int mid , int hi ) { int i = lo , j = mid + 1 ; int [] aux = new int [ a . length ] ; if ( hi + 1 - lo >= 0 ) System . arraycopy ( a , lo , aux , lo , hi + 1 - lo ); for ( int k = lo ; k <= hi ; k ++ ) { if ( i > mid ) a [ k ] = aux [ j ++] ; // \u5f53\u5de6\u534a\u8fb9\u6570\u7ec4\u7528\u5b8c\u65f6 else if ( j > hi ) a [ k ] = aux [ i ++] ; // \u5f53\u53f3\u534a\u8fb9\u6570\u7ec4\u7528\u5b8c\u65f6 else if ( aux [ j ] < aux [ i ] ) a [ k ] = aux [ j ++] ; // \u4e24\u8fb9\u7684\u6570\u7ec4\u6bd4\u8f83 else a [ k ] = aux [ i ++] ; } } \u5bf9\u4e8e\u5c0f\u89c4\u6a21\u7684\u6570\u7ec4\u6765\u8bf4\uff0c\u63d2\u5165\u6392\u5e8f\u53ef\u80fd\u6548\u7387\u6bd4\u5f52\u5e76\u6392\u5e8f\u66f4\u9ad8\uff0c\u56e0\u4e3a\u63d2\u5165\u6392\u5e8f\uff08\u6216\u8005\u9009\u62e9\u6392\u5e8f\uff09\u66f4\u7b80\u5355\uff0c\u6240\u4ee5\u5728\u5b9e\u9645\u4f7f\u7528\u5f52\u5e76\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 lo \u548c hi \u7684\u5dee\u503c\u6765\u5224\u65ad\u8be5\u5b50\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u7528\u63d2\u5165\u6392\u5e8f\u6765\u6392\u5e8f\uff0c\u6392\u5e8f\u597d\u4e4b\u540e\uff0c\u5728\u66f4\u5927\u89c4\u6a21\u7684\u6570\u7ec4\u6392\u5e8f\u65f6\uff0c\u5c31\u53ef\u4ee5\u8f6c\u56de\u7528\u5f52\u5e76\u6392\u5e8f\u3002 \u601d\u8003 \uff1a\u5982\u4f55\u8282\u7701\u5c06\u6570\u7ec4\u5143\u7d20\u590d\u5236\u5230\u52c7\u4e8e\u5f52\u5e76\u7684\u8f85\u52a9\u6570\u7ec4\u6240\u7528\u5230\u7684\u65f6\u95f4\uff1f","title":"\u81ea\u9876\u5411\u4e0b\u7684\u5f52\u5e76\u6392\u5e8f"},{"location":"algo/merge-sort/#_4","text":"1 2 3 4 5 6 7 8 9 public void sort ( int [] a ) { // \u8fdb\u884clgN\u4e24\u4e24\u5f52\u5e76 int N = a . length ; for ( int sz = 1 ; sz < N ; sz += sz ) { for ( int lo = 0 ; lo < N - sz ; lo += sz + sz ) { merge ( a , lo , lo + sz - 1 , Math . min ( lo + sz + sz - 1 , N - 1 )); // merge\u65b9\u6cd5\u8bf7\u53c2\u8003\u4e0a\u9762\u7684 } } }","title":"\u81ea\u5e95\u5411\u4e0a\u7684\u5f52\u5e76\u6392\u5e8f"},{"location":"algo/rabin-karp-algo/","tags":["String","Hash"],"text":"Introduction \u00b6","title":"Rabin Karp Algorithm - \u5b57\u7b26\u4e32\u54c8\u5e0c\u7b97\u6cd5"},{"location":"algo/rabin-karp-algo/#introduction","text":"","title":"Introduction"},{"location":"algo/reservoir-sampling/","text":"","title":"Reservoir sampling"},{"location":"algo/selection-sort/","tags":["sort"],"text":"Concept \u00b6 \u9996\u5148\u627e\u5230\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u4e0e\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff1b\u7136\u540e\u5728\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u518d\u4e0e\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\u3002\u3002\u3002\u5982\u6b64\u5f80\u590d\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6574\u4e2a\u6570\u7ec4\u3002\u8fd9\u79cd\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\u7684\u65b9\u6cd5\uff0c\u5c31\u53eb\u505a \u9009\u62e9\u6392\u5e8f \u3002 \u5b9e\u73b0 \u00b6 \u4f2a\u4ee3\u7801 Integer\u6392\u5e8f\u5b9e\u73b0 \u9009\u62e9\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 public void selectionSort ( Comparable [] a ) { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { int min = i ; // \u5c06\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7d22\u5f15 // \u627e\u51fa\u6700\u5c0f\u5143\u7d20 for ( int j = i + 1 ; j < n ; j ++ ) { min = less ( a [ j ] , a [ min ] ) ? j : min ; // less()\u65b9\u6cd5\u8fd4\u56detrue\u8868\u793aa[j]\u66f4\u5c0f } exchange ( a , i , min ); // \u5c06a[min]\u4e0ea[i]\u4ea4\u6362 } } \u9009\u62e9\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void selectionSort ( int [] a ) { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { int min = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] < a [ min ] ) min = j ; } exchange ( a , i , min ); } } private void exchange ( int [] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; } \u7b97\u6cd5\u5206\u6790 \u00b6","title":"\u9009\u62e9\u6392\u5e8f"},{"location":"algo/selection-sort/#concept","text":"\u9996\u5148\u627e\u5230\u6570\u7ec4\u4e2d\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u7136\u540e\u4e0e\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\uff1b\u7136\u540e\u5728\u5269\u4e0b\u7684\u5143\u7d20\u4e2d\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u518d\u4e0e\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\u3002\u3002\u3002\u5982\u6b64\u5f80\u590d\uff0c\u76f4\u5230\u6392\u5e8f\u5b8c\u6574\u4e2a\u6570\u7ec4\u3002\u8fd9\u79cd\u9009\u62e9\u6700\u5c0f\u7684\u5143\u7d20\u4ea4\u6362\u4f4d\u7f6e\u7684\u65b9\u6cd5\uff0c\u5c31\u53eb\u505a \u9009\u62e9\u6392\u5e8f \u3002","title":"Concept"},{"location":"algo/selection-sort/#_1","text":"\u4f2a\u4ee3\u7801 Integer\u6392\u5e8f\u5b9e\u73b0 \u9009\u62e9\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 public void selectionSort ( Comparable [] a ) { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { int min = i ; // \u5c06\u6700\u5c0f\u5143\u7d20\u7684\u7d22\u5f15\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7d22\u5f15 // \u627e\u51fa\u6700\u5c0f\u5143\u7d20 for ( int j = i + 1 ; j < n ; j ++ ) { min = less ( a [ j ] , a [ min ] ) ? j : min ; // less()\u65b9\u6cd5\u8fd4\u56detrue\u8868\u793aa[j]\u66f4\u5c0f } exchange ( a , i , min ); // \u5c06a[min]\u4e0ea[i]\u4ea4\u6362 } } \u9009\u62e9\u6392\u5e8f 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 public void selectionSort ( int [] a ) { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { int min = i ; for ( int j = i + 1 ; j < n ; j ++ ) { if ( a [ j ] < a [ min ] ) min = j ; } exchange ( a , i , min ); } } private void exchange ( int [] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; }","title":"\u5b9e\u73b0"},{"location":"algo/selection-sort/#_2","text":"","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"algo/shell-sort/","tags":["sort"],"text":"Concept \u00b6 \u5e0c\u513f\u6392\u5e8f \u662f\u4e00\u79cd\u57fa\u4e8e \u63d2\u5165\u6392\u5e8f \u7684\u5feb\u901f\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u5927\u89c4\u6a21\u7684\u6570\u636e\uff0c\u63d2\u5165\u6392\u5e8f\u4f1a\u5f88\u6162\uff0c\u56e0\u4e3a\u63d2\u5165\u6392\u5e8f\u53ea\u4f1a\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6700\u5c0f\u7684\u5143\u7d20\u5728\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u90a3\u4e48\u5219\u9700\u8981 N - 1 \u7684\u4ea4\u6362\u624d\u80fd\u5c06\u5b83\u632a\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002\u5e0c\u5c14\u6392\u5e8f\u5219\u4e3a\u4e86\u52a0\u5feb\u901f\u5ea6\uff0c\u7b80\u5355\u7684\u6539\u8fdb\u4e86\u63d2\u5165\u6392\u5e8f\uff0c\u4ea4\u6362\u4e0d\u76f8\u90bb\u7684\u5143\u7d20\u4ee5\u5bf9\u6570\u7ec4\u7684\u5c40\u90e8\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u6700\u7ec8\u7528\u63d2\u5165\u6392\u5e8f\u5c06\u5c40\u90e8\u6709\u5e8f\u7684\u6570\u7ec4\u6392\u5e8f\u3002 \u5e0c\u5c14\u6392\u5e8f\u7684\u601d\u60f3\u5c31\u662f\u4f7f\u6570\u7ec4\u4e2d\u4efb\u610f\u95f4\u9694\u4e3a h \u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u5728\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u5982\u679c h \u5f88\u5927\uff0c\u6211\u4eec\u5c31\u80fd\u5c06\u5143\u7d20\u79fb\u52a8\u5230\u5f88\u8fdc\u7684\u5730\u65b9\uff0c\u4e3a\u5b9e\u73b0\u66f4\u5c0f\u7684 h \u6709\u5e8f \u521b\u9020\u4e86\u65b9\u4fbf\u3002\u800c\u5b9e\u73b0\u5e0c\u5c14\u6392\u5e8f\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a h \uff0c\u7528\u63d2\u5165\u6392\u5e8f\u5c06 h \u4e2a\u5b50\u6570\u7ec4\u72ec\u7acb\u6392\u5e8f\uff0c h \u662f\u9012\u51cf\u7684\uff0c\u76f4\u5230 h \u9012\u51cf\u4e3a 1 \u65f6\uff0c\u5c31\u80fd\u5c06\u6574\u4e2a\u6570\u7ec4\u5b8c\u6574\u6392\u5e8f\u5b8c\u6bd5\u3002 Implementation \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public void shellSort ( int [] a ) { int n = a . length ; int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; while ( h >= 1 ) { for ( int i = h ; i < n ; i ++ ) { for ( int j = i ; j >= h && a [ j ] < a [ j - h ] ; j -= h ) { exchange ( a , j , j - h ); } } h /= 3 ; } } public void exchange ( int [] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; }","title":"\u5e0c\u5c14\u6392\u5e8f"},{"location":"algo/shell-sort/#concept","text":"\u5e0c\u513f\u6392\u5e8f \u662f\u4e00\u79cd\u57fa\u4e8e \u63d2\u5165\u6392\u5e8f \u7684\u5feb\u901f\u7684\u6392\u5e8f\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u5927\u89c4\u6a21\u7684\u6570\u636e\uff0c\u63d2\u5165\u6392\u5e8f\u4f1a\u5f88\u6162\uff0c\u56e0\u4e3a\u63d2\u5165\u6392\u5e8f\u53ea\u4f1a\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6700\u5c0f\u7684\u5143\u7d20\u5728\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\uff0c\u90a3\u4e48\u5219\u9700\u8981 N - 1 \u7684\u4ea4\u6362\u624d\u80fd\u5c06\u5b83\u632a\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u4e0a\u3002\u5e0c\u5c14\u6392\u5e8f\u5219\u4e3a\u4e86\u52a0\u5feb\u901f\u5ea6\uff0c\u7b80\u5355\u7684\u6539\u8fdb\u4e86\u63d2\u5165\u6392\u5e8f\uff0c\u4ea4\u6362\u4e0d\u76f8\u90bb\u7684\u5143\u7d20\u4ee5\u5bf9\u6570\u7ec4\u7684\u5c40\u90e8\u8fdb\u884c\u6392\u5e8f\uff0c\u5e76\u6700\u7ec8\u7528\u63d2\u5165\u6392\u5e8f\u5c06\u5c40\u90e8\u6709\u5e8f\u7684\u6570\u7ec4\u6392\u5e8f\u3002 \u5e0c\u5c14\u6392\u5e8f\u7684\u601d\u60f3\u5c31\u662f\u4f7f\u6570\u7ec4\u4e2d\u4efb\u610f\u95f4\u9694\u4e3a h \u7684\u5143\u7d20\u90fd\u662f\u6709\u5e8f\u7684\uff0c\u5728\u8fdb\u884c\u6392\u5e8f\u65f6\uff0c\u5982\u679c h \u5f88\u5927\uff0c\u6211\u4eec\u5c31\u80fd\u5c06\u5143\u7d20\u79fb\u52a8\u5230\u5f88\u8fdc\u7684\u5730\u65b9\uff0c\u4e3a\u5b9e\u73b0\u66f4\u5c0f\u7684 h \u6709\u5e8f \u521b\u9020\u4e86\u65b9\u4fbf\u3002\u800c\u5b9e\u73b0\u5e0c\u5c14\u6392\u5e8f\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u5bf9\u4e8e\u6bcf\u4e2a h \uff0c\u7528\u63d2\u5165\u6392\u5e8f\u5c06 h \u4e2a\u5b50\u6570\u7ec4\u72ec\u7acb\u6392\u5e8f\uff0c h \u662f\u9012\u51cf\u7684\uff0c\u76f4\u5230 h \u9012\u51cf\u4e3a 1 \u65f6\uff0c\u5c31\u80fd\u5c06\u6574\u4e2a\u6570\u7ec4\u5b8c\u6574\u6392\u5e8f\u5b8c\u6bd5\u3002","title":"Concept"},{"location":"algo/shell-sort/#implementation","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public void shellSort ( int [] a ) { int n = a . length ; int h = 1 ; while ( h < n / 3 ) h = 3 * h + 1 ; while ( h >= 1 ) { for ( int i = h ; i < n ; i ++ ) { for ( int j = i ; j >= h && a [ j ] < a [ j - h ] ; j -= h ) { exchange ( a , j , j - h ); } } h /= 3 ; } } public void exchange ( int [] a , int i , int j ) { int swap = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = swap ; }","title":"Implementation"},{"location":"algo/union-find/","text":"\u8fd9\u7bc7\u6587\u7ae0\u4e3b\u8981\u8bb2\u8bb2 Union Find 1 \u7b97\u6cd5\uff0c \u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684 \u5e76\u67e5\u96c6 \u7b97\u6cd5\u3002\u4e3b\u8981\u7528\u4e8e\u56fe\u7b97\u6cd5\u4e2d\u7684 \u52a8\u6001\u8fde\u901a\u6027 \u3002 \u52a8\u6001\u8fde\u901a\u6027 \u00b6 Note \u5047\u8bbe\u8f93\u5165\u4e00\u8fde\u4e32\u7684\u6574\u6570\u5bf9\uff0c\u5176\u4e2d\u4e00\u5bf9\u6574\u6570\u5bf9 p \u548c q \uff0c\u5b83\u4eec\u5206\u522b\u4ee3\u8868\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5bf9\u6574\u6570\u5bf9 p \u548c q \u662f\u76f8\u8fde\u7684\u3002\u5219\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u800c\u518d\u63a5\u6536\u4e4b\u540e\u7684\u6574\u6570\u5bf9\u65f6\uff0c\u5219\u53ef\u4ee5\u5224\u65ad\u6574\u6570\u5bf9\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u6765\u8fc7\u6ee4\u6389\u65e0\u610f\u4e49\u7684\u6574\u6570\u5bf9\uff0c\u56e0\u4e3a\u5982\u679c\u6574\u6570\u5bf9\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\u5b83\u4eec\u4e00\u5b9a\u662f\u76f8\u8fde\u901a\u7684\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u52a8\u6001\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u60f3\u8c61\u6210\u4e00\u4e2a\u56fe\u7ed3\u6784\uff0c\u56fe\u4e2d\u7684\u8282\u70b9\u6709\u4e9b\u4e92\u76f8\u8fde\u63a5\uff0c\u6709\u4e9b\u4e0d\u4e92\u76f8\u8fde\u63a5\uff0c\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u76f8\u8fde\uff0c\u5219\u5b83\u4eec\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a Symmetric (\u5bf9\u79f0\u6027): \u5982\u679c p \u4e0e q \u8fde\u63a5\uff0c\u5219 q \u4e0e p \u4e5f\u76f8\u8fde Transitive (\u4f20\u9012\u6027): \u5982\u679c p \u4e0e q \u76f8\u8fde\uff0c q \u4e0e r \u76f8\u8fde\uff0c\u5219 p \u4e0e r \u4e5f\u76f8\u8fde Reflexive (\u81ea\u53cd\u6027): \u81ea\u8eab\u4e0e\u81ea\u8eab\u76f8\u8fde \u800c\u52a8\u6001\u8fde\u901a\u6027\u7684\u76ee\u6807\u5c31\u662f\u8981\u627e\u51fa\u65e0\u610f\u4e49\u7684 pair \uff0c\u4f8b\u5982\u4e00\u4e2a\u6574\u6570\u5bf9 p \u4e0e q \uff0c\u5982\u679c\u4e4b\u524d\u7684\u6574\u6570\u5bf9\u5df2\u7ecf\u8868\u660e\u4ed6\u4eec\u662f\u76f8\u8fde\u63a5\u7684\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u5ffd\u7565\u8fd9\u4e2a\u6574\u6570\u5bf9\uff0c\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u6574\u6570\u5bf9\u3002 \u800c Union Find \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5b9e\u73b0\uff1a Union Find Pseudo Code 1 2 3 4 5 6 7 public class UF { UF(int n); // \u521d\u59cb\u5316n\u4e2a\u8fde\u63a5\u70b9(0 ~ n-1) void union(int p, int q); // \u6dfb\u52a0p\u4e0eq\u7684\u8fde\u63a5 int find(int p); // \u627e\u5230p\u7684\u8fde\u901a\u5206\u91cf boolean connected(int p, int q); // \u5224\u65adp\u4e0eq\u662f\u5426\u8fde\u901a int count(); //\u8fd4\u56de\u56fe\u4e2d\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5206\u91cf } Quick Union \u5b9e\u73b0 \u00b6 \u5728\u6b64\u4e4b\u524d\u6709\u4e00\u4e2a Quick Find \u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4e2d union \u64cd\u4f5c\u6bcf\u6b21\u90fd\u4f1a\u8bbf\u95ee\u4e00\u6b21\u6570\u7ec4\uff0c\u6240\u4ee5\u5f53\u8fde\u901a\u5206\u91cf\u6570\u91cf\u5f88\u5c0f\u65f6\uff0c\u6700\u7ec8\u7684\u7b97\u6cd5\u65f6\u95f4\u662f\u5e73\u65b9\u53ca\u7684\uff0c\u6240\u4ee5\u4e0d\u5728\u8fd9\u8ba8\u8bba\u4e86 \u601d\u8def \u00b6 \u8be6\u7ec6\u7684\u8fc7\u7a0b\u53ef\u4ee5\u9605\u8bfb\u4e00\u4e0b\u666e\u6797\u65af\u987f\u5927\u5b66\u7684 cos226 2 \u4e2d\u8bb2 Union Find \u7684 slides\uff0c\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7406\u89e3\u4e00\u4e0b\u4e0a\u9762\u7684API\u3002 \u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5728\u4e0d\u540c\u7684\u5206\u91cf\u4e2d\uff0c union() \u64cd\u4f5c\u4f1a\u5c06\u4e24\u4e2a\u5206\u91cf\u5408\u5e76\u3002 find() \u64cd\u4f5c\u4f1a\u627e\u5230\u7ed9\u5b9a\u8282\u70b9\u7684\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5b83\u7684\u6839\u8282\u70b9\uff09\uff0c connected() \u64cd\u4f5c\u4f1a\u627e\u5230\u7ed9\u5b9a\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff0c\u5982\u679c\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u6807\u8bc6\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u662f\u76f8\u8fde\u7684\u3002 count() \u64cd\u4f5c\u8fd4\u56de\u4e86\u5f53\u524d\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\u3002\u521d\u59cb\u5316\u65f6\uff0c\u6211\u4eec\u6709 N \u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5f53\u64cd\u4f5c union() \u7684\u65f6\u5019\uff0c\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\u5c31\u4f1a\u51cf\u4e00\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5728\u7b97\u6cd5\u4e2d\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff1aparent[]\u6570\u7ec4\uff08\u4ee3\u8868\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff0c\u56e0\u4e3a union() \u5b9e\u9645\u4e0a\u662f\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u8bbe\u7f6e\u4e3a\u53e6\u4e00\u4e2a\u8282\u70b9\u6839\u8282\u70b9\u7684\u5b57\u8282\u70b9\uff09\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f count \uff0c\u4ee3\u8868\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\uff0c\u521d\u59cb\u5316\u65f6\uff0c count \u7684\u6570\u91cf\u4e3aN\u3002 \u4ee3\u7801 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class QuickUnionUF { int [] parent ; int count ; public UF ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } count = n ; // \u521d\u59cb\u5316\u65f6\u6709n\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u4e3a\u8282\u70b9\u4e92\u76f8\u4e0d\u76f8\u8fde } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) { // \u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u76f8\u8fde\uff0c\u76f4\u63a5\u8df3\u8fc7\u6b64\u64cd\u4f5c return ; } parent [ rootP ] = rootQ ; // \u7b49\u4ef7\u4e8e parent[rootQ] = rootP count -- ; // \u56e0\u4e3a\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u5408\u5e76\u4e86 } private int find ( int x ) { while ( parent [ x ] != x ) { x = parent [ x ] ; } return x ; } public int count () { return count ; } public boolean connected ( int p . int q ) { int rootP = find ( p ); int rootQ = find ( q ); return rootP == rootQ ; // \u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\u5219\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde } } \u53ef\u4ee5\u53c2\u7167\u4e0b\u9762\u7684\u6d41\u7a0b\u56fe\uff1a \u7b97\u6cd5\u5206\u6790 \u00b6 \u90a3\u4e48\u4e0a\u9762\u5b9e\u73b0\u7684\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4ece\u4ee3\u7801\u4e0a\u53ef\u4ee5\u770b\u5230\uff1a connected \u548c union \u7684\u590d\u6742\u5ea6\u90fd\u548c find \u51fd\u6570\u6709\u5173\uff0c\u800c find \u51fd\u6570\u5219\u662f\u9700\u8981\u4ece\u8be5\u8282\u70b9\u5411\u4e0a\u5bfb\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\uff0c\u867d\u7136\u5b83\u662f\u6811\u5f62\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u5355\u7eaf\u7684\u8bf4\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f logN \uff08\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff09\uff0c\u4f46\u8fd9\u4e2a\u53ef\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u53ef\u80fd\u5c31\u4f1a\u9000\u5316\u6210\u5355\u94fe\u8868\uff0c\u6240\u4ee5\u8bf4\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u53d8\u6210 N \u3002 \u6240\u4ee5\u8bf4\u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N) \uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u5f88\u4e0d\u7406\u60f3\u7684\u3002\u56e0\u4e3a\u56fe\u8bba\u89e3\u51b3\u7684\u90fd\u662f\u6570\u636e\u89c4\u6a21\u5f88\u5927\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e union \u548c connected \u7684\u8c03\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6548\u7387\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002 \u73b0\u5728\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u53bb \u907f\u514d \u6811\u7684\u4e0d\u5e73\u8861 \u3002 \u52a0\u6743 Quick Union \u7b97\u6cd5 \u00b6 \u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u7684\u4fee\u6539\u4e00\u4e0b Quick Union \u7b97\u6cd5 \u5c31\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u60c5\u51b5\u4e0d\u518d\u51fa\u73b0\uff0c\u53ea\u8981\u6bcf\u6b21 union \u64cd\u4f5c\u65f6\uff0c\u603b\u662f\u628a\u5c0f\u7684\u6811\u5408\u5e76\u5230\u5927\u7684\u6811\u4e0a\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6570\u7ec4\uff0c\u6765\u8bb0\u5f55\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public class WeightedQuickUnionUF { int [] parent ; int count ; int [] size ; public UF ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) size [ i ] = 1 ; // \u521d\u59cb\u5316size\u90fd\u4e3a1 count = n ; // \u521d\u59cb\u5316\u65f6\u6709n\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u4e3a\u8282\u70b9\u4e92\u76f8\u4e0d\u76f8\u8fde } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) { // \u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u76f8\u8fde\uff0c\u76f4\u63a5\u8df3\u8fc7\u6b64\u64cd\u4f5c return ; } // \u5c06\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u5927\u6811\u7684\u6839\u8282\u70b9 if ( size [ rootP ] < size [ rootQ ] ) { parent [ rootP ] = rootQ ; size [ rootQ ] += size [ rootP ] ; } else { parent [ rootQ ] = rootP ; size [ rootP ] += size [ rootQ ] ; } count -- ; // \u56e0\u4e3a\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u5408\u5e76\u4e86 } private int find ( int x ) { while ( parent [ x ] != x ) { x = parent [ x ] ; } return x ; } public int count () { return count ; } public boolean connected ( int p . int q ) { int rootP = find ( p ); int rootQ = find ( q ); return rootP == rootQ ; // \u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\u5219\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde } } \u6211\u4eec\u901a\u8fc7\u52a0\u5165\u4e86\u7531\u8282\u70b9\u7d22\u5f15\u7684\u5b9e\u4f8b\u53d8\u91cf\u6570\u7ec4 size[] \uff0c\u8fd9\u6837 union \u64cd\u4f5c\u5c31\u80fd\u5c06\u5c0f\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fde\u63a5\u5230\u5927\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u6837\u7b97\u6cd5\u5c31\u80fd\u5904\u7406\u6570\u636e\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e86\u3002 \u6211\u4eec\u6765\u770b\u770b Union Find \u7b97\u6cd5\u5404\u79cd\u5b9e\u73b0\u7684\u6027\u80fd\uff1a \u7b97\u6cd5 \u6784\u9020\u51fd\u6570 union() find() quick-find \u7b97\u6cd5 N N 1 quick-union \u7b97\u6cd5 N \u6811\u7684\u9ad8\u5ea6\uff0c\u6700\u574f\u4e3a N \u6811\u7684\u9ad8\u5ea6\uff0c\u6700\u574f\u4e3a N \u52a0\u6743 quick-union \u7b97\u6cd5 N lgN lgN \u52a0\u6743 quick-union \u7b97\u6cd5 N \u975e\u5e38\u63a5\u8fd1\u4f46\u6ca1\u6709\u5230\u8fbe1 \u601d\u8003 \u00b6 \u8fd9\u6837\u770b\u6765\uff0c\u52a0\u6743 Quick Union \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a lgN \uff0c\u770b\u8d77\u6765\u662f\u6bd4\u8f83\u7406\u60f3\u7684\u72b6\u6001\u4e86\uff0c\u90a3\u6709\u6ca1\u6709\u6bd4\u8fd9\u4e2a\u66f4\u597d\u7684\u5462\uff1f\u6709\u6ca1\u6709\u80fd\u8fbe\u5230\u5e38\u6570\u7ea7\u522b\u7684\u7b97\u6cd5\u5462\uff1f \u8def\u5f84\u538b\u7f29\u7684\u52a0\u6743 Quick Union \u7b97\u6cd5 \u00b6 \u8def\u5f84\u538b\u7f29\u5c31\u662f\u5c06\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u90fd \u76f4\u63a5 \u8fde\u63a5\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u4f7f\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc72 changes in find() 1 2 3 4 5 6 7 8 9 10 11 private int find ( int x ) { List < Integer > path = new ArrayList <> (); while ( parent [ x ] != x ) { path . add ( x ); x = parent [ x ] ; } for ( int node : path ) { parent [ node ] = x ; } return x ; } \u8fd9\u6837\u5b9e\u73b0\u7684\u8bdd\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f 1 \uff0c\u4e0d\u8fc7\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8fbe\u5230\uff0c\u53ea\u80fd\u662f\u63a5\u8fd11\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u63d0\u9ad8 \u00b6 \u4f7f\u7528\u6811\u7ed3\u6784\uff08TreeNode\uff09\u6765\u5b9e\u73b0\u5e76\u67e5\u96c6 \u5f15\u7528 \u00b6 Union Find Slides 2 3 Princeton University - Union Find \u21a9 Union Find Slides by Princeton University \u21a9 http://www.sfs.uni-tuebingen.de/~dg/l1.html \u21a9","title":"\u5e76\u67e5\u96c6"},{"location":"algo/union-find/#_1","text":"Note \u5047\u8bbe\u8f93\u5165\u4e00\u8fde\u4e32\u7684\u6574\u6570\u5bf9\uff0c\u5176\u4e2d\u4e00\u5bf9\u6574\u6570\u5bf9 p \u548c q \uff0c\u5b83\u4eec\u5206\u522b\u4ee3\u8868\u4e0d\u540c\u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u8fd9\u5bf9\u6574\u6570\u5bf9 p \u548c q \u662f\u76f8\u8fde\u7684\u3002\u5219\u8fd9\u4e24\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u800c\u518d\u63a5\u6536\u4e4b\u540e\u7684\u6574\u6570\u5bf9\u65f6\uff0c\u5219\u53ef\u4ee5\u5224\u65ad\u6574\u6570\u5bf9\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u662f\u5426\u5c5e\u4e8e\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u6765\u8fc7\u6ee4\u6389\u65e0\u610f\u4e49\u7684\u6574\u6570\u5bf9\uff0c\u56e0\u4e3a\u5982\u679c\u6574\u6570\u5bf9\u4e2d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u5219\u53ef\u4ee5\u80af\u5b9a\u7684\u662f\u5b83\u4eec\u4e00\u5b9a\u662f\u76f8\u8fde\u901a\u7684\u3002 \u7b80\u5355\u6765\u8bf4\uff0c\u8fd9\u4e2a\u52a8\u6001\u8fde\u901a\u6027\uff0c\u53ef\u4ee5\u60f3\u8c61\u6210\u4e00\u4e2a\u56fe\u7ed3\u6784\uff0c\u56fe\u4e2d\u7684\u8282\u70b9\u6709\u4e9b\u4e92\u76f8\u8fde\u63a5\uff0c\u6709\u4e9b\u4e0d\u4e92\u76f8\u8fde\u63a5\uff0c\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u76f8\u8fde\uff0c\u5219\u5b83\u4eec\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a Symmetric (\u5bf9\u79f0\u6027): \u5982\u679c p \u4e0e q \u8fde\u63a5\uff0c\u5219 q \u4e0e p \u4e5f\u76f8\u8fde Transitive (\u4f20\u9012\u6027): \u5982\u679c p \u4e0e q \u76f8\u8fde\uff0c q \u4e0e r \u76f8\u8fde\uff0c\u5219 p \u4e0e r \u4e5f\u76f8\u8fde Reflexive (\u81ea\u53cd\u6027): \u81ea\u8eab\u4e0e\u81ea\u8eab\u76f8\u8fde \u800c\u52a8\u6001\u8fde\u901a\u6027\u7684\u76ee\u6807\u5c31\u662f\u8981\u627e\u51fa\u65e0\u610f\u4e49\u7684 pair \uff0c\u4f8b\u5982\u4e00\u4e2a\u6574\u6570\u5bf9 p \u4e0e q \uff0c\u5982\u679c\u4e4b\u524d\u7684\u6574\u6570\u5bf9\u5df2\u7ecf\u8868\u660e\u4ed6\u4eec\u662f\u76f8\u8fde\u63a5\u7684\u4e86\uff0c\u90a3\u6211\u4eec\u5c31\u5ffd\u7565\u8fd9\u4e2a\u6574\u6570\u5bf9\uff0c\u7ee7\u7eed\u5904\u7406\u4e0b\u4e00\u4e2a\u6574\u6570\u5bf9\u3002 \u800c Union Find \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u4e2a\u5b9e\u73b0\uff1a Union Find Pseudo Code 1 2 3 4 5 6 7 public class UF { UF(int n); // \u521d\u59cb\u5316n\u4e2a\u8fde\u63a5\u70b9(0 ~ n-1) void union(int p, int q); // \u6dfb\u52a0p\u4e0eq\u7684\u8fde\u63a5 int find(int p); // \u627e\u5230p\u7684\u8fde\u901a\u5206\u91cf boolean connected(int p, int q); // \u5224\u65adp\u4e0eq\u662f\u5426\u8fde\u901a int count(); //\u8fd4\u56de\u56fe\u4e2d\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5206\u91cf }","title":"\u52a8\u6001\u8fde\u901a\u6027"},{"location":"algo/union-find/#quick-union","text":"\u5728\u6b64\u4e4b\u524d\u6709\u4e00\u4e2a Quick Find \u7b97\u6cd5\uff0c\u8fd9\u4e2a\u7b97\u6cd5\u4e2d union \u64cd\u4f5c\u6bcf\u6b21\u90fd\u4f1a\u8bbf\u95ee\u4e00\u6b21\u6570\u7ec4\uff0c\u6240\u4ee5\u5f53\u8fde\u901a\u5206\u91cf\u6570\u91cf\u5f88\u5c0f\u65f6\uff0c\u6700\u7ec8\u7684\u7b97\u6cd5\u65f6\u95f4\u662f\u5e73\u65b9\u53ca\u7684\uff0c\u6240\u4ee5\u4e0d\u5728\u8fd9\u8ba8\u8bba\u4e86","title":"Quick Union \u5b9e\u73b0"},{"location":"algo/union-find/#_2","text":"\u8be6\u7ec6\u7684\u8fc7\u7a0b\u53ef\u4ee5\u9605\u8bfb\u4e00\u4e0b\u666e\u6797\u65af\u987f\u5927\u5b66\u7684 cos226 2 \u4e2d\u8bb2 Union Find \u7684 slides\uff0c\u8fd9\u91cc\u6211\u4eec\u7b80\u5355\u7406\u89e3\u4e00\u4e0b\u4e0a\u9762\u7684API\u3002 \u5982\u679c\u4e24\u4e2a\u8282\u70b9\u5728\u4e0d\u540c\u7684\u5206\u91cf\u4e2d\uff0c union() \u64cd\u4f5c\u4f1a\u5c06\u4e24\u4e2a\u5206\u91cf\u5408\u5e76\u3002 find() \u64cd\u4f5c\u4f1a\u627e\u5230\u7ed9\u5b9a\u8282\u70b9\u7684\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff08\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u5b83\u7684\u6839\u8282\u70b9\uff09\uff0c connected() \u64cd\u4f5c\u4f1a\u627e\u5230\u7ed9\u5b9a\u7684\u4e24\u4e2a\u8282\u70b9\u7684\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff0c\u5982\u679c\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u6807\u8bc6\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u662f\u76f8\u8fde\u7684\u3002 count() \u64cd\u4f5c\u8fd4\u56de\u4e86\u5f53\u524d\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\u3002\u521d\u59cb\u5316\u65f6\uff0c\u6211\u4eec\u6709 N \u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u5f53\u64cd\u4f5c union() \u7684\u65f6\u5019\uff0c\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\u5c31\u4f1a\u51cf\u4e00\u3002 \u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5728\u7b97\u6cd5\u4e2d\u7ef4\u62a4\u4e24\u4e2a\u53d8\u91cf\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff1aparent[]\u6570\u7ec4\uff08\u4ee3\u8868\u8fde\u901a\u5206\u91cf\u6807\u8bc6\uff0c\u56e0\u4e3a union() \u5b9e\u9645\u4e0a\u662f\u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u8bbe\u7f6e\u4e3a\u53e6\u4e00\u4e2a\u8282\u70b9\u6839\u8282\u70b9\u7684\u5b57\u8282\u70b9\uff09\uff0c\u8fd8\u6709\u4e00\u4e2a\u662f count \uff0c\u4ee3\u8868\u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf\uff0c\u521d\u59cb\u5316\u65f6\uff0c count \u7684\u6570\u91cf\u4e3aN\u3002","title":"\u601d\u8def"},{"location":"algo/union-find/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 public class QuickUnionUF { int [] parent ; int count ; public UF ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } count = n ; // \u521d\u59cb\u5316\u65f6\u6709n\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u4e3a\u8282\u70b9\u4e92\u76f8\u4e0d\u76f8\u8fde } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) { // \u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u76f8\u8fde\uff0c\u76f4\u63a5\u8df3\u8fc7\u6b64\u64cd\u4f5c return ; } parent [ rootP ] = rootQ ; // \u7b49\u4ef7\u4e8e parent[rootQ] = rootP count -- ; // \u56e0\u4e3a\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u5408\u5e76\u4e86 } private int find ( int x ) { while ( parent [ x ] != x ) { x = parent [ x ] ; } return x ; } public int count () { return count ; } public boolean connected ( int p . int q ) { int rootP = find ( p ); int rootQ = find ( q ); return rootP == rootQ ; // \u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\u5219\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde } } \u53ef\u4ee5\u53c2\u7167\u4e0b\u9762\u7684\u6d41\u7a0b\u56fe\uff1a","title":"\u4ee3\u7801"},{"location":"algo/union-find/#_4","text":"\u90a3\u4e48\u4e0a\u9762\u5b9e\u73b0\u7684\u8fd9\u4e2a\u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f\u591a\u5c11\u5462\uff1f\u4ece\u4ee3\u7801\u4e0a\u53ef\u4ee5\u770b\u5230\uff1a connected \u548c union \u7684\u590d\u6742\u5ea6\u90fd\u548c find \u51fd\u6570\u6709\u5173\uff0c\u800c find \u51fd\u6570\u5219\u662f\u9700\u8981\u4ece\u8be5\u8282\u70b9\u5411\u4e0a\u5bfb\u627e\u5230\u8fd9\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\uff0c\u867d\u7136\u5b83\u662f\u6811\u5f62\u7ed3\u6784\uff0c\u4f46\u6211\u4eec\u4e0d\u80fd\u5355\u7eaf\u7684\u8bf4\u5b83\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f logN \uff08\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u9ad8\u5ea6\uff09\uff0c\u4f46\u8fd9\u4e2a\u53ef\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\uff0c\u5728\u6781\u7aef\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e2a\u6811\u5f62\u7ed3\u6784\u53ef\u80fd\u5c31\u4f1a\u9000\u5316\u6210\u5355\u94fe\u8868\uff0c\u6240\u4ee5\u8bf4\u6700\u574f\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53ef\u80fd\u53d8\u6210 N \u3002 \u6240\u4ee5\u8bf4\u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(N) \uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f\u5f88\u4e0d\u7406\u60f3\u7684\u3002\u56e0\u4e3a\u56fe\u8bba\u89e3\u51b3\u7684\u90fd\u662f\u6570\u636e\u89c4\u6a21\u5f88\u5927\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e union \u548c connected \u7684\u8c03\u7528\u975e\u5e38\u9891\u7e41\uff0c\u6240\u4ee5\u7ebf\u6027\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u6548\u7387\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002 \u73b0\u5728\u7684\u95ee\u9898\u5c31\u5728\u4e8e\u5982\u4f55\u53bb \u907f\u514d \u6811\u7684\u4e0d\u5e73\u8861 \u3002","title":"\u7b97\u6cd5\u5206\u6790"},{"location":"algo/union-find/#quick-union_1","text":"\u6211\u4eec\u53ea\u9700\u8981\u7b80\u5355\u7684\u4fee\u6539\u4e00\u4e0b Quick Union \u7b97\u6cd5 \u5c31\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u60c5\u51b5\u4e0d\u518d\u51fa\u73b0\uff0c\u53ea\u8981\u6bcf\u6b21 union \u64cd\u4f5c\u65f6\uff0c\u603b\u662f\u628a\u5c0f\u7684\u6811\u5408\u5e76\u5230\u5927\u7684\u6811\u4e0a\uff0c\u5c31\u53ef\u4ee5\u89e3\u51b3\u8fd9\u6837\u7684\u95ee\u9898\u3002\u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6570\u7ec4\uff0c\u6765\u8bb0\u5f55\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u7684\u5927\u5c0f\u3002","title":"\u52a0\u6743 Quick Union \u7b97\u6cd5"},{"location":"algo/union-find/#_5","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 public class WeightedQuickUnionUF { int [] parent ; int count ; int [] size ; public UF ( int n ) { for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } for ( int i = 0 ; i < n ; i ++ ) size [ i ] = 1 ; // \u521d\u59cb\u5316size\u90fd\u4e3a1 count = n ; // \u521d\u59cb\u5316\u65f6\u6709n\u4e2a\u8fde\u901a\u5206\u91cf\uff0c\u56e0\u4e3a\u8282\u70b9\u4e92\u76f8\u4e0d\u76f8\u8fde } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) { // \u8bf4\u660e\u4e24\u4e2a\u8282\u70b9\u5df2\u7ecf\u76f8\u8fde\uff0c\u76f4\u63a5\u8df3\u8fc7\u6b64\u64cd\u4f5c return ; } // \u5c06\u5c0f\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u5927\u6811\u7684\u6839\u8282\u70b9 if ( size [ rootP ] < size [ rootQ ] ) { parent [ rootP ] = rootQ ; size [ rootQ ] += size [ rootP ] ; } else { parent [ rootQ ] = rootP ; size [ rootP ] += size [ rootQ ] ; } count -- ; // \u56e0\u4e3a\u4e24\u4e2a\u8fde\u901a\u5206\u91cf\u5408\u5e76\u4e86 } private int find ( int x ) { while ( parent [ x ] != x ) { x = parent [ x ] ; } return x ; } public int count () { return count ; } public boolean connected ( int p . int q ) { int rootP = find ( p ); int rootQ = find ( q ); return rootP == rootQ ; // \u4e24\u4e2a\u8282\u70b9\u7684\u6839\u8282\u70b9\u76f8\u540c\u5219\u5728\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u76f8\u8fde } } \u6211\u4eec\u901a\u8fc7\u52a0\u5165\u4e86\u7531\u8282\u70b9\u7d22\u5f15\u7684\u5b9e\u4f8b\u53d8\u91cf\u6570\u7ec4 size[] \uff0c\u8fd9\u6837 union \u64cd\u4f5c\u5c31\u80fd\u5c06\u5c0f\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fde\u63a5\u5230\u5927\u6811\u7684\u6839\u8282\u70b9\uff0c\u8fd9\u6837\u7b97\u6cd5\u5c31\u80fd\u5904\u7406\u6570\u636e\u89c4\u6a21\u8f83\u5927\u7684\u95ee\u9898\u4e86\u3002 \u6211\u4eec\u6765\u770b\u770b Union Find \u7b97\u6cd5\u5404\u79cd\u5b9e\u73b0\u7684\u6027\u80fd\uff1a \u7b97\u6cd5 \u6784\u9020\u51fd\u6570 union() find() quick-find \u7b97\u6cd5 N N 1 quick-union \u7b97\u6cd5 N \u6811\u7684\u9ad8\u5ea6\uff0c\u6700\u574f\u4e3a N \u6811\u7684\u9ad8\u5ea6\uff0c\u6700\u574f\u4e3a N \u52a0\u6743 quick-union \u7b97\u6cd5 N lgN lgN \u52a0\u6743 quick-union \u7b97\u6cd5 N \u975e\u5e38\u63a5\u8fd1\u4f46\u6ca1\u6709\u5230\u8fbe1","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"algo/union-find/#_6","text":"\u8fd9\u6837\u770b\u6765\uff0c\u52a0\u6743 Quick Union \u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a lgN \uff0c\u770b\u8d77\u6765\u662f\u6bd4\u8f83\u7406\u60f3\u7684\u72b6\u6001\u4e86\uff0c\u90a3\u6709\u6ca1\u6709\u6bd4\u8fd9\u4e2a\u66f4\u597d\u7684\u5462\uff1f\u6709\u6ca1\u6709\u80fd\u8fbe\u5230\u5e38\u6570\u7ea7\u522b\u7684\u7b97\u6cd5\u5462\uff1f","title":"\u601d\u8003"},{"location":"algo/union-find/#quick-union_2","text":"\u8def\u5f84\u538b\u7f29\u5c31\u662f\u5c06\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u90fd \u76f4\u63a5 \u8fde\u63a5\u5230\u6839\u8282\u70b9\u4e0a\uff0c\u4f7f\u6811\u7684\u9ad8\u5ea6\u4e0d\u8d85\u8fc72 changes in find() 1 2 3 4 5 6 7 8 9 10 11 private int find ( int x ) { List < Integer > path = new ArrayList <> (); while ( parent [ x ] != x ) { path . add ( x ); x = parent [ x ] ; } for ( int node : path ) { parent [ node ] = x ; } return x ; } \u8fd9\u6837\u5b9e\u73b0\u7684\u8bdd\uff0c\u7406\u60f3\u60c5\u51b5\u4e0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f 1 \uff0c\u4e0d\u8fc7\u51e0\u4e4e\u4e0d\u53ef\u80fd\u8fbe\u5230\uff0c\u53ea\u80fd\u662f\u63a5\u8fd11\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002","title":"\u8def\u5f84\u538b\u7f29\u7684\u52a0\u6743 Quick Union \u7b97\u6cd5"},{"location":"algo/union-find/#_7","text":"\u4f7f\u7528\u6811\u7ed3\u6784\uff08TreeNode\uff09\u6765\u5b9e\u73b0\u5e76\u67e5\u96c6","title":"\u63d0\u9ad8"},{"location":"algo/union-find/#_8","text":"Union Find Slides 2 3 Princeton University - Union Find \u21a9 Union Find Slides by Princeton University \u21a9 http://www.sfs.uni-tuebingen.de/~dg/l1.html \u21a9","title":"\u5f15\u7528"},{"location":"algo/leetcode/142-linked-list-cycle-ii/","tags":["Medium"],"text":"142. Linked List Cycle II - Medium \u5728\u770b\u8fd9\u9053\u9898\u4e4b\u524d\uff0c\u9996\u5148\u53ef\u4ee5\u53bb\u505a\u4e00\u4e0b 141. Linked List Cycle \uff08\u5feb\u6162\u6307\u9488\u5c31\u80fd\u89e3\u51b3\uff09\uff0c\u56e0\u4e3a\u672c\u6587\u7684\u9898\u662f\u8fd9\u9053\u9898\u7684 follow up \u3002 Description \u00b6 142. Linked List Cycle II Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter. Do not modify the linked list. Example 1 : Input : head = [3,2,0,-4], pos = 1 Output : tail connects to node index 1 Explanation : There is a cycle in the linked list, where tail connects to the second node. \u8fd9\u9053\u9898\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\u8ba9\u4f60\u627e\u51fa\u6765\u94fe\u8868\u4e2d\u5faa\u73af\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u4f1a\u4f7f\u7528\u5230 \u5feb\u6162\u6307\u9488 \u7684\u601d\u60f3\u3002\u4f46\u662f\u8fd9\u9053\u9898\u7a0d\u5fae\u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u53ea\u8981\u4e86\u89e3 Cycle detection - Floyd\u2019s Cycle Detection Algorithm \u5dee\u4e0d\u591a\u5c31\u80fd\u77e5\u9053\u600e\u4e48\u505a\u4e86\u3002 \u6216\u8005\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a Floyd\u2019s Cycle Detection Algorithm \uff0c\u8bb2\u7684\u7b97\u662f\u6bd4\u8f83\u6e05\u695a\u4e86\u3002 Solution \u00b6 \u5148\u7528\u5feb\u6162\u6307\u9488\u5faa\u73af\uff0c\u5230\u4e24\u4e2a\u6307\u9488\u5230\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u5c06\u6162\u6307\u9488reset\u5230head\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u4ee51\u7684\u901f\u5ea6\u7ee7\u7eed\u8d70\uff0c\u4ed6\u4eec\u76f8\u9047\u7684\u8282\u70b9\u5c31\u662f\u5faa\u73af\u5f00\u59cb\u7684\u8282\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle ( ListNode head ) { if ( head == null ) return null ; ListNode slow = head , fast = head ; while ( fast != null && fast . next != null ) { slow = slow . next ; fast = fast . next . next ; if ( slow == fast ) { slow = head ; while ( slow != fast ) { slow = slow . next ; fast = fast . next ; } return slow ; } } return null ; } }","title":"142. Linked List Cycle II"},{"location":"algo/leetcode/142-linked-list-cycle-ii/#description","text":"142. Linked List Cycle II Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null. There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter. Do not modify the linked list. Example 1 : Input : head = [3,2,0,-4], pos = 1 Output : tail connects to node index 1 Explanation : There is a cycle in the linked list, where tail connects to the second node. \u8fd9\u9053\u9898\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\u8ba9\u4f60\u627e\u51fa\u6765\u94fe\u8868\u4e2d\u5faa\u73af\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4e5f\u4f1a\u4f7f\u7528\u5230 \u5feb\u6162\u6307\u9488 \u7684\u601d\u60f3\u3002\u4f46\u662f\u8fd9\u9053\u9898\u7a0d\u5fae\u6709\u4e00\u4e9b\u53d8\u5316\uff0c\u53ea\u8981\u4e86\u89e3 Cycle detection - Floyd\u2019s Cycle Detection Algorithm \u5dee\u4e0d\u591a\u5c31\u80fd\u77e5\u9053\u600e\u4e48\u505a\u4e86\u3002 \u6216\u8005\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7\u6587\u7ae0\uff1a Floyd\u2019s Cycle Detection Algorithm \uff0c\u8bb2\u7684\u7b97\u662f\u6bd4\u8f83\u6e05\u695a\u4e86\u3002","title":"Description"},{"location":"algo/leetcode/142-linked-list-cycle-ii/#solution","text":"\u5148\u7528\u5feb\u6162\u6307\u9488\u5faa\u73af\uff0c\u5230\u4e24\u4e2a\u6307\u9488\u5230\u540c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u65f6\u5019\uff0c\u5c06\u6162\u6307\u9488reset\u5230head\uff0c\u7136\u540e\u4e24\u4e2a\u6307\u9488\u540c\u65f6\u4ee51\u7684\u901f\u5ea6\u7ee7\u7eed\u8d70\uff0c\u4ed6\u4eec\u76f8\u9047\u7684\u8282\u70b9\u5c31\u662f\u5faa\u73af\u5f00\u59cb\u7684\u8282\u70b9\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle ( ListNode head ) { if ( head == null ) return null ; ListNode slow = head , fast = head ; while ( fast != null && fast . next != null ) { slow = slow . next ; fast = fast . next . next ; if ( slow == fast ) { slow = head ; while ( slow != fast ) { slow = slow . next ; fast = fast . next ; } return slow ; } } return null ; } }","title":"Solution"},{"location":"algo/leetcode/check-completeness-of-a-binary-tree/","tags":["Medium","BFS","Binary Tree"],"text":"958. Check Completeness of a Binary Tree - Medium Description \u00b6 958. Check Completeness of a Binary Tree Given the root of a binary tree, determine if it is a complete binary tree. In a complete binary tree , every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level h . \u4e2d\u7b49\u7684\u9898\uff0c\u8981\u6c42\u68c0\u67e5\u4e00\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\uff1a \u767e\u5ea6\u767e\u79d1 \uff0c Programiz - Complete Binary Tree \u5173\u4e8e\u6811\u95ee\u9898\uff0c\u5c31\u9003\u4e0d\u8fc7\u8fd9\u4e9b\u8303\u56f4\uff1a\u524d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u540e\u5e8f\u904d\u5386\uff0c\u5c42\u5e8f\u904d\u5386\u3002 \u800c\u8fd9\u9053\u9898\u7684\u5173\u952e\u5c31\u662f \u5c42\u5e8f\u904d\u5386 \uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u5728\u505a\u5c42\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u4f1a\u9047\u5230 null \u7684\u8282\u70b9\uff0c\u5982\u679c\u6709 node \u8282\u70b9\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 Solution \u00b6 \u4ee3\u7801\u4e2d\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u53ef\u80fd\u6700\u540e\u4e00\u4e2a\u53f3\u8282\u70b9\u662f null \uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u53bb\u6389\u8fd9\u4e2a null \u3002\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5728\u5c42\u5e8f\u904d\u5386\u4e2d\u9047\u5230\u4e86 null \u8282\u70b9\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\u5c31\u4f1a\u9000\u51fa\uff0c\u5230\u7b2c\u4e8c\u4e2a\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u628a\u961f\u5217\u672b\u5c3e\u7684 null \u8282\u70b9\u5220\u9664\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u961f\u5217\u80af\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isCompleteTree ( TreeNode root ) { Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); while ( q . peek () != null ) { TreeNode node = q . poll (); q . offer ( node . left ); q . offer ( node . right ); } while ( ! q . isEmpty () && q . peek () == null ) { q . poll (); } return q . isEmpty (); } }","title":"958. Check Completeness of a Binary Tree"},{"location":"algo/leetcode/check-completeness-of-a-binary-tree/#description","text":"958. Check Completeness of a Binary Tree Given the root of a binary tree, determine if it is a complete binary tree. In a complete binary tree , every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2^h nodes inclusive at the last level h . \u4e2d\u7b49\u7684\u9898\uff0c\u8981\u6c42\u68c0\u67e5\u4e00\u4e2a\u4e8c\u53c9\u6811\u662f\u5426\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\uff1a \u767e\u5ea6\u767e\u79d1 \uff0c Programiz - Complete Binary Tree \u5173\u4e8e\u6811\u95ee\u9898\uff0c\u5c31\u9003\u4e0d\u8fc7\u8fd9\u4e9b\u8303\u56f4\uff1a\u524d\u5e8f\u904d\u5386\uff0c\u4e2d\u5e8f\u904d\u5386\uff0c\u540e\u5e8f\u904d\u5386\uff0c\u5c42\u5e8f\u904d\u5386\u3002 \u800c\u8fd9\u9053\u9898\u7684\u5173\u952e\u5c31\u662f \u5c42\u5e8f\u904d\u5386 \uff0c\u5982\u679c\u4e00\u4e2a\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u5728\u505a\u5c42\u5e8f\u904d\u5386\u7684\u65f6\u5019\uff0c\u5c31\u4e0d\u4f1a\u9047\u5230 null \u7684\u8282\u70b9\uff0c\u5982\u679c\u6709 node \u8282\u70b9\uff0c\u90a3\u5c31\u8bf4\u660e\u8fd9\u4e2a\u4e8c\u53c9\u6811\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002","title":"Description"},{"location":"algo/leetcode/check-completeness-of-a-binary-tree/#solution","text":"\u4ee3\u7801\u4e2d\u4f1a\u51fa\u73b0\u4e24\u79cd\u60c5\u51b5\uff0c\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u4e8c\u53c9\u6811\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u90a3\u4e48\u53ef\u80fd\u6700\u540e\u4e00\u4e2a\u53f3\u8282\u70b9\u662f null \uff0c\u8fd9\u65f6\u5019\u5c31\u8981\u53bb\u6389\u8fd9\u4e2a null \u3002\u8fd8\u6709\u4e00\u79cd\u60c5\u51b5\u5c31\u662f\u5728\u5c42\u5e8f\u904d\u5386\u4e2d\u9047\u5230\u4e86 null \u8282\u70b9\uff0c\u7b2c\u4e00\u4e2a\u5faa\u73af\u5c31\u4f1a\u9000\u51fa\uff0c\u5230\u7b2c\u4e8c\u4e2a\u5faa\u73af\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u628a\u961f\u5217\u672b\u5c3e\u7684 null \u8282\u70b9\u5220\u9664\uff0c\u8fd9\u4e2a\u65f6\u5019\u7684\u961f\u5217\u80af\u5b9a\u4e0d\u4e3a\u7a7a\uff0c\u6240\u4ee5\u5b83\u4e0d\u662f\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isCompleteTree ( TreeNode root ) { Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); while ( q . peek () != null ) { TreeNode node = q . poll (); q . offer ( node . left ); q . offer ( node . right ); } while ( ! q . isEmpty () && q . peek () == null ) { q . poll (); } return q . isEmpty (); } }","title":"Solution"},{"location":"algo/leetcode/number-of-islands/","tags":["Medium","BFS","DFS","Union Find"],"text":"200. \u5c9b\u5c7f\u6570\u91cf - Medium Description \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u7531 '1' \uff08\u9646\u5730\uff09\u548c '0' \uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002 \u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u8fd9\u91cc\u6709\u4e09\u79cd\u89e3\u6cd5\uff0c\u4e00\u79cd\u662f BFS \uff0c\u4e00\u79cd\u662f DFS \uff0c\u8fd8\u6709\u4e00\u79cd\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u7684\u7279\u6027\u4e86\u3002 Solution \u00b6 BFS DFS \u5e76\u67e5\u96c6 BFS \u89e3\u6cd5\u5c31\u662f\u5728\u6bcf\u4e2a\u5750\u6807\u4f18\u5148\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public int numIslands ( char [][] grid ) { int count = 0 ; for ( int i = 0 ; i < grid . length ; i ++ ) { for ( int j = 0 ; j < grid [ 0 ] . length ; j ++ ) { if ( grid [ i ][ j ] == '1' ){ bfs ( grid , i , j ); count ++ ; } } } return count ; } private void bfs ( char [][] grid , int i , int j ){ Queue < int []> list = new LinkedList <> (); list . add ( new int [] { i , j }); while ( ! list . isEmpty ()){ int [] cur = list . remove (); i = cur [ 0 ] ; j = cur [ 1 ] ; if ( 0 <= i && i < grid . length && 0 <= j && j < grid [ 0 ] . length && grid [ i ][ j ] == '1' ) { grid [ i ][ j ] = '0' ; list . add ( new int [] { i + 1 , j }); list . add ( new int [] { i - 1 , j }); list . add ( new int [] { i , j + 1 }); list . add ( new int [] { i , j - 1 }); } } } } DFS \u4e0e BFS \u4e0d\u540c\u7684\u5c31\u662f\u4e00\u6b21\u5411\u540c\u4e00\u4e2a\u65b9\u5411\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u7ed3\u675f\u540e\uff0c\u518d\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { private int rows ; private int cols ; private boolean [][] visited ; int [][] directions = new int [][] {{ - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }, { 1 , 0 }}; public int numIslands ( char [][] grid ) { rows = grid . length ; cols = grid [ 0 ] . length ; visited = new boolean [ rows ][ cols ] ; int ans = 0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ){ if ( visited [ i ][ j ] || grid [ i ][ j ] == '0' ) continue ; visited [ i ][ j ] = true ; dfs ( i , j , grid ); ans ++ ; } } return ans ; } private void dfs ( int x , int y , char [][] grid ) { visited [ x ][ y ] = true ; for ( int [] d : directions ) { int newX = x + d [ 0 ] ; int newY = y + d [ 1 ] ; if ( newX >= 0 && newX < rows && newY >= 0 && newY < cols && ! visited [ newX ][ newY ] && grid [ newX ][ newY ] == '1' ) { dfs ( newX , newY , grid ); } } } } \u5229\u7528\u5e76\u67e5\u96c6\u8fde\u901a\u5206\u91cf\u7684\u7279\u6027\uff0c\u9996\u5148\u53ef\u4ee5\u5c06\u76f8\u90bb\u7684\u5c9b\u5c7f '1' \u90fd\u8fde\u63a5\u8d77\u6765\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u6709\u4f20\u9012\u6027\uff0c\u6240\u4ee5\u53ea\u7528\u5173\u5fc3\u4e24\u4e2a\u65b9\u5411\uff0c\u53f3\u548c\u4e0b\uff0c\u5c06\u53f3\u548c\u4e0b\u4e24\u4e2a\u65b9\u5411\u4e2d\u7684\u5c9b\u5c7f\u8fde\u63a5\u8d77\u6765\u3002\u5982\u679c\u9047\u5230 '0' \u7684\u5143\u7d20\uff0c\u9700\u8981\u8bb0\u5f55\u4e0b\u6765\u6570\u91cf\u3002 \u8fd9\u6837\u6700\u540e\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5c9b\u5c7f\u7684\u6570\u91cf\u5c31\u662f \u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf - '0'\u7684\u6570\u91cf \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class Solution { private int rows ; private int cols ; public int numIslands ( char [][] grid ) { rows = grid . length ; cols = grid [ 0 ] . length ; int zeroes = 0 ; UF uf = new UF ( rows * cols ); int [][] directions = new int [][] {{ 1 , 0 }, { 0 , 1 }}; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ){ if ( grid [ i ][ j ] == '0' ) { zeroes ++ ; } else { for ( int [] d : directions ) { int newR = i + d [ 0 ] ; int newC = j + d [ 1 ] ; if ( newR < rows && newC < cols && grid [ newR ][ newC ] == '1' ) { uf . union ( i * cols + j , newR * cols + newC ); } } } } } return uf . count () - zeroes ; } static class UF { private int [] parent ; private int count ; public UF ( int n ) { parent = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } count = n ; } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) return ; parent [ rootQ ] = rootP ; this . count -- ; } public int find ( int x ) { while ( x != parent [ x ] ) { parent [ x ] = parent [ parent [ x ]] ; x = parent [ x ] ; } return x ; } public int count () { return this . count ; } } }","title":"200. \u5c9b\u5c7f\u6570\u91cf"},{"location":"algo/leetcode/number-of-islands/#description","text":"\u7ed9\u4f60\u4e00\u4e2a\u7531 '1' \uff08\u9646\u5730\uff09\u548c '0' \uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002 \u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002 \u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002 \u8fd9\u91cc\u6709\u4e09\u79cd\u89e3\u6cd5\uff0c\u4e00\u79cd\u662f BFS \uff0c\u4e00\u79cd\u662f DFS \uff0c\u8fd8\u6709\u4e00\u79cd\u5c31\u662f\u5229\u7528\u5e76\u67e5\u96c6\u7684\u7279\u6027\u4e86\u3002","title":"Description"},{"location":"algo/leetcode/number-of-islands/#solution","text":"BFS DFS \u5e76\u67e5\u96c6 BFS \u89e3\u6cd5\u5c31\u662f\u5728\u6bcf\u4e2a\u5750\u6807\u4f18\u5148\u5411\u56db\u4e2a\u65b9\u5411\u6269\u6563\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public int numIslands ( char [][] grid ) { int count = 0 ; for ( int i = 0 ; i < grid . length ; i ++ ) { for ( int j = 0 ; j < grid [ 0 ] . length ; j ++ ) { if ( grid [ i ][ j ] == '1' ){ bfs ( grid , i , j ); count ++ ; } } } return count ; } private void bfs ( char [][] grid , int i , int j ){ Queue < int []> list = new LinkedList <> (); list . add ( new int [] { i , j }); while ( ! list . isEmpty ()){ int [] cur = list . remove (); i = cur [ 0 ] ; j = cur [ 1 ] ; if ( 0 <= i && i < grid . length && 0 <= j && j < grid [ 0 ] . length && grid [ i ][ j ] == '1' ) { grid [ i ][ j ] = '0' ; list . add ( new int [] { i + 1 , j }); list . add ( new int [] { i - 1 , j }); list . add ( new int [] { i , j + 1 }); list . add ( new int [] { i , j - 1 }); } } } } DFS \u4e0e BFS \u4e0d\u540c\u7684\u5c31\u662f\u4e00\u6b21\u5411\u540c\u4e00\u4e2a\u65b9\u5411\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u7ed3\u675f\u540e\uff0c\u518d\u5411\u53e6\u4e00\u4e2a\u65b9\u5411\u904d\u5386\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { private int rows ; private int cols ; private boolean [][] visited ; int [][] directions = new int [][] {{ - 1 , 0 }, { 0 , 1 }, { 0 , - 1 }, { 1 , 0 }}; public int numIslands ( char [][] grid ) { rows = grid . length ; cols = grid [ 0 ] . length ; visited = new boolean [ rows ][ cols ] ; int ans = 0 ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ){ if ( visited [ i ][ j ] || grid [ i ][ j ] == '0' ) continue ; visited [ i ][ j ] = true ; dfs ( i , j , grid ); ans ++ ; } } return ans ; } private void dfs ( int x , int y , char [][] grid ) { visited [ x ][ y ] = true ; for ( int [] d : directions ) { int newX = x + d [ 0 ] ; int newY = y + d [ 1 ] ; if ( newX >= 0 && newX < rows && newY >= 0 && newY < cols && ! visited [ newX ][ newY ] && grid [ newX ][ newY ] == '1' ) { dfs ( newX , newY , grid ); } } } } \u5229\u7528\u5e76\u67e5\u96c6\u8fde\u901a\u5206\u91cf\u7684\u7279\u6027\uff0c\u9996\u5148\u53ef\u4ee5\u5c06\u76f8\u90bb\u7684\u5c9b\u5c7f '1' \u90fd\u8fde\u63a5\u8d77\u6765\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u6709\u4f20\u9012\u6027\uff0c\u6240\u4ee5\u53ea\u7528\u5173\u5fc3\u4e24\u4e2a\u65b9\u5411\uff0c\u53f3\u548c\u4e0b\uff0c\u5c06\u53f3\u548c\u4e0b\u4e24\u4e2a\u65b9\u5411\u4e2d\u7684\u5c9b\u5c7f\u8fde\u63a5\u8d77\u6765\u3002\u5982\u679c\u9047\u5230 '0' \u7684\u5143\u7d20\uff0c\u9700\u8981\u8bb0\u5f55\u4e0b\u6765\u6570\u91cf\u3002 \u8fd9\u6837\u6700\u540e\u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u5c9b\u5c7f\u7684\u6570\u91cf\u5c31\u662f \u8fde\u901a\u5206\u91cf\u7684\u6570\u91cf - '0'\u7684\u6570\u91cf \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 class Solution { private int rows ; private int cols ; public int numIslands ( char [][] grid ) { rows = grid . length ; cols = grid [ 0 ] . length ; int zeroes = 0 ; UF uf = new UF ( rows * cols ); int [][] directions = new int [][] {{ 1 , 0 }, { 0 , 1 }}; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ){ if ( grid [ i ][ j ] == '0' ) { zeroes ++ ; } else { for ( int [] d : directions ) { int newR = i + d [ 0 ] ; int newC = j + d [ 1 ] ; if ( newR < rows && newC < cols && grid [ newR ][ newC ] == '1' ) { uf . union ( i * cols + j , newR * cols + newC ); } } } } } return uf . count () - zeroes ; } static class UF { private int [] parent ; private int count ; public UF ( int n ) { parent = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { parent [ i ] = i ; } count = n ; } public void union ( int p , int q ) { int rootP = find ( p ); int rootQ = find ( q ); if ( rootP == rootQ ) return ; parent [ rootQ ] = rootP ; this . count -- ; } public int find ( int x ) { while ( x != parent [ x ] ) { parent [ x ] = parent [ parent [ x ]] ; x = parent [ x ] ; } return x ; } public int count () { return this . count ; } } }","title":"Solution"},{"location":"algo/leetcode/rotate-image-48/","tags":["Medium","Matrix","Array"],"text":"48. Rotate Image - Medium Description \u00b6 48. Rotate Image You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example 1 : Input : matrix = [[1,2,3],[4,5,6],[7,8,9]] Output : [[7,4,1],[8,5,2],[9,6,3]] \u9898\u76ee\u4e0a\u7684\u56fe\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u5c31\u662f\u8bb2\u4e00\u4e2a\u77e9\u9635\u987a\u65f6\u9488\u65cb\u8f6c90\u5ea6\u3002 Solution \u00b6 \u7ed9\u5927\u5bb6\u770b\u4e00\u4e2a\u56fe\uff0c\u5c31\u80fd\u66f4\u76f4\u89c2\u7684\u611f\u53d7\u5230\u65cb\u8f6c\u65f6\u53d1\u751f\u7684\u53d8\u5316\u4e86\uff1a \u4ee5\u4e0a\u56fe\u4e3e\u4f8b\uff0c\u65cb\u8f6c\u64cd\u4f5c\u7684\u6d41\u7a0b\u5927\u81f4\u4e3a(\u4ee5 (0, 0) \u5750\u6807\u7684\u65cb\u8f6c\u4e3e\u4f8b)\uff1a (0, 0) \u4e0a\u7684\u503c\u53d8\u5230 (0, 2) \uff0c (0, 2) \u4e0a\u7684\u503c\u53d8\u5316\u5230 (2, 2) \uff0c (2, 2) \u4e0a\u7684\u503c\u65cb\u8f6c\u5230 (2, 0) \uff0c\u6700\u540e (2, 0) \u4e0a\u7684\u503c\u65cb\u8f6c\u5230 (0, 0) \u3002 \u5f88\u5bb9\u6613\u5c31\u80fd\u770b\u51fa\u6765\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u6bcf\u4e2a\u5750\u6807\u90fd\u9700\u8981\u65cb\u8f6c\u5230\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\uff0c (i, j) \u9700\u8981\u65cb\u8f6c\u5230\u7684\u5750\u6807\u4e3a (j, n - i - 1) \u3002\u800c\u5728\u4e0b\u4e00\u4e2a\u5750\u6807\u5904\u7ee7\u7eed\u5f80\u5f53\u524d\u5750\u6807\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\u65cb\u8f6c\uff0c\u8fd9\u6837\u5faa\u73af4\u6b21\uff0c\u4e00\u5b9a\u5c31\u4f1a\u628a\u5f53\u524d\u5750\u6807\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\u7684\u503c\u5168\u90e8\u65cb\u8f6c\u5b8c\u3002 \u800c\u6211\u4eec\u53ea\u7528\u5173\u5fc3\u6bcf\u4e00\u884c\u4e2d (start \uff5e end) \u7684\u7d22\u5f15\uff0c\u5176\u4e2d start = [0 ~ n / 2] \u6bcf\u4e00\u884c\u589e\u52a01\uff0c end = [n - 2, start) \uff0c\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u3002 \u4ee3\u7801\u8fd8\u6709\u5f85\u4f18\u5316\u7684\u5730\u65b9\uff0c\u6709\u4e9b\u5faa\u73af\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { int n ; public void rotate ( int [][] matrix ) { n = matrix . length ; int start = 0 , end = n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = start ; j < end - 1 ; j ++ ) { rotate ( matrix , i , j ); } start ++ ; end -- ; } } private void rotate ( int [][] matrix , int i , int j ) { int swap = - 1001 ; for ( int m = 0 ; m < 4 ; m ++ ) { if ( swap == - 1001 ) { swap = matrix [ i ][ j ] ; matrix [ i ][ j ] = matrix [ n - 1 - j ][ i ] ; } else { int tmp = swap ; swap = matrix [ i ][ j ] ; matrix [ i ][ j ] = tmp ; } int tmp = i ; i = j ; j = n - tmp - 1 ; } } }","title":"48. Rotate Image"},{"location":"algo/leetcode/rotate-image-48/#description","text":"48. Rotate Image You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise). You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation. Example 1 : Input : matrix = [[1,2,3],[4,5,6],[7,8,9]] Output : [[7,4,1],[8,5,2],[9,6,3]] \u9898\u76ee\u4e0a\u7684\u56fe\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u5c31\u662f\u8bb2\u4e00\u4e2a\u77e9\u9635\u987a\u65f6\u9488\u65cb\u8f6c90\u5ea6\u3002","title":"Description"},{"location":"algo/leetcode/rotate-image-48/#solution","text":"\u7ed9\u5927\u5bb6\u770b\u4e00\u4e2a\u56fe\uff0c\u5c31\u80fd\u66f4\u76f4\u89c2\u7684\u611f\u53d7\u5230\u65cb\u8f6c\u65f6\u53d1\u751f\u7684\u53d8\u5316\u4e86\uff1a \u4ee5\u4e0a\u56fe\u4e3e\u4f8b\uff0c\u65cb\u8f6c\u64cd\u4f5c\u7684\u6d41\u7a0b\u5927\u81f4\u4e3a(\u4ee5 (0, 0) \u5750\u6807\u7684\u65cb\u8f6c\u4e3e\u4f8b)\uff1a (0, 0) \u4e0a\u7684\u503c\u53d8\u5230 (0, 2) \uff0c (0, 2) \u4e0a\u7684\u503c\u53d8\u5316\u5230 (2, 2) \uff0c (2, 2) \u4e0a\u7684\u503c\u65cb\u8f6c\u5230 (2, 0) \uff0c\u6700\u540e (2, 0) \u4e0a\u7684\u503c\u65cb\u8f6c\u5230 (0, 0) \u3002 \u5f88\u5bb9\u6613\u5c31\u80fd\u770b\u51fa\u6765\u662f\u6709\u89c4\u5f8b\u7684\uff0c\u6bcf\u4e2a\u5750\u6807\u90fd\u9700\u8981\u65cb\u8f6c\u5230\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\uff0c (i, j) \u9700\u8981\u65cb\u8f6c\u5230\u7684\u5750\u6807\u4e3a (j, n - i - 1) \u3002\u800c\u5728\u4e0b\u4e00\u4e2a\u5750\u6807\u5904\u7ee7\u7eed\u5f80\u5f53\u524d\u5750\u6807\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\u65cb\u8f6c\uff0c\u8fd9\u6837\u5faa\u73af4\u6b21\uff0c\u4e00\u5b9a\u5c31\u4f1a\u628a\u5f53\u524d\u5750\u6807\u4ee5\u53ca\u5bf9\u5e94\u7684\u4e0b\u4e00\u4e2a\u5750\u6807\u7684\u503c\u5168\u90e8\u65cb\u8f6c\u5b8c\u3002 \u800c\u6211\u4eec\u53ea\u7528\u5173\u5fc3\u6bcf\u4e00\u884c\u4e2d (start \uff5e end) \u7684\u7d22\u5f15\uff0c\u5176\u4e2d start = [0 ~ n / 2] \u6bcf\u4e00\u884c\u589e\u52a01\uff0c end = [n - 2, start) \uff0c\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u76f4\u63a5\u770b\u4ee3\u7801\u3002 \u4ee3\u7801\u8fd8\u6709\u5f85\u4f18\u5316\u7684\u5730\u65b9\uff0c\u6709\u4e9b\u5faa\u73af\u662f\u6ca1\u6709\u5fc5\u8981\u7684\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { int n ; public void rotate ( int [][] matrix ) { n = matrix . length ; int start = 0 , end = n ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = start ; j < end - 1 ; j ++ ) { rotate ( matrix , i , j ); } start ++ ; end -- ; } } private void rotate ( int [][] matrix , int i , int j ) { int swap = - 1001 ; for ( int m = 0 ; m < 4 ; m ++ ) { if ( swap == - 1001 ) { swap = matrix [ i ][ j ] ; matrix [ i ][ j ] = matrix [ n - 1 - j ][ i ] ; } else { int tmp = swap ; swap = matrix [ i ][ j ] ; matrix [ i ][ j ] = tmp ; } int tmp = i ; i = j ; j = n - tmp - 1 ; } } }","title":"Solution"},{"location":"algo/leetcode/backtrack/17-letter-combination-of-a-phone-number/","tags":["Medium","Bactrack"],"text":"17. Letter Combinations of a Phone Number - Medium Description \u00b6 17. Letter Combinations of a Phone Number Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order . A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. \u8fd9\u9053\u9898\u4e0e 22. Generate Parentheses \u4e00\u6837\u7684\u601d\u8def\u3002 Solution \u00b6 \u6700\u8fd1\u5728\u5b66 Scala\uff0c\u8fd9\u9053\u9898\u53ea\u7528 Scala \u5199\u4e86\u3002Java\u5199\u4e5f\u662f\u4e00\u6837\u7684\u5199\u6cd5\uff0c\u8bed\u6cd5\u4e0d\u901a\u800c\u5df2\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import scala . collection . mutable . ListBuffer object Solution { val mapping = Array ( \"\" , \"\" , \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" ) def letterCombinations ( digits : String ): List [ String ] = { if ( digits . length == 0 ) return List . empty val ans = new ListBuffer [ String ] def backtrack ( n : Int , sb : StringBuilder ): Unit = { if ( sb . length () == digits . length ) { ans += sb . toString () return ; } val digit = digits . charAt ( n ) - '0' for ( c <- mapping ( digit )) { sb . append ( c ) backtrack ( n + 1 , sb ) sb . deleteCharAt ( sb . length () - 1 ) } } backtrack ( 0 , new StringBuilder ) ans . toList } }","title":"17. Letter Combinations of a Phone Number"},{"location":"algo/leetcode/backtrack/17-letter-combination-of-a-phone-number/#description","text":"17. Letter Combinations of a Phone Number Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order . A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters. \u8fd9\u9053\u9898\u4e0e 22. Generate Parentheses \u4e00\u6837\u7684\u601d\u8def\u3002","title":"Description"},{"location":"algo/leetcode/backtrack/17-letter-combination-of-a-phone-number/#solution","text":"\u6700\u8fd1\u5728\u5b66 Scala\uff0c\u8fd9\u9053\u9898\u53ea\u7528 Scala \u5199\u4e86\u3002Java\u5199\u4e5f\u662f\u4e00\u6837\u7684\u5199\u6cd5\uff0c\u8bed\u6cd5\u4e0d\u901a\u800c\u5df2\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import scala . collection . mutable . ListBuffer object Solution { val mapping = Array ( \"\" , \"\" , \"abc\" , \"def\" , \"ghi\" , \"jkl\" , \"mno\" , \"pqrs\" , \"tuv\" , \"wxyz\" ) def letterCombinations ( digits : String ): List [ String ] = { if ( digits . length == 0 ) return List . empty val ans = new ListBuffer [ String ] def backtrack ( n : Int , sb : StringBuilder ): Unit = { if ( sb . length () == digits . length ) { ans += sb . toString () return ; } val digit = digits . charAt ( n ) - '0' for ( c <- mapping ( digit )) { sb . append ( c ) backtrack ( n + 1 , sb ) sb . deleteCharAt ( sb . length () - 1 ) } } backtrack ( 0 , new StringBuilder ) ans . toList } }","title":"Solution"},{"location":"algo/leetcode/backtrack/22-generate-parentheses/","tags":["Medium","Backtrack"],"text":"22. Generate Parentheses - Medium Description \u00b6 22. Generate Parentheses Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. Example 1 : Input: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] \u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u56de\u6eaf\u7c7b\u578b\u7684\u9898\uff0c\u5e94\u7528\u56de\u6eaf\u89e3\u6cd5\u6a21\u7248\u5373\u53ef\u3002 Solution \u00b6 \u56e0\u4e3a\u662f\u8981\u751f\u6210\u6709\u6548\u7684\u62ec\u53f7\uff0c\u6240\u4ee5 ( \u5fc5\u987b\u5728\u7b2c\u4e00\u4e2a\uff0c\u800c\u4e14 ) \u5fc5\u987b\u662f\u8ddf\u5728 ( \u7684\u540e\u9762\uff0c\u8fd9\u6837\u6211\u4eec\u52a0\u4e24\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 Scala \u9700\u8981\u5f15\u5165 scala.collection.mutable.ListBuffer Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { char [] chArr = new char [] { '(' , ')' }; int num ; List < String > ans = new ArrayList <> (); public List < String > generateParenthesis ( int n ) { if ( n == 1 ) return List . of ( \"()\" ); num = n ; backtrack ( 1 , 0 , new StringBuilder ( \"(\" )); return ans ; } private void backtrack ( int left , int right , StringBuilder sb ) { if ( sb . length () == 2 * num ) { ans . add ( sb . toString ()); return ; } for ( char c : chArr ) { if ( c == '(' ) { if ( left < num ) { sb . append ( c ); backtrack ( left + 1 , right , sb ); sb . deleteCharAt ( sb . length () - 1 ); } } else { if ( right < left ) { sb . append ( c ); backtrack ( left , right + 1 , sb ); sb . deleteCharAt ( sb . length () - 1 ); } } } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import scala . collection . mutable . ListBuffer object Solution { def generateParenthesis ( n : Int ): List [ String ] = { val ans = new ListBuffer [ String ] def backtrack ( left : Int , right : Int , str : StringBuilder ): Unit = { if ( str . length == 2 * n ) { ans . addOne ( str . toString ()) return } for ( c <- Array ( '(' , ')' )) { if ( c == '(' ) { if ( left < n ) { str . append ( c ) backtrack ( left + 1 , right , str ) str . deleteCharAt ( str . length () - 1 ) } } else { if ( right < left ) { str . append ( c ) backtrack ( left , right + 1 , str ) str . deleteCharAt ( str . length () - 1 ) } } } } backtrack ( 1 , 0 , new StringBuilder (). append ( \"(\" )) ans . toList } }","title":"22. Generate Parentheses"},{"location":"algo/leetcode/backtrack/22-generate-parentheses/#description","text":"22. Generate Parentheses Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses. Example 1 : Input: n = 3 Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] \u8fd9\u9053\u9898\u5c31\u662f\u4e00\u9053\u5f88\u7ecf\u5178\u7684\u56de\u6eaf\u7c7b\u578b\u7684\u9898\uff0c\u5e94\u7528\u56de\u6eaf\u89e3\u6cd5\u6a21\u7248\u5373\u53ef\u3002","title":"Description"},{"location":"algo/leetcode/backtrack/22-generate-parentheses/#solution","text":"\u56e0\u4e3a\u662f\u8981\u751f\u6210\u6709\u6548\u7684\u62ec\u53f7\uff0c\u6240\u4ee5 ( \u5fc5\u987b\u5728\u7b2c\u4e00\u4e2a\uff0c\u800c\u4e14 ) \u5fc5\u987b\u662f\u8ddf\u5728 ( \u7684\u540e\u9762\uff0c\u8fd9\u6837\u6211\u4eec\u52a0\u4e24\u4e2a\u7b80\u5355\u7684\u5224\u65ad\u5c31\u53ef\u4ee5\u4e86\u3002 Scala \u9700\u8981\u5f15\u5165 scala.collection.mutable.ListBuffer Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 class Solution { char [] chArr = new char [] { '(' , ')' }; int num ; List < String > ans = new ArrayList <> (); public List < String > generateParenthesis ( int n ) { if ( n == 1 ) return List . of ( \"()\" ); num = n ; backtrack ( 1 , 0 , new StringBuilder ( \"(\" )); return ans ; } private void backtrack ( int left , int right , StringBuilder sb ) { if ( sb . length () == 2 * num ) { ans . add ( sb . toString ()); return ; } for ( char c : chArr ) { if ( c == '(' ) { if ( left < num ) { sb . append ( c ); backtrack ( left + 1 , right , sb ); sb . deleteCharAt ( sb . length () - 1 ); } } else { if ( right < left ) { sb . append ( c ); backtrack ( left , right + 1 , sb ); sb . deleteCharAt ( sb . length () - 1 ); } } } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 import scala . collection . mutable . ListBuffer object Solution { def generateParenthesis ( n : Int ): List [ String ] = { val ans = new ListBuffer [ String ] def backtrack ( left : Int , right : Int , str : StringBuilder ): Unit = { if ( str . length == 2 * n ) { ans . addOne ( str . toString ()) return } for ( c <- Array ( '(' , ')' )) { if ( c == '(' ) { if ( left < n ) { str . append ( c ) backtrack ( left + 1 , right , str ) str . deleteCharAt ( str . length () - 1 ) } } else { if ( right < left ) { str . append ( c ) backtrack ( left , right + 1 , str ) str . deleteCharAt ( str . length () - 1 ) } } } } backtrack ( 1 , 0 , new StringBuilder (). append ( \"(\" )) ans . toList } }","title":"Solution"},{"location":"algo/leetcode/binary-search/33-search-in-rotated-sorted-array/","tags":["Medium","Binary Search"],"text":"33. Search in Rotated Sorted Array - Medium Description \u00b6 33. Search in Rotated Sorted Array There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k ( 1 <= k < nums.length ) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] ( 0-indexed ). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2] . Given the array nums after the possible rotation and an integer target , return the index of target if it is in nums , or -1 if it is not in nums . You must write an algorithm with O(log n) runtime complexity. \u9898\u76ee\u7684\u610f\u601d\u5462\u5c31\u662f\u8bf4\u4e00\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u53ef\u80fd\u5728\u67d0\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65cb\u8f6c\u4e86\uff0c\u4f8b\u5982 [0,1,2,4,5,6,7] \u53ef\u80fd\u5728\u7d22\u5f15\u662f3\u7684\u4f4d\u7f6e\u4e0a\u65cb\u8f6c\u6210\u4e86 [4,5,6,7,0,1,2] \uff0c\u7136\u540e\u8ba9\u6211\u4eec\u5728\u8fd9\u6837\u7684\u6570\u7ec4\u4e2d\u5bfb\u627e\u662f\u5426\u542b\u6709 target \u76f8\u7b49\u7684\u5143\u7d20\u3002\u8fd8\u6709\u4e00\u4e2a\u8981\u6c42\u5c31\u662f\u5b9e\u73b0\u590d\u6742\u5ea6\u9700\u8981\u4e3a O(log n) \u3002 Solution \u00b6 \u8fd9\u9053\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u7136\u540e\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(log n) \uff0c\u8fd9\u6837\u9a6c\u4e0a\u5c31\u80fd\u60f3\u51fa\u6765\u662f\u4e0d\u662f\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u6765\u89e3\u9898\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u6bcf\u6b21\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3 target \u5230\u5e95\u662f\u5728\u54ea\u4e00\u8fb9\u3002\u6211\u7ede\u5c3d\u8111\u6c41\u7684\u60f3\u554a\uff0c\u7ec8\u4e8e\u60f3\u51fa\u6765\u4e86\u4e09\u4e2a\u6761\u4ef6\u4e0b\uff0ctarget\u662f\u5728\u5de6\u8fb9\u7684\uff1a target < nums[mid] \u4e14 target >= nums[0] \uff1a nums = [4,5,6,7,0,1,2], target = 5 target < nums[mid] \u4e14 nums[mid] < nums[0] \uff1a nums = [7,8,9,1,2,3,4,5,6], target = 1 nums[mid] < nums[0] \u4e14 nums[0] <= target \uff1a nums = [7,8,9,0,1,2,3,4,5], target = 8 \u53ea\u6709\u4e0a\u8ff0\u4e09\u79cd\u60c5\u51b5\u51fa\u73b0\u65f6\uff0c target \u662f\u5728 mid \u5de6\u8fb9\uff0c\u5176\u4ed6\u60c5\u51b5target\u90fd\u5728 mid \u53f3\u8fb9\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7528\u4e8c\u5206\u67e5\u627e\u7684\u6a21\u7248\u76f4\u63a5\u5199\u51fa\u6765\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int search ( int [] nums , int target ) { int n = nums . length ; int lo = 0 , hi = n - 1 ; while ( lo <= hi ) { int mid = ( lo + hi ) >> 1 ; if ( target == nums [ mid ] ) return mid ; if (( target < nums [ mid ] && target >= nums [ 0 ] ) || ( target < nums [ mid ] && nums [ mid ] < nums [ 0 ] ) || ( nums [ mid ] < nums [ 0 ] && nums [ 0 ] <= target )) { hi = mid - 1 ; } else { lo = mid + 1 ; } } return - 1 ; } }","title":"33. Search in Rotated Sorted Array"},{"location":"algo/leetcode/binary-search/33-search-in-rotated-sorted-array/#description","text":"33. Search in Rotated Sorted Array There is an integer array nums sorted in ascending order (with distinct values). Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k ( 1 <= k < nums.length ) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] ( 0-indexed ). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2] . Given the array nums after the possible rotation and an integer target , return the index of target if it is in nums , or -1 if it is not in nums . You must write an algorithm with O(log n) runtime complexity. \u9898\u76ee\u7684\u610f\u601d\u5462\u5c31\u662f\u8bf4\u4e00\u4e2a\u5df2\u7ecf\u6392\u5e8f\u597d\u7684\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u53ef\u80fd\u5728\u67d0\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u65cb\u8f6c\u4e86\uff0c\u4f8b\u5982 [0,1,2,4,5,6,7] \u53ef\u80fd\u5728\u7d22\u5f15\u662f3\u7684\u4f4d\u7f6e\u4e0a\u65cb\u8f6c\u6210\u4e86 [4,5,6,7,0,1,2] \uff0c\u7136\u540e\u8ba9\u6211\u4eec\u5728\u8fd9\u6837\u7684\u6570\u7ec4\u4e2d\u5bfb\u627e\u662f\u5426\u542b\u6709 target \u76f8\u7b49\u7684\u5143\u7d20\u3002\u8fd8\u6709\u4e00\u4e2a\u8981\u6c42\u5c31\u662f\u5b9e\u73b0\u590d\u6742\u5ea6\u9700\u8981\u4e3a O(log n) \u3002","title":"Description"},{"location":"algo/leetcode/binary-search/33-search-in-rotated-sorted-array/#solution","text":"\u8fd9\u9053\u9898\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6392\u5e8f\u7684\u6570\u7ec4\uff0c\u7136\u540e\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(log n) \uff0c\u8fd9\u6837\u9a6c\u4e0a\u5c31\u80fd\u60f3\u51fa\u6765\u662f\u4e0d\u662f\u53ef\u4ee5\u7528\u4e8c\u5206\u67e5\u627e\u6765\u89e3\u9898\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u6bcf\u6b21\u6211\u4eec\u53ea\u9700\u8981\u5173\u5fc3 target \u5230\u5e95\u662f\u5728\u54ea\u4e00\u8fb9\u3002\u6211\u7ede\u5c3d\u8111\u6c41\u7684\u60f3\u554a\uff0c\u7ec8\u4e8e\u60f3\u51fa\u6765\u4e86\u4e09\u4e2a\u6761\u4ef6\u4e0b\uff0ctarget\u662f\u5728\u5de6\u8fb9\u7684\uff1a target < nums[mid] \u4e14 target >= nums[0] \uff1a nums = [4,5,6,7,0,1,2], target = 5 target < nums[mid] \u4e14 nums[mid] < nums[0] \uff1a nums = [7,8,9,1,2,3,4,5,6], target = 1 nums[mid] < nums[0] \u4e14 nums[0] <= target \uff1a nums = [7,8,9,0,1,2,3,4,5], target = 8 \u53ea\u6709\u4e0a\u8ff0\u4e09\u79cd\u60c5\u51b5\u51fa\u73b0\u65f6\uff0c target \u662f\u5728 mid \u5de6\u8fb9\uff0c\u5176\u4ed6\u60c5\u51b5target\u90fd\u5728 mid \u53f3\u8fb9\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u7528\u4e8c\u5206\u67e5\u627e\u7684\u6a21\u7248\u76f4\u63a5\u5199\u51fa\u6765\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public int search ( int [] nums , int target ) { int n = nums . length ; int lo = 0 , hi = n - 1 ; while ( lo <= hi ) { int mid = ( lo + hi ) >> 1 ; if ( target == nums [ mid ] ) return mid ; if (( target < nums [ mid ] && target >= nums [ 0 ] ) || ( target < nums [ mid ] && nums [ mid ] < nums [ 0 ] ) || ( nums [ mid ] < nums [ 0 ] && nums [ 0 ] <= target )) { hi = mid - 1 ; } else { lo = mid + 1 ; } } return - 1 ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-04/","text":"- Leetcode \u00b6","title":"2022/01/04 - 913. \u732b\u548c\u8001\u9f20"},{"location":"algo/leetcode/daily/2022-01-04/#-leetcode","text":"","title":"- Leetcode"},{"location":"algo/leetcode/daily/2022-01-05/","tags":["Easy","\u5b57\u7b26\u4e32\u6a21\u62df"],"text":"Description \u00b6 1576. \u66ff\u6362\u6240\u6709\u7684\u95ee\u53f7 \u7ed9\u4f60\u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c '?' \u5b57\u7b26\u7684\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u5c06\u6240\u6709\u7684 '?' \u8f6c\u6362\u4e3a\u82e5\u5e72\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f7f\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u4efb\u4f55 \u8fde\u7eed\u91cd\u590d \u7684\u5b57\u7b26\u3002 \u6ce8\u610f\uff1a\u4f60 \u4e0d\u80fd \u4fee\u6539\u975e '?' \u5b57\u7b26\u3002 \u9898\u76ee\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1 \u9664 '?' \u5b57\u7b26 \u4e4b\u5916\uff0c\u4e0d\u5b58\u5728\u8fde\u7eed\u91cd\u590d\u7684\u5b57\u7b26\u3002 \u5728\u5b8c\u6210\u6240\u6709\u8f6c\u6362\uff08\u53ef\u80fd\u65e0\u9700\u8f6c\u6362\uff09\u540e\u8fd4\u56de\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u7ed9\u5b9a\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u7b54\u6848\u603b\u662f\u5b58\u5728\u7684\u3002 Solution \u00b6 \u56e0\u4e3a\u662f\u7b80\u5355\u9898\uff0c\u5c31\u4e0d\u518d\u8fc7\u591a\u8bf4\u660e\u4e86\uff0c\u66ff\u6362\u6bcf\u4e2a '?' \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public String modifyString ( String s ) { char [] charArr = s . toCharArray (); int n = charArr . length ; for ( int i = 0 ; i < n ; i ++ ) { char c = charArr [ i ] ; if ( c == '?' ) { char a = 'a' ; while (( i > 0 && a == charArr [ i - 1 ] ) || ( i < n - 1 && a == charArr [ i + 1 ] )) a ++ ; charArr [ i ] = a ; } } return new String ( charArr ); } }","title":"2021/01/05 - 1576. \u66ff\u6362\u6240\u6709\u7684\u95ee\u53f7"},{"location":"algo/leetcode/daily/2022-01-05/#description","text":"1576. \u66ff\u6362\u6240\u6709\u7684\u95ee\u53f7 \u7ed9\u4f60\u4e00\u4e2a\u4ec5\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u548c '?' \u5b57\u7b26\u7684\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u5c06\u6240\u6709\u7684 '?' \u8f6c\u6362\u4e3a\u82e5\u5e72\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f7f\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u4e0d\u5305\u542b\u4efb\u4f55 \u8fde\u7eed\u91cd\u590d \u7684\u5b57\u7b26\u3002 \u6ce8\u610f\uff1a\u4f60 \u4e0d\u80fd \u4fee\u6539\u975e '?' \u5b57\u7b26\u3002 \u9898\u76ee\u6d4b\u8bd5\u7528\u4f8b\u4fdd\u8bc1 \u9664 '?' \u5b57\u7b26 \u4e4b\u5916\uff0c\u4e0d\u5b58\u5728\u8fde\u7eed\u91cd\u590d\u7684\u5b57\u7b26\u3002 \u5728\u5b8c\u6210\u6240\u6709\u8f6c\u6362\uff08\u53ef\u80fd\u65e0\u9700\u8f6c\u6362\uff09\u540e\u8fd4\u56de\u6700\u7ec8\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u6709\u591a\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u8bf7\u8fd4\u56de\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u7ed9\u5b9a\u7684\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u7b54\u6848\u603b\u662f\u5b58\u5728\u7684\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-05/#solution","text":"\u56e0\u4e3a\u662f\u7b80\u5355\u9898\uff0c\u5c31\u4e0d\u518d\u8fc7\u591a\u8bf4\u660e\u4e86\uff0c\u66ff\u6362\u6bcf\u4e2a '?' \u5c31\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public String modifyString ( String s ) { char [] charArr = s . toCharArray (); int n = charArr . length ; for ( int i = 0 ; i < n ; i ++ ) { char c = charArr [ i ] ; if ( c == '?' ) { char a = 'a' ; while (( i > 0 && a == charArr [ i - 1 ] ) || ( i < n - 1 && a == charArr [ i + 1 ] )) a ++ ; charArr [ i ] = a ; } } return new String ( charArr ); } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-07-en/","tags":["Leetcode","Medium","Random Algorithm","Reservoir Sampling"],"text":"382. Linked List Random Node - Medium \u9898\u76ee\u63cf\u8ff0 \u00b6 382. Linked List Random Node Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen. Implement the Solution class: Solution(ListNode head) Initializes the object with the integer array nums. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be choosen. Constraints: The number of nodes in the linked list will be in the range [1, 10^4] . -10^4 <= Node.val <= 10^4 At most 10^4 calls will be made to getRandom . Solution \u00b6 \u8fd9\u9053\u9898\u63d0\u5230\u4e86\u968f\u673a\u62bd\u53d6\u6bcf\u4e2anode\u6982\u7387\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u5178\u578b\u7684 \u6c34\u5858\u62bd\u6837 \u7684\u6848\u4f8b\u3002 \u4e0d\u8fc7\u6211\u4e0d\u592a\u4f1a\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4f7f\u7528\u4e86\u989d\u5916\u7a7a\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { final Random random = new Random (); final List < Integer > list ; public Solution ( ListNode head ) { list = new ArrayList <> (); while ( head != null ) { list . add ( head . val ); head = head . next ; } } public int getRandom () { return list . get ( random . nextInt ( list . size ())); } }","title":"2022/01/07 - 382. Linked List Random Node"},{"location":"algo/leetcode/daily/2022-01-07-en/#_1","text":"382. Linked List Random Node Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen. Implement the Solution class: Solution(ListNode head) Initializes the object with the integer array nums. int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be choosen. Constraints: The number of nodes in the linked list will be in the range [1, 10^4] . -10^4 <= Node.val <= 10^4 At most 10^4 calls will be made to getRandom .","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"algo/leetcode/daily/2022-01-07-en/#solution","text":"\u8fd9\u9053\u9898\u63d0\u5230\u4e86\u968f\u673a\u62bd\u53d6\u6bcf\u4e2anode\u6982\u7387\u76f8\u540c\uff0c\u8fd9\u5c31\u662f\u5178\u578b\u7684 \u6c34\u5858\u62bd\u6837 \u7684\u6848\u4f8b\u3002 \u4e0d\u8fc7\u6211\u4e0d\u592a\u4f1a\u8fd9\u4e2a\u7b97\u6cd5\uff0c\u4f7f\u7528\u4e86\u989d\u5916\u7a7a\u95f4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u662f O(n) \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { final Random random = new Random (); final List < Integer > list ; public Solution ( ListNode head ) { list = new ArrayList <> (); while ( head != null ) { list . add ( head . val ); head = head . next ; } } public int getRandom () { return list . get ( random . nextInt ( list . size ())); } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-07/","tags":["Leetcode","Easy","Stack","String"],"text":"1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6 - Easy \u4eca\u65e5\u7684\u6bcf\u65e5\u4e00\u9898\u662f\u7b80\u5355\u9898\u76ee\uff0c\u4e3b\u8981\u8003\u5bdf\u5230\u4e86\u6808\u7684\u4f7f\u7528\uff0c\u4e0e 20. \u6709\u6548\u7684\u62ec\u53f7 \u7c7b\u4f3c\u3002 \u9898\u76ee\u63cf\u8ff0 \u00b6 2022/01/07 1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6 \u96be\u5ea6\uff1a\u7b80\u5355 \u7c7b\u578b\uff1a\u5b57\u7b26\u4e32\u6a21\u62df\uff0c\u6808 \u5982\u679c\u5b57\u7b26\u4e32\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u4e4b\u4e00\uff0c\u5219\u53ef\u4ee5\u79f0\u4e4b\u4e3a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \uff08 valid parentheses string \uff0c\u53ef\u4ee5\u7b80\u5199\u4e3a VPS \uff09\uff1a \u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 \"\" \uff0c\u6216\u8005\u662f\u4e00\u4e2a\u4e0d\u4e3a \"(\" \u6216 \")\" \u7684\u5355\u5b57\u7b26\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u4e3a AB \uff08 A \u4e0e B \u5b57\u7b26\u4e32\u8fde\u63a5\uff09\uff0c\u5176\u4e2d A \u548c B \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u4e3a ( A )\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4efb\u4f55\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 S \u7684 \u5d4c\u5957\u6df1\u5ea6 depth(S) \uff1a depth(\"\") = 0 depth(C) = 0 \uff0c\u5176\u4e2d C \u662f\u5355\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e0d\u662f \"(\" \u6216\u8005 \")\" depth(A + B) = max(depth(A), depth(B)) \uff0c\u5176\u4e2d A \u548c B \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 depth(\"(\" + A + \")\") = 1 + depth(A) \uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u4f8b\u5982\uff1a \"\" \u3001 \"()()\" \u3001 \"()(()())\" \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \uff08\u5d4c\u5957\u6df1\u5ea6\u5206\u522b\u4e3a 0\u30011\u30012\uff09\uff0c\u800c \")(\" \u3001 \"(()\" \u90fd\u4e0d\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u7ed9\u4f60\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 s\uff0c\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u7684 s \u5d4c\u5957\u6df1\u5ea6 \u3002 Solutions \u00b6 Java Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int maxDepth ( String s ) { Stack < Character > stack = new Stack <> (); char [] charArr = s . toCharArray (); int max = 0 ; for ( char c : charArr ) { if ( c == '(' ) { stack . push ( c ); } if ( c == ')' ) { if ( ! stack . isEmpty ()) { max = Math . max ( max , stack . size ()); stack . pop (); } } } return max ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func maxDepth ( s string ) int { ans := 0 var q [] rune for _ , ch := range s { if ch == '(' { q = append ( q , '(' ) } else if ch == ')' { n := len ( q ) if ans < n { ans = n } q = q [: n - 1 ] } } return ans }","title":"2022/01/07 - 1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6"},{"location":"algo/leetcode/daily/2022-01-07/#_1","text":"2022/01/07 1614. \u62ec\u53f7\u7684\u6700\u5927\u5d4c\u5957\u6df1\u5ea6 \u96be\u5ea6\uff1a\u7b80\u5355 \u7c7b\u578b\uff1a\u5b57\u7b26\u4e32\u6a21\u62df\uff0c\u6808 \u5982\u679c\u5b57\u7b26\u4e32\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u4e4b\u4e00\uff0c\u5219\u53ef\u4ee5\u79f0\u4e4b\u4e3a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \uff08 valid parentheses string \uff0c\u53ef\u4ee5\u7b80\u5199\u4e3a VPS \uff09\uff1a \u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 \"\" \uff0c\u6216\u8005\u662f\u4e00\u4e2a\u4e0d\u4e3a \"(\" \u6216 \")\" \u7684\u5355\u5b57\u7b26\u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u4e3a AB \uff08 A \u4e0e B \u5b57\u7b26\u4e32\u8fde\u63a5\uff09\uff0c\u5176\u4e2d A \u548c B \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u5b57\u7b26\u4e32\u53ef\u4ee5\u5199\u4e3a ( A )\uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u7c7b\u4f3c\u5730\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4efb\u4f55\u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 S \u7684 \u5d4c\u5957\u6df1\u5ea6 depth(S) \uff1a depth(\"\") = 0 depth(C) = 0 \uff0c\u5176\u4e2d C \u662f\u5355\u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\uff0c\u4e14\u8be5\u5b57\u7b26\u4e0d\u662f \"(\" \u6216\u8005 \")\" depth(A + B) = max(depth(A), depth(B)) \uff0c\u5176\u4e2d A \u548c B \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 depth(\"(\" + A + \")\") = 1 + depth(A) \uff0c\u5176\u4e2d A \u662f\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u4f8b\u5982\uff1a \"\" \u3001 \"()()\" \u3001 \"()(()())\" \u90fd\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \uff08\u5d4c\u5957\u6df1\u5ea6\u5206\u522b\u4e3a 0\u30011\u30012\uff09\uff0c\u800c \")(\" \u3001 \"(()\" \u90fd\u4e0d\u662f \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 \u3002 \u7ed9\u4f60\u4e00\u4e2a \u6709\u6548\u62ec\u53f7\u5b57\u7b26\u4e32 s\uff0c\u8fd4\u56de\u8be5\u5b57\u7b26\u4e32\u7684 s \u5d4c\u5957\u6df1\u5ea6 \u3002","title":"\u9898\u76ee\u63cf\u8ff0"},{"location":"algo/leetcode/daily/2022-01-07/#solutions","text":"Java Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public int maxDepth ( String s ) { Stack < Character > stack = new Stack <> (); char [] charArr = s . toCharArray (); int max = 0 ; for ( char c : charArr ) { if ( c == '(' ) { stack . push ( c ); } if ( c == ')' ) { if ( ! stack . isEmpty ()) { max = Math . max ( max , stack . size ()); stack . pop (); } } } return max ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 func maxDepth ( s string ) int { ans := 0 var q [] rune for _ , ch := range s { if ch == '(' { q = append ( q , '(' ) } else if ch == ')' { n := len ( q ) if ans < n { ans = n } q = q [: n - 1 ] } } return ans }","title":"Solutions"},{"location":"algo/leetcode/daily/2022-01-08/","tags":["Medium","Gray code"],"text":"89. \u683c\u96f7\u7f16\u7801 - Medium \u5927\u5bb6\u53ef\u4ee5\u53c2\u8003 \u7ef4\u57fa\u767e\u79d1 \u6216\u8005 \u767e\u5ea6\u767e\u79d1 \u4e0a\u5bf9\u683c\u96f7\u7801\u7684\u89e3\u91ca\u3002 \u901a\u8fc7\u5bf9\u683c\u96f7\u7801\u7684\u8ba4\u8bc6\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\u6765 n \u6b21\u683c\u96f7\u7801\u662f\u53ef\u4ee5\u4ece n-1 \u6b21\u683c\u96f7\u7801\u63a8\u5bfc\u51fa\u6765\u3002 Description \u00b6 89. \u683c\u96f7\u7f16\u7801 n \u4f4d\u683c\u96f7\u7801\u5e8f\u5217 \u662f\u4e00\u4e2a\u7531 2^n \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\uff1a \u6bcf\u4e2a\u6574\u6570\u90fd\u5728\u8303\u56f4 [0, 2n - 1] \u5185\uff08\u542b 0 \u548c 2n - 1 \uff09 \u7b2c\u4e00\u4e2a\u6574\u6570\u662f 0 \u4e00\u4e2a\u6574\u6570\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0 \u4e0d\u8d85\u8fc7\u4e00\u6b21 \u6bcf\u5bf9 \u76f8\u90bb \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a \u6070\u597d\u4e00\u4f4d\u4e0d\u540c \uff0c\u4e14 \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a \u6070\u597d\u4e00\u4f4d\u4e0d\u540c \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u4efb\u4e00\u6709\u6548\u7684 n\u4f4d\u683c\u96f7\u7801\u5e8f\u5217 \u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public List < Integer > grayCode ( int n ) { List < Integer > res = new ArrayList <> (); res . add ( 0 ); int c = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int len = res . size (); for ( int j = len - 1 ; j >= 0 ; j -- ) { res . add ( c + res . get ( j )); } c <<= 1 ; } return res ; } }","title":"2022/01/08 - 89. \u683c\u96f7\u7f16\u7801"},{"location":"algo/leetcode/daily/2022-01-08/#description","text":"89. \u683c\u96f7\u7f16\u7801 n \u4f4d\u683c\u96f7\u7801\u5e8f\u5217 \u662f\u4e00\u4e2a\u7531 2^n \u4e2a\u6574\u6570\u7ec4\u6210\u7684\u5e8f\u5217\uff0c\u5176\u4e2d\uff1a \u6bcf\u4e2a\u6574\u6570\u90fd\u5728\u8303\u56f4 [0, 2n - 1] \u5185\uff08\u542b 0 \u548c 2n - 1 \uff09 \u7b2c\u4e00\u4e2a\u6574\u6570\u662f 0 \u4e00\u4e2a\u6574\u6570\u5728\u5e8f\u5217\u4e2d\u51fa\u73b0 \u4e0d\u8d85\u8fc7\u4e00\u6b21 \u6bcf\u5bf9 \u76f8\u90bb \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a \u6070\u597d\u4e00\u4f4d\u4e0d\u540c \uff0c\u4e14 \u7b2c\u4e00\u4e2a \u548c \u6700\u540e\u4e00\u4e2a \u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a \u6070\u597d\u4e00\u4f4d\u4e0d\u540c \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u8fd4\u56de\u4efb\u4e00\u6709\u6548\u7684 n\u4f4d\u683c\u96f7\u7801\u5e8f\u5217 \u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-08/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public List < Integer > grayCode ( int n ) { List < Integer > res = new ArrayList <> (); res . add ( 0 ); int c = 1 ; for ( int i = 0 ; i < n ; i ++ ) { int len = res . size (); for ( int j = len - 1 ; j >= 0 ; j -- ) { res . add ( c + res . get ( j )); } c <<= 1 ; } return res ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-09-en/","tags":["Medium"],"text":"1041. Robot Bounded In Circle - Medium Description \u00b6 1041. Robot Bounded In Circle On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions: \"G\" : go straight 1 unit; \"L\" : turn 90 degrees to the left; \"R\" : turn 90 degrees to the right. The robot performs the instructions given in order, and repeats them forever. Return true if and only if there exists a circle in the plane such that the robot never leaves the circle. Solution \u00b6 \u8fd9\u9053\u9898\u4e0d\u96be\u770b\u51fa\u89c4\u5f8b\uff0c\u673a\u5668\u4eba\u4f1a\u4e00\u76f4\u91cd\u590d\u8fd9\u4e9b\u6307\u4ee4\uff0c\u5982\u679c\u4e00\u7ec4\u6307\u4ee4\u7ed3\u675f\u540e\uff0c\u673a\u5668\u4eba\u662f\u671d\u7740\u5317\u9762\u7684\uff0c\u90a3\u4e48\u673a\u5668\u4eba\u5c06\u4f1a \u4e00\u8def\u5411\u5317 \u3002\u563f\u563f... \u5982\u679c\u4e00\u7ec4\u6307\u4ee4\u7ed3\u675f\u540e\uff0c\u673a\u5668\u4eba\u9762\u5411\u7684\u4e0d\u662f\u5317\u9762\uff0c\u90a3\u4e48\u53ef\u4ee5\u80af\u5b9a\uff0c\u5728\u4e24\u6b21\u6216\u8005\u56db\u6b21\u91cd\u590d\u540e\uff0c\u4e00\u5b9a\u4f1a\u56de\u5230\u539f\u59cb\u5750\u6807\uff0c\u5219\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5faa\u73af\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u8868\u65b9\u5411\u7684\u53d8\u91cf\u6570\u7ec4\uff08Python\u548cGo\u4e2d\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362 dx \u548c dy \uff09\uff0c\u7136\u540e\u5728\u5411\u5de6\u6216\u8005\u5411\u53f3\u7684\u6307\u4ee4\u51fa\u73b0\u65f6\uff0c\u6539\u53d8\u673a\u5668\u4eba\u4e0b\u4e00\u6b65\u4f1a\u8d70\u7684\u65b9\u5411\uff0c\u6700\u540e\u5224\u65ad\u4e00\u7ec4\u6307\u4ee4\u8fc7\u540e\uff0c\u673a\u5668\u4eba\u662f\u5426\u56de\u5230\u539f\u70b9\u6216\u8005\u673a\u5668\u4eba\u662f\u5426\u671d\u5411\u5317\u65b9\u6765\u8fd4\u56de true \u6216\u8005 false \u3002 Java Python Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean isRobotBounded ( String instructions ) { int x = 0 , y = 0 , i = 0 ; int [][] direction = new int [][] {{ 0 , 1 },{ 1 , 0 },{ 0 , - 1 },{ - 1 , 0 }}; char [] chArr = instructions . toCharArray (); for ( char c : chArr ) { if ( c == 'L' ) { i = ( i + 3 ) % 4 ; } else if ( c == 'R' ) { i = ( i + 1 ) % 4 ; } else { x += direction [ i ][ 0 ] ; y += direction [ i ][ 1 ] ; } } return x == 0 && y == 0 || i > 0 ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : # {-1, 0} -> R -> {0, 1} dx, dy = dy, -dx # {0, 1} -> R -> {1, 0} dx, dy = dy, -dx # {-1, 0} -> L -> {0, -1} dx, dy = -dy, dx # {0, -1} -> L -> {1, 0} dx, dy = -dy, dx def isRobotBounded ( self , instructions : str ) -> bool : x , y , dx , dy = 0 , 0 , 0 , 1 for c in instructions : if c == 'R' : dx , dy = dy , - dx elif c == 'L' : dx , dy = - dy , dx else : x , y = x + dx , y + dy return x == 0 and y == 0 or dy != 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func isRobotBounded ( instructions string ) bool { x , y := 0 , 0 dx , dy := 0 , 1 for _ , r := range instructions { if r == 'R' { dx , dy = dy , - dx } else if r == 'L' { dx , dy = - dy , dx } else { x , y = x + dx , y + dy } } return x == 0 && y == 0 || dy != 1 }","title":"2022/01/09 - 1041. Robot Bounded In Circle"},{"location":"algo/leetcode/daily/2022-01-09-en/#description","text":"1041. Robot Bounded In Circle On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions: \"G\" : go straight 1 unit; \"L\" : turn 90 degrees to the left; \"R\" : turn 90 degrees to the right. The robot performs the instructions given in order, and repeats them forever. Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.","title":"Description"},{"location":"algo/leetcode/daily/2022-01-09-en/#solution","text":"\u8fd9\u9053\u9898\u4e0d\u96be\u770b\u51fa\u89c4\u5f8b\uff0c\u673a\u5668\u4eba\u4f1a\u4e00\u76f4\u91cd\u590d\u8fd9\u4e9b\u6307\u4ee4\uff0c\u5982\u679c\u4e00\u7ec4\u6307\u4ee4\u7ed3\u675f\u540e\uff0c\u673a\u5668\u4eba\u662f\u671d\u7740\u5317\u9762\u7684\uff0c\u90a3\u4e48\u673a\u5668\u4eba\u5c06\u4f1a \u4e00\u8def\u5411\u5317 \u3002\u563f\u563f... \u5982\u679c\u4e00\u7ec4\u6307\u4ee4\u7ed3\u675f\u540e\uff0c\u673a\u5668\u4eba\u9762\u5411\u7684\u4e0d\u662f\u5317\u9762\uff0c\u90a3\u4e48\u53ef\u4ee5\u80af\u5b9a\uff0c\u5728\u4e24\u6b21\u6216\u8005\u56db\u6b21\u91cd\u590d\u540e\uff0c\u4e00\u5b9a\u4f1a\u56de\u5230\u539f\u59cb\u5750\u6807\uff0c\u5219\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5faa\u73af\u3002 \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4ee3\u8868\u65b9\u5411\u7684\u53d8\u91cf\u6570\u7ec4\uff08Python\u548cGo\u4e2d\u53ef\u4ee5\u76f4\u63a5\u66ff\u6362 dx \u548c dy \uff09\uff0c\u7136\u540e\u5728\u5411\u5de6\u6216\u8005\u5411\u53f3\u7684\u6307\u4ee4\u51fa\u73b0\u65f6\uff0c\u6539\u53d8\u673a\u5668\u4eba\u4e0b\u4e00\u6b65\u4f1a\u8d70\u7684\u65b9\u5411\uff0c\u6700\u540e\u5224\u65ad\u4e00\u7ec4\u6307\u4ee4\u8fc7\u540e\uff0c\u673a\u5668\u4eba\u662f\u5426\u56de\u5230\u539f\u70b9\u6216\u8005\u673a\u5668\u4eba\u662f\u5426\u671d\u5411\u5317\u65b9\u6765\u8fd4\u56de true \u6216\u8005 false \u3002 Java Python Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public boolean isRobotBounded ( String instructions ) { int x = 0 , y = 0 , i = 0 ; int [][] direction = new int [][] {{ 0 , 1 },{ 1 , 0 },{ 0 , - 1 },{ - 1 , 0 }}; char [] chArr = instructions . toCharArray (); for ( char c : chArr ) { if ( c == 'L' ) { i = ( i + 3 ) % 4 ; } else if ( c == 'R' ) { i = ( i + 1 ) % 4 ; } else { x += direction [ i ][ 0 ] ; y += direction [ i ][ 1 ] ; } } return x == 0 && y == 0 || i > 0 ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 class Solution : # {-1, 0} -> R -> {0, 1} dx, dy = dy, -dx # {0, 1} -> R -> {1, 0} dx, dy = dy, -dx # {-1, 0} -> L -> {0, -1} dx, dy = -dy, dx # {0, -1} -> L -> {1, 0} dx, dy = -dy, dx def isRobotBounded ( self , instructions : str ) -> bool : x , y , dx , dy = 0 , 0 , 0 , 1 for c in instructions : if c == 'R' : dx , dy = dy , - dx elif c == 'L' : dx , dy = - dy , dx else : x , y = x + dx , y + dy return x == 0 and y == 0 or dy != 1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 func isRobotBounded ( instructions string ) bool { x , y := 0 , 0 dx , dy := 0 , 1 for _ , r := range instructions { if r == 'R' { dx , dy = dy , - dx } else if r == 'L' { dx , dy = - dy , dx } else { x , y = x + dx , y + dy } } return x == 0 && y == 0 || dy != 1 }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-09/","tags":["Easy"],"text":"1629. \u6309\u952e\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u952e - Easy \u4eca\u5929\u7684\u9898\u662f\u4e00\u9053\u7b80\u5355\u9898\uff0c\u6a21\u62df\u6309\u952e\u65f6\u95f4\uff0c\u5f88\u7b80\u5355\u3002 Description \u00b6 1629. \u6309\u952e\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u952e LeetCode \u8bbe\u8ba1\u4e86\u4e00\u6b3e\u65b0\u5f0f\u952e\u76d8\uff0c\u6b63\u5728\u6d4b\u8bd5\u5176\u53ef\u7528\u6027\u3002\u6d4b\u8bd5\u4eba\u5458\u5c06\u4f1a\u70b9\u51fb\u4e00\u7cfb\u5217\u952e\uff08\u603b\u8ba1 n \u4e2a\uff09\uff0c\u6bcf\u6b21\u4e00\u4e2a\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32 keysPressed \uff0c\u5176\u4e2d keysPressed[i] \u8868\u793a\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7b2c i \u4e2a\u88ab\u6309\u4e0b\u7684\u952e\u3002 releaseTimes \u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u5217\u8868\uff0c\u5176\u4e2d releaseTimes[i] \u8868\u793a\u677e\u5f00\u7b2c i \u4e2a\u952e\u7684\u65f6\u95f4\u3002\u5b57\u7b26\u4e32\u548c\u6570\u7ec4\u7684 \u4e0b\u6807\u90fd\u4ece 0 \u5f00\u59cb \u3002\u7b2c 0 \u4e2a\u952e\u5728\u65f6\u95f4\u4e3a 0 \u65f6\u88ab\u6309\u4e0b\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e2a\u952e\u90fd \u6070\u597d \u5728\u524d\u4e00\u4e2a\u952e\u677e\u5f00\u65f6\u88ab\u6309\u4e0b\u3002 \u6d4b\u8bd5\u4eba\u5458\u60f3\u8981\u627e\u51fa\u6309\u952e \u6301\u7eed\u65f6\u95f4\u6700\u957f \u7684\u952e\u3002\u7b2c i \u6b21\u6309\u952e\u7684\u6301\u7eed\u65f6\u95f4\u4e3a releaseTimes[i] - releaseTimes[i - 1] \uff0c\u7b2c 0 \u6b21\u6309\u952e\u7684\u6301\u7eed\u65f6\u95f4\u4e3a releaseTimes[0] \u3002 \u6ce8\u610f\uff0c\u6d4b\u8bd5\u671f\u95f4\uff0c\u540c\u4e00\u4e2a\u952e\u53ef\u4ee5\u5728\u4e0d\u540c\u65f6\u523b\u88ab\u591a\u6b21\u6309\u4e0b\uff0c\u800c\u6bcf\u6b21\u7684\u6301\u7eed\u65f6\u95f4\u90fd\u53ef\u80fd\u4e0d\u540c\u3002 \u8bf7\u8fd4\u56de\u6309\u952e \u6301\u7eed\u65f6\u95f4\u6700\u957f \u7684\u952e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u952e\uff0c\u5219\u8fd4\u56de \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u6700\u5927 \u7684\u90a3\u4e2a\u952e\u3002 Solution \u00b6 Java 1 - PriorityQueue Java 2 - \u7b80\u5355\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public char slowestKey ( int [] releaseTimes , String keysPressed ) { PriorityQueue < Helper > q = new PriorityQueue <> (( h1 , h2 ) -> h2 . releaseTime - h1 . releaseTime == 0 ? h2 . ch - h1 . ch : h2 . releaseTime - h1 . releaseTime ); int n = releaseTimes . length ; assert n > 0 ; for ( int i = 0 ; i < n ; i ++ ) { q . add ( new Helper ( keysPressed . charAt ( i ), i > 0 ? releaseTimes [ i ] - releaseTimes [ i - 1 ] : releaseTimes [ i ] )); } return q . poll (). ch ; } static class Helper { char ch ; int releaseTime ; public Helper ( char ch , int releaseTime ) { this . ch = ch ; this . releaseTime = releaseTime ; } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public char slowestKey ( int [] releaseTimes , String keysPressed ) { int idx = 0 , max = releaseTimes [ 0 ] ; int n = releaseTimes . length ; for ( int i = 1 ; i < n ; i ++ ) { int rt = releaseTimes [ i ] - releaseTimes [ i - 1 ] ; char c = keysPressed . charAt ( i ); if ( rt > max ) { idx = i ; max = rt ; } else if ( rt == max && c > keysPressed . charAt ( idx )) { idx = i ; } } return keysPressed . charAt ( idx ); } }","title":"2022/01/09 - 1629. \u6309\u952e\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u952e"},{"location":"algo/leetcode/daily/2022-01-09/#description","text":"1629. \u6309\u952e\u6301\u7eed\u65f6\u95f4\u6700\u957f\u7684\u952e LeetCode \u8bbe\u8ba1\u4e86\u4e00\u6b3e\u65b0\u5f0f\u952e\u76d8\uff0c\u6b63\u5728\u6d4b\u8bd5\u5176\u53ef\u7528\u6027\u3002\u6d4b\u8bd5\u4eba\u5458\u5c06\u4f1a\u70b9\u51fb\u4e00\u7cfb\u5217\u952e\uff08\u603b\u8ba1 n \u4e2a\uff09\uff0c\u6bcf\u6b21\u4e00\u4e2a\u3002 \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u5b57\u7b26\u4e32 keysPressed \uff0c\u5176\u4e2d keysPressed[i] \u8868\u793a\u6d4b\u8bd5\u5e8f\u5217\u4e2d\u7b2c i \u4e2a\u88ab\u6309\u4e0b\u7684\u952e\u3002 releaseTimes \u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u5217\u8868\uff0c\u5176\u4e2d releaseTimes[i] \u8868\u793a\u677e\u5f00\u7b2c i \u4e2a\u952e\u7684\u65f6\u95f4\u3002\u5b57\u7b26\u4e32\u548c\u6570\u7ec4\u7684 \u4e0b\u6807\u90fd\u4ece 0 \u5f00\u59cb \u3002\u7b2c 0 \u4e2a\u952e\u5728\u65f6\u95f4\u4e3a 0 \u65f6\u88ab\u6309\u4e0b\uff0c\u63a5\u4e0b\u6765\u6bcf\u4e2a\u952e\u90fd \u6070\u597d \u5728\u524d\u4e00\u4e2a\u952e\u677e\u5f00\u65f6\u88ab\u6309\u4e0b\u3002 \u6d4b\u8bd5\u4eba\u5458\u60f3\u8981\u627e\u51fa\u6309\u952e \u6301\u7eed\u65f6\u95f4\u6700\u957f \u7684\u952e\u3002\u7b2c i \u6b21\u6309\u952e\u7684\u6301\u7eed\u65f6\u95f4\u4e3a releaseTimes[i] - releaseTimes[i - 1] \uff0c\u7b2c 0 \u6b21\u6309\u952e\u7684\u6301\u7eed\u65f6\u95f4\u4e3a releaseTimes[0] \u3002 \u6ce8\u610f\uff0c\u6d4b\u8bd5\u671f\u95f4\uff0c\u540c\u4e00\u4e2a\u952e\u53ef\u4ee5\u5728\u4e0d\u540c\u65f6\u523b\u88ab\u591a\u6b21\u6309\u4e0b\uff0c\u800c\u6bcf\u6b21\u7684\u6301\u7eed\u65f6\u95f4\u90fd\u53ef\u80fd\u4e0d\u540c\u3002 \u8bf7\u8fd4\u56de\u6309\u952e \u6301\u7eed\u65f6\u95f4\u6700\u957f \u7684\u952e\uff0c\u5982\u679c\u6709\u591a\u4e2a\u8fd9\u6837\u7684\u952e\uff0c\u5219\u8fd4\u56de \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5217\u6700\u5927 \u7684\u90a3\u4e2a\u952e\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-09/#solution","text":"Java 1 - PriorityQueue Java 2 - \u7b80\u5355\u6570\u7ec4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public char slowestKey ( int [] releaseTimes , String keysPressed ) { PriorityQueue < Helper > q = new PriorityQueue <> (( h1 , h2 ) -> h2 . releaseTime - h1 . releaseTime == 0 ? h2 . ch - h1 . ch : h2 . releaseTime - h1 . releaseTime ); int n = releaseTimes . length ; assert n > 0 ; for ( int i = 0 ; i < n ; i ++ ) { q . add ( new Helper ( keysPressed . charAt ( i ), i > 0 ? releaseTimes [ i ] - releaseTimes [ i - 1 ] : releaseTimes [ i ] )); } return q . poll (). ch ; } static class Helper { char ch ; int releaseTime ; public Helper ( char ch , int releaseTime ) { this . ch = ch ; this . releaseTime = releaseTime ; } } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public char slowestKey ( int [] releaseTimes , String keysPressed ) { int idx = 0 , max = releaseTimes [ 0 ] ; int n = releaseTimes . length ; for ( int i = 1 ; i < n ; i ++ ) { int rt = releaseTimes [ i ] - releaseTimes [ i - 1 ] ; char c = keysPressed . charAt ( i ); if ( rt > max ) { idx = i ; max = rt ; } else if ( rt == max && c > keysPressed . charAt ( idx )) { idx = i ; } } return keysPressed . charAt ( idx ); } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-10/","tags":["Medium"],"text":"306. \u7d2f\u52a0\u6570 - Medium Description \u00b6 306. \u7d2f\u52a0\u6570 \u7d2f\u52a0\u6570 \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ec4\u6210\u5b83\u7684\u6570\u5b57\u53ef\u4ee5\u5f62\u6210\u7d2f\u52a0\u5e8f\u5217\u3002 \u4e00\u4e2a\u6709\u6548\u7684 \u7d2f\u52a0\u5e8f\u5217 \u5fc5\u987b \u81f3\u5c11 \u5305\u542b 3 \u4e2a\u6570\u3002\u9664\u4e86\u6700\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u6570\u90fd\u7b49\u4e8e\u5b83\u4e4b\u524d\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57 '0'-'9' \u7684\u5b57\u7b26\u4e32\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u7ed9\u5b9a\u8f93\u5165\u662f\u5426\u662f \u7d2f\u52a0\u6570 \u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u8bf4\u660e\uff1a \u7d2f\u52a0\u5e8f\u5217\u91cc\u7684\u6570 \u4e0d\u4f1a \u4ee5 0 \u5f00\u5934\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0 1, 2, 03 \u6216\u8005 1, 02, 3 \u7684\u60c5\u51b5\u3002 \u63d0\u793a\uff1a 1 <= num.length <= 35 num \u4ec5\u7531\u6570\u5b57\uff08 0 - 9 \uff09\u7ec4\u6210 \u56e0\u4e3a\u9898\u76ee\u9650\u5236\u4e86 num \u7684\u957f\u5ea6\u6700\u957f\u4e3a35\uff0c\u6240\u4ee5\u505a\u52a0\u6cd5\u7684\u65f6\u5019\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u6765\u8ba1\u7b97\u3002 \u5f15\u81ea OI-WIKI \u4e2d\u5bf9\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7684\u89e3\u91ca\uff1a \u9ad8\u7cbe\u5ea6\u8ba1\u7b97 \u5728\u5e73\u5e38\u7684\u5b9e\u73b0\u4e2d\uff0c\u9ad8\u7cbe\u5ea6\u6570\u5b57\u5229\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u6570\u5b57\u7684\u4e00\u4e2a\u5341\u8fdb\u5236\u4f4d\u3002\u56e0\u6b64\u53ef\u4ee5\u8bf4\uff0c\u9ad8\u7cbe\u5ea6\u6570\u503c\u8ba1\u7b97\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7279\u522b\u7684\u5b57\u7b26\u4e32\u5904\u7406\u3002 \u8bfb\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u6570\u5b57\u6700\u9ad8\u4f4d\u5728\u5b57\u7b26\u4e32\u9996\uff08\u4e0b\u6807\u5c0f\u7684\u4f4d\u7f6e\uff09\u3002\u4f46\u662f\u4e60\u60ef\u4e0a\uff0c\u4e0b\u6807\u6700\u5c0f\u7684\u4f4d\u7f6e\u5b58\u653e\u7684\u662f\u6570\u5b57\u7684 \u6700\u4f4e\u4f4d \uff0c\u5373\u5b58\u50a8\u53cd\u8f6c\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u6570\u5b57\u7684\u957f\u5ea6\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u540c\u6837\u6743\u503c\u4f4d\u59cb\u7ec8\u4fdd\u6301\u5bf9\u9f50\uff08\u4f8b\u5982\uff0c\u5e0c\u671b\u6240\u6709\u7684\u4e2a\u4f4d\u90fd\u5728\u4e0b\u6807 [0] \uff0c\u6240\u6709\u7684\u5341\u4f4d\u90fd\u5728\u4e0b\u6807 [1] \u2026\u2026\uff09\uff1b\u540c\u65f6\uff0c\u52a0\u3001\u51cf\u3001\u4e58\u7684\u8fd0\u7b97\u4e00\u822c\u90fd\u4ece\u4e2a\u4f4d\u5f00\u59cb\u8fdb\u884c\uff08\u56de\u60f3\u5c0f\u5b66\u7684\u7ad6\u5f0f\u8fd0\u7b97\uff5e\uff09\uff0c\u8fd9\u90fd\u7ed9\u4e86\u300c\u53cd\u8f6c\u5b58\u50a8\u300d\u4ee5\u5145\u5206\u7684\u7406\u7531\u3002 Wikipedia: https://zh.wikipedia.org/wiki/\u9ad8\u7cbe\u5ea6\u8ba1\u7b97 Solution \u00b6 Java DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution { List < List < Integer >> list = new ArrayList <> (); String num ; public boolean isAdditiveNumber ( String n ) { int len = n . length (); num = n ; return dfs ( 0 , len ); } private boolean dfs ( int u , int len ) { int n = list . size (); if ( u == len ) return n >= 3 ; List < Integer > cur = new ArrayList <> (); int max = num . charAt ( u ) == '0' ? u + 1 : len ; for ( int i = u ; i < max ; i ++ ) { cur . add ( 0 , num . charAt ( i ) - '0' ); if ( n < 2 || check ( list . get ( n - 2 ), list . get ( n - 1 ), cur )) { list . add ( cur ); if ( dfs ( i + 1 , len )) return true ; list . remove ( list . size () - 1 ); } } return false ; } // \u4f7f\u7528List\u6765\u505a\u9ad8\u7cbe\u5ea6\u52a0\u6cd5 private boolean check ( List < Integer > a , List < Integer > b , List < Integer > c ) { List < Integer > ans = new ArrayList <> (); int sum = 0 ; for ( int i = 0 ; i < a . size () || i < b . size (); i ++ ) { if ( i < a . size ()) sum += a . get ( i ); if ( i < b . size ()) sum += b . get ( i ); ans . add ( sum % 10 ); sum /= 10 ; } if ( sum > 0 ) ans . add ( sum ); boolean ok = ans . size () == c . size (); for ( int i = 0 ; i < c . size () && ok ; i ++ ) { if ( ans . get ( i ) != c . get ( i )) ok = false ; } return ok ; } }","title":"2022/01/10 - 306. \u7d2f\u52a0\u6570"},{"location":"algo/leetcode/daily/2022-01-10/#description","text":"306. \u7d2f\u52a0\u6570 \u7d2f\u52a0\u6570 \u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u7ec4\u6210\u5b83\u7684\u6570\u5b57\u53ef\u4ee5\u5f62\u6210\u7d2f\u52a0\u5e8f\u5217\u3002 \u4e00\u4e2a\u6709\u6548\u7684 \u7d2f\u52a0\u5e8f\u5217 \u5fc5\u987b \u81f3\u5c11 \u5305\u542b 3 \u4e2a\u6570\u3002\u9664\u4e86\u6700\u5f00\u59cb\u7684\u4e24\u4e2a\u6570\u4ee5\u5916\uff0c\u5b57\u7b26\u4e32\u4e2d\u7684\u5176\u4ed6\u6570\u90fd\u7b49\u4e8e\u5b83\u4e4b\u524d\u4e24\u4e2a\u6570\u76f8\u52a0\u7684\u548c\u3002 \u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57 '0'-'9' \u7684\u5b57\u7b26\u4e32\uff0c\u7f16\u5199\u4e00\u4e2a\u7b97\u6cd5\u6765\u5224\u65ad\u7ed9\u5b9a\u8f93\u5165\u662f\u5426\u662f \u7d2f\u52a0\u6570 \u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u8bf4\u660e\uff1a \u7d2f\u52a0\u5e8f\u5217\u91cc\u7684\u6570 \u4e0d\u4f1a \u4ee5 0 \u5f00\u5934\uff0c\u6240\u4ee5\u4e0d\u4f1a\u51fa\u73b0 1, 2, 03 \u6216\u8005 1, 02, 3 \u7684\u60c5\u51b5\u3002 \u63d0\u793a\uff1a 1 <= num.length <= 35 num \u4ec5\u7531\u6570\u5b57\uff08 0 - 9 \uff09\u7ec4\u6210 \u56e0\u4e3a\u9898\u76ee\u9650\u5236\u4e86 num \u7684\u957f\u5ea6\u6700\u957f\u4e3a35\uff0c\u6240\u4ee5\u505a\u52a0\u6cd5\u7684\u65f6\u5019\u5f88\u53ef\u80fd\u4f1a\u51fa\u73b0\u6ea2\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5f15\u5165\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u6765\u8ba1\u7b97\u3002 \u5f15\u81ea OI-WIKI \u4e2d\u5bf9\u9ad8\u7cbe\u5ea6\u8ba1\u7b97\u7684\u89e3\u91ca\uff1a \u9ad8\u7cbe\u5ea6\u8ba1\u7b97 \u5728\u5e73\u5e38\u7684\u5b9e\u73b0\u4e2d\uff0c\u9ad8\u7cbe\u5ea6\u6570\u5b57\u5229\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u6570\u5b57\u7684\u4e00\u4e2a\u5341\u8fdb\u5236\u4f4d\u3002\u56e0\u6b64\u53ef\u4ee5\u8bf4\uff0c\u9ad8\u7cbe\u5ea6\u6570\u503c\u8ba1\u7b97\u5b9e\u9645\u4e0a\u662f\u4e00\u79cd\u7279\u522b\u7684\u5b57\u7b26\u4e32\u5904\u7406\u3002 \u8bfb\u5165\u5b57\u7b26\u4e32\u65f6\uff0c\u6570\u5b57\u6700\u9ad8\u4f4d\u5728\u5b57\u7b26\u4e32\u9996\uff08\u4e0b\u6807\u5c0f\u7684\u4f4d\u7f6e\uff09\u3002\u4f46\u662f\u4e60\u60ef\u4e0a\uff0c\u4e0b\u6807\u6700\u5c0f\u7684\u4f4d\u7f6e\u5b58\u653e\u7684\u662f\u6570\u5b57\u7684 \u6700\u4f4e\u4f4d \uff0c\u5373\u5b58\u50a8\u53cd\u8f6c\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u4e48\u505a\u7684\u539f\u56e0\u5728\u4e8e\uff0c\u6570\u5b57\u7684\u957f\u5ea6\u53ef\u80fd\u53d1\u751f\u53d8\u5316\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u540c\u6837\u6743\u503c\u4f4d\u59cb\u7ec8\u4fdd\u6301\u5bf9\u9f50\uff08\u4f8b\u5982\uff0c\u5e0c\u671b\u6240\u6709\u7684\u4e2a\u4f4d\u90fd\u5728\u4e0b\u6807 [0] \uff0c\u6240\u6709\u7684\u5341\u4f4d\u90fd\u5728\u4e0b\u6807 [1] \u2026\u2026\uff09\uff1b\u540c\u65f6\uff0c\u52a0\u3001\u51cf\u3001\u4e58\u7684\u8fd0\u7b97\u4e00\u822c\u90fd\u4ece\u4e2a\u4f4d\u5f00\u59cb\u8fdb\u884c\uff08\u56de\u60f3\u5c0f\u5b66\u7684\u7ad6\u5f0f\u8fd0\u7b97\uff5e\uff09\uff0c\u8fd9\u90fd\u7ed9\u4e86\u300c\u53cd\u8f6c\u5b58\u50a8\u300d\u4ee5\u5145\u5206\u7684\u7406\u7531\u3002 Wikipedia: https://zh.wikipedia.org/wiki/\u9ad8\u7cbe\u5ea6\u8ba1\u7b97","title":"Description"},{"location":"algo/leetcode/daily/2022-01-10/#solution","text":"Java DFS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 class Solution { List < List < Integer >> list = new ArrayList <> (); String num ; public boolean isAdditiveNumber ( String n ) { int len = n . length (); num = n ; return dfs ( 0 , len ); } private boolean dfs ( int u , int len ) { int n = list . size (); if ( u == len ) return n >= 3 ; List < Integer > cur = new ArrayList <> (); int max = num . charAt ( u ) == '0' ? u + 1 : len ; for ( int i = u ; i < max ; i ++ ) { cur . add ( 0 , num . charAt ( i ) - '0' ); if ( n < 2 || check ( list . get ( n - 2 ), list . get ( n - 1 ), cur )) { list . add ( cur ); if ( dfs ( i + 1 , len )) return true ; list . remove ( list . size () - 1 ); } } return false ; } // \u4f7f\u7528List\u6765\u505a\u9ad8\u7cbe\u5ea6\u52a0\u6cd5 private boolean check ( List < Integer > a , List < Integer > b , List < Integer > c ) { List < Integer > ans = new ArrayList <> (); int sum = 0 ; for ( int i = 0 ; i < a . size () || i < b . size (); i ++ ) { if ( i < a . size ()) sum += a . get ( i ); if ( i < b . size ()) sum += b . get ( i ); ans . add ( sum % 10 ); sum /= 10 ; } if ( sum > 0 ) ans . add ( sum ); boolean ok = ans . size () == c . size (); for ( int i = 0 ; i < c . size () && ok ; i ++ ) { if ( ans . get ( i ) != c . get ( i )) ok = false ; } return ok ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-11/","tags":["Hard","DFS","BFS"],"text":"1036. \u9003\u79bb\u5927\u8ff7\u5bab - Hard Description \u00b6 1036. \u9003\u79bb\u5927\u8ff7\u5bab \u5728\u4e00\u4e2a 10^6 x 10^6 \u7684\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u683c\u4e0a\u65b9\u683c\u7684\u5750\u6807\u4e3a (x, y) \u3002 \u73b0\u5728\u4ece\u6e90\u65b9\u683c source = [sx, sy] \u5f00\u59cb\u51fa\u53d1\uff0c\u610f\u56fe\u8d76\u5f80\u76ee\u6807\u65b9\u683c target = [tx, ty] \u3002\u6570\u7ec4 blocked \u662f\u5c01\u9501\u7684\u65b9\u683c\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a blocked[i] = [xi, yi] \u8868\u793a\u5750\u6807\u4e3a (xi, yi) \u7684\u65b9\u683c\u662f\u7981\u6b62\u901a\u884c\u7684\u3002 \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u53ef\u4ee5\u8d70\u5230\u7f51\u683c\u4e2d\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u65b9\u683c\uff0c\u53ea\u8981\u8be5\u65b9\u683c \u4e0d \u5728\u7ed9\u51fa\u7684\u5c01\u9501\u5217\u8868 blocked \u4e0a\u3002\u540c\u65f6\uff0c\u4e0d\u5141\u8bb8\u8d70\u51fa\u7f51\u683c\u3002 \u53ea\u6709\u5728\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79fb\u52a8\u4ece\u6e90\u65b9\u683c source \u5230\u8fbe\u76ee\u6807\u65b9\u683c target \u65f6\u624d\u8fd4\u56de true \u3002\u5426\u5219\uff0c\u8fd4\u56de false \u3002 Solutions \u00b6 \u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6211\u9996\u5148\u5c31\u60f3\u5230\u4e86\u8def\u5f84\u641c\u7d22\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u6240\u4ee5 DFS \u548c BFS \u4e24\u79cd\u65b9\u6cd5\u9996\u5148\u51fa\u73b0\u5728\u4e86\u6211\u7684\u8111\u5b50\u91cc\u3002\u8fd9\u91cc\u6211\u5c31\u8bf4\u660e\u4e00\u4e0bDFS\uff0cBFS\u7684\u601d\u8def\u548cDFS\u5dee\u4e0d\u591a\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u53d8\u5316\u3002 \u5982\u679c\u60f3\u770b BFS \u7684\u89e3\u6cd5\uff0c\u8bf7\u770b\u4e09\u53f6\u59d0\u7684\u9898\u89e3\uff1a \u3010\u5bab\u6c34\u4e09\u53f6\u3011BFS + \u7ed9\u5b9a\u969c\u788d\u7269\u6240\u80fd\u56f4\u6210\u7684\u6700\u5927\u9762\u79ef DFS\u89e3\u6cd5 \u53cc\u5411DFS\u89e3\u6cd5AC TLE\uff0c\u56e0\u4e3a\u5750\u6807\u7cfb\u8303\u56f4\u592a\u5927\u4e86\u5982\u679c\u7528DFS\u7684\u8bdd\uff0c\u975e\u5e38\u8d39\u65f6\u95f4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { Set < String > set = new HashSet <> (); int maxX = 1000000 ; int maxY = 1000000 ; int [][] directions = new int [][] { { 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 } }; public boolean isEscapePossible ( int [][] blocked , int [] source , int [] target ) { int n = blocked . length ; if ( n == 0 ) return true ; for ( int [] b : blocked ) { set . add ( \"[\" + b [ 0 ] + \",\" + b [ 1 ] + \"]\" ); } return dfs ( source , target ); } private boolean dfs ( int [] source , int [] target ) { if ( source [ 0 ] == target [ 0 ] && source [ 1 ] == target [ 1 ] ) return true ; set . add ( \"[\" + source [ 0 ] + \",\" + source [ 1 ] + \"]\" ); for ( int [] d : directions ) { int newX = source [ 0 ] + d [ 0 ] ; int newY = source [ 1 ] + d [ 1 ] ; if ( newX >= 0 && newX <= maxX && newY >= 0 && newY <= maxY && ! set . contains ( newX + newY )) { if ( dfs ( new int [] { newX , newY }, target )) return true ; } } return false ; } } \u65e2\u7136\u4e0a\u9762\u7684 DFS \u89e3\u6cd5\u4f1a TLE \uff0c\u90a3\u4e48\u5c31\u60f3\u600e\u4e48\u624d\u80fd\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u65f6\u6211\u5c31\u53ea\u80fd\u770b\u770b\u9898\u89e3\u4e86\u3002 \u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\uff0c blocked \u7684\u957f\u5ea6\u662f\u6709\u9650\u7684\uff0c\u90a3\u4e48\u5047\u8bbe blocked \u7684\u957f\u5ea6\u662f len \uff0c\u90a3\u4e48\u5b83\u80fd\u56f4\u6210\u7684\u6700\u5927\u8303\u56f4\u5c31\u662f len * len \uff0c\u90a3\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u6b65\u6570\u6765\u5224\u65ad source \u6216\u8005 target \u6709\u6ca1\u6709\u88ab\u56f4\u4f4f\u4e86\uff0c\u5047\u8bbe\u6b65\u6570\u4e3astep\uff0c\u90a3\u4e48\u5f53 step > len * len \u65f6\uff0c\u5c31\u8bf4\u660e\u662f\u6ca1\u6709\u88ab\u56f4\u4f4f\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de true \u4e86\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u5224\u65ad source \u548c target \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { Set < Integer > blo = new HashSet <> (); Set < Integer > vis = new HashSet <> (); int EDGE = ( int ) 1e6 ; int BASE = 131 ; int limit = 0 ; int [][] directions = new int [][] { { 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 } }; public boolean isEscapePossible ( int [][] blocked , int [] source , int [] target ) { int n = blocked . length ; if ( n == 0 ) return true ; limit = blocked . length * blocked . length ; for ( int [] b : blocked ) { blo . add ( b [ 0 ] * BASE + b [ 1 ] ); } boolean res1 = dfs ( source , target , 0 ); vis . clear (); boolean res2 = dfs ( target , source , 0 ); return res1 && res2 ; } private boolean dfs ( int [] source , int [] target , int step ) { if ( source [ 0 ] == target [ 0 ] && source [ 1 ] == target [ 1 ] ) return true ; if ( step >= limit ) return true ; vis . add ( source [ 0 ] * BASE + source [ 1 ] ); for ( int [] d : directions ) { int newX = source [ 0 ] + d [ 0 ] ; int newY = source [ 1 ] + d [ 1 ] ; if ( newX < 0 || newX >= EDGE || newY < 0 || newY >= EDGE ) continue ; if ( blo . contains ( newX * BASE + newY )) continue ; if ( vis . contains ( newX * BASE + newY )) continue ; if ( dfs ( new int [] { newX , newY }, target , step + 1 )) return true ; } return false ; } }","title":"2022/01/11 - 1036. \u9003\u79bb\u5927\u8ff7\u5bab"},{"location":"algo/leetcode/daily/2022-01-11/#description","text":"1036. \u9003\u79bb\u5927\u8ff7\u5bab \u5728\u4e00\u4e2a 10^6 x 10^6 \u7684\u7f51\u683c\u4e2d\uff0c\u6bcf\u4e2a\u7f51\u683c\u4e0a\u65b9\u683c\u7684\u5750\u6807\u4e3a (x, y) \u3002 \u73b0\u5728\u4ece\u6e90\u65b9\u683c source = [sx, sy] \u5f00\u59cb\u51fa\u53d1\uff0c\u610f\u56fe\u8d76\u5f80\u76ee\u6807\u65b9\u683c target = [tx, ty] \u3002\u6570\u7ec4 blocked \u662f\u5c01\u9501\u7684\u65b9\u683c\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e2a blocked[i] = [xi, yi] \u8868\u793a\u5750\u6807\u4e3a (xi, yi) \u7684\u65b9\u683c\u662f\u7981\u6b62\u901a\u884c\u7684\u3002 \u6bcf\u6b21\u79fb\u52a8\uff0c\u90fd\u53ef\u4ee5\u8d70\u5230\u7f51\u683c\u4e2d\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u65b9\u683c\uff0c\u53ea\u8981\u8be5\u65b9\u683c \u4e0d \u5728\u7ed9\u51fa\u7684\u5c01\u9501\u5217\u8868 blocked \u4e0a\u3002\u540c\u65f6\uff0c\u4e0d\u5141\u8bb8\u8d70\u51fa\u7f51\u683c\u3002 \u53ea\u6709\u5728\u53ef\u4ee5\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79fb\u52a8\u4ece\u6e90\u65b9\u683c source \u5230\u8fbe\u76ee\u6807\u65b9\u683c target \u65f6\u624d\u8fd4\u56de true \u3002\u5426\u5219\uff0c\u8fd4\u56de false \u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-11/#solutions","text":"\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u6211\u9996\u5148\u5c31\u60f3\u5230\u4e86\u8def\u5f84\u641c\u7d22\u7c7b\u4f3c\u7684\u95ee\u9898\uff0c\u6240\u4ee5 DFS \u548c BFS \u4e24\u79cd\u65b9\u6cd5\u9996\u5148\u51fa\u73b0\u5728\u4e86\u6211\u7684\u8111\u5b50\u91cc\u3002\u8fd9\u91cc\u6211\u5c31\u8bf4\u660e\u4e00\u4e0bDFS\uff0cBFS\u7684\u601d\u8def\u548cDFS\u5dee\u4e0d\u591a\uff0c\u7a0d\u5fae\u6709\u4e00\u70b9\u53d8\u5316\u3002 \u5982\u679c\u60f3\u770b BFS \u7684\u89e3\u6cd5\uff0c\u8bf7\u770b\u4e09\u53f6\u59d0\u7684\u9898\u89e3\uff1a \u3010\u5bab\u6c34\u4e09\u53f6\u3011BFS + \u7ed9\u5b9a\u969c\u788d\u7269\u6240\u80fd\u56f4\u6210\u7684\u6700\u5927\u9762\u79ef DFS\u89e3\u6cd5 \u53cc\u5411DFS\u89e3\u6cd5AC TLE\uff0c\u56e0\u4e3a\u5750\u6807\u7cfb\u8303\u56f4\u592a\u5927\u4e86\u5982\u679c\u7528DFS\u7684\u8bdd\uff0c\u975e\u5e38\u8d39\u65f6\u95f4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { Set < String > set = new HashSet <> (); int maxX = 1000000 ; int maxY = 1000000 ; int [][] directions = new int [][] { { 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 } }; public boolean isEscapePossible ( int [][] blocked , int [] source , int [] target ) { int n = blocked . length ; if ( n == 0 ) return true ; for ( int [] b : blocked ) { set . add ( \"[\" + b [ 0 ] + \",\" + b [ 1 ] + \"]\" ); } return dfs ( source , target ); } private boolean dfs ( int [] source , int [] target ) { if ( source [ 0 ] == target [ 0 ] && source [ 1 ] == target [ 1 ] ) return true ; set . add ( \"[\" + source [ 0 ] + \",\" + source [ 1 ] + \"]\" ); for ( int [] d : directions ) { int newX = source [ 0 ] + d [ 0 ] ; int newY = source [ 1 ] + d [ 1 ] ; if ( newX >= 0 && newX <= maxX && newY >= 0 && newY <= maxY && ! set . contains ( newX + newY )) { if ( dfs ( new int [] { newX , newY }, target )) return true ; } } return false ; } } \u65e2\u7136\u4e0a\u9762\u7684 DFS \u89e3\u6cd5\u4f1a TLE \uff0c\u90a3\u4e48\u5c31\u60f3\u600e\u4e48\u624d\u80fd\u907f\u514d\u8fd9\u79cd\u60c5\u51b5\uff0c\u8fd9\u65f6\u6211\u5c31\u53ea\u80fd\u770b\u770b\u9898\u89e3\u4e86\u3002 \u5927\u81f4\u7684\u601d\u8def\u5c31\u662f\uff0c blocked \u7684\u957f\u5ea6\u662f\u6709\u9650\u7684\uff0c\u90a3\u4e48\u5047\u8bbe blocked \u7684\u957f\u5ea6\u662f len \uff0c\u90a3\u4e48\u5b83\u80fd\u56f4\u6210\u7684\u6700\u5927\u8303\u56f4\u5c31\u662f len * len \uff0c\u90a3\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u8bb0\u5f55\u6b65\u6570\u6765\u5224\u65ad source \u6216\u8005 target \u6709\u6ca1\u6709\u88ab\u56f4\u4f4f\u4e86\uff0c\u5047\u8bbe\u6b65\u6570\u4e3astep\uff0c\u90a3\u4e48\u5f53 step > len * len \u65f6\uff0c\u5c31\u8bf4\u660e\u662f\u6ca1\u6709\u88ab\u56f4\u4f4f\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de true \u4e86\uff0c\u6211\u4eec\u9700\u8981\u5206\u522b\u5224\u65ad source \u548c target \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { Set < Integer > blo = new HashSet <> (); Set < Integer > vis = new HashSet <> (); int EDGE = ( int ) 1e6 ; int BASE = 131 ; int limit = 0 ; int [][] directions = new int [][] { { 1 , 0 }, { - 1 , 0 }, { 0 , 1 }, { 0 , - 1 } }; public boolean isEscapePossible ( int [][] blocked , int [] source , int [] target ) { int n = blocked . length ; if ( n == 0 ) return true ; limit = blocked . length * blocked . length ; for ( int [] b : blocked ) { blo . add ( b [ 0 ] * BASE + b [ 1 ] ); } boolean res1 = dfs ( source , target , 0 ); vis . clear (); boolean res2 = dfs ( target , source , 0 ); return res1 && res2 ; } private boolean dfs ( int [] source , int [] target , int step ) { if ( source [ 0 ] == target [ 0 ] && source [ 1 ] == target [ 1 ] ) return true ; if ( step >= limit ) return true ; vis . add ( source [ 0 ] * BASE + source [ 1 ] ); for ( int [] d : directions ) { int newX = source [ 0 ] + d [ 0 ] ; int newY = source [ 1 ] + d [ 1 ] ; if ( newX < 0 || newX >= EDGE || newY < 0 || newY >= EDGE ) continue ; if ( blo . contains ( newX * BASE + newY )) continue ; if ( vis . contains ( newX * BASE + newY )) continue ; if ( dfs ( new int [] { newX , newY }, target , step + 1 )) return true ; } return false ; } }","title":"Solutions"},{"location":"algo/leetcode/daily/2022-01-12-en/","tags":["Medium","BST"],"text":"701. Insert into a Binary Search Tree - Medium Description \u00b6 701. Insert into a Binary Search Tree You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them . \u8fd9\u9053\u9898\u5df2\u7ecf\u5f88\u7b80\u5355\u4e86\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5de6\u5b50\u8282\u70b9\u6bd4\u81ea\u5df1\u5c0f\uff0c\u53f3\u5b50\u8282\u70b9\u6bd4\u81ea\u5df1\u5927\u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode insertIntoBST ( TreeNode root , int val ) { if ( root == null ) return new TreeNode ( val ); TreeNode dummy = root ; insert ( root , val ); return dummy ; } public void insert ( TreeNode root , int val ) { if ( root == null ) return ; int n = root . val ; if ( val >= n ) { if ( root . right != null ) { insert ( root . right , val ); } else { root . right = new TreeNode ( val ); return ; } } else { if ( root . left != null ) { insert ( root . left , val ); } else { root . left = new TreeNode ( val ); return ; } } } }","title":"2022/01/12 - 701. Insert into a Binary Search Tree"},{"location":"algo/leetcode/daily/2022-01-12-en/#description","text":"701. Insert into a Binary Search Tree You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST. Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them . \u8fd9\u9053\u9898\u5df2\u7ecf\u5f88\u7b80\u5355\u4e86\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5de6\u5b50\u8282\u70b9\u6bd4\u81ea\u5df1\u5c0f\uff0c\u53f3\u5b50\u8282\u70b9\u6bd4\u81ea\u5df1\u5927\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-12-en/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode insertIntoBST ( TreeNode root , int val ) { if ( root == null ) return new TreeNode ( val ); TreeNode dummy = root ; insert ( root , val ); return dummy ; } public void insert ( TreeNode root , int val ) { if ( root == null ) return ; int n = root . val ; if ( val >= n ) { if ( root . right != null ) { insert ( root . right , val ); } else { root . right = new TreeNode ( val ); return ; } } else { if ( root . left != null ) { insert ( root . left , val ); } else { root . left = new TreeNode ( val ); return ; } } } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-12/","tags":["Medium","\u8d2a\u5fc3\u7b97\u6cd5"],"text":"334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217 - Medium Description \u00b6 334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002 \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u4e09\u5143\u7ec4\u4e0b\u6807 (i, j, k) \u4e14\u6ee1\u8db3 i < j < k \uff0c\u4f7f\u5f97 nums[i] < nums[j] < nums[k] \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u8fd9\u9053\u9898\u53ef\u4ee5\u4f7f\u7528 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u7684\u89e3\u6cd5\uff0c\u4f7f\u7528\u8d2a\u5fc3 + \u4e8c\u5206\u3002\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u522b\u662f O(nlogn) \u548c O(n) \u3002\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a LCS \u95ee\u9898\u4e0e LIS \u95ee\u9898\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u4ee5\u53ca LIS \u95ee\u9898\u7684\u6700\u4f18\u89e3\u8bc1\u660e Solutions \u00b6 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u8d2a\u5fc3 + \u4e8c\u5206\uff09 \u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u8d2a\u5fc3\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public boolean increasingTriplet ( int [] nums ) { int n = nums . length , ans = 1 ; int [] f = new int [ n + 1 ] ; Arrays . fill ( f , 0x3f3f3f3f ); for ( int i = 0 ; i < n ; i ++ ) { int t = nums [ i ] ; int l = 1 , r = i + 1 ; while ( l < r ) { int mid = l + r >> 1 ; if ( f [ mid ] >= t ) r = mid ; else l = mid + 1 ; } f [ r ] = t ; ans = Math . max ( ans , r ); } return ans >= 3 ; } } \u65e2\u7136\u9898\u76ee\u4e0a\u8bf4\u4e86\u5c1d\u8bd5\u80fd\u5426\u7528 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f18\u5316\u4e00\u4e0b\u4e0a\u9762\u7684\u7b97\u6cd5\uff1a(\u5176\u5b9e\u6211\u4e5f\u4e0d\u4f1a\uff0c\u6284\u7684) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public boolean increasingTriplet ( int [] nums ) { int n = nums . length ; long [] f = new long [ 3 ] ; f [ 1 ] = f [ 2 ] = ( int ) 1e19 ; for ( int i = 0 ; i < n ; i ++ ) { int t = nums [ i ] ; if ( f [ 2 ] < t ) return true ; else if ( f [ 1 ] < t && t < f [ 2 ] ) f [ 2 ] = t ; else if ( f [ 1 ] > t ) f [ 1 ] = t ; } return false ; } }","title":"334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217"},{"location":"algo/leetcode/daily/2022-01-12/#description","text":"334. \u9012\u589e\u7684\u4e09\u5143\u5b50\u5e8f\u5217 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u662f\u5426\u5b58\u5728\u957f\u5ea6\u4e3a 3 \u7684\u9012\u589e\u5b50\u5e8f\u5217\u3002 \u5982\u679c\u5b58\u5728\u8fd9\u6837\u7684\u4e09\u5143\u7ec4\u4e0b\u6807 (i, j, k) \u4e14\u6ee1\u8db3 i < j < k \uff0c\u4f7f\u5f97 nums[i] < nums[j] < nums[k] \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u8fd9\u9053\u9898\u53ef\u4ee5\u4f7f\u7528 \u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217 \u7684\u89e3\u6cd5\uff0c\u4f7f\u7528\u8d2a\u5fc3 + \u4e8c\u5206\u3002\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u5206\u522b\u662f O(nlogn) \u548c O(n) \u3002\u8be6\u7ec6\u8bf7\u53c2\u8003\uff1a LCS \u95ee\u9898\u4e0e LIS \u95ee\u9898\u7684\u76f8\u4e92\u5173\u7cfb\uff0c\u4ee5\u53ca LIS \u95ee\u9898\u7684\u6700\u4f18\u89e3\u8bc1\u660e","title":"Description"},{"location":"algo/leetcode/daily/2022-01-12/#solutions","text":"\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u8d2a\u5fc3 + \u4e8c\u5206\uff09 \u5b9a\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\uff08\u8d2a\u5fc3\uff09 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public boolean increasingTriplet ( int [] nums ) { int n = nums . length , ans = 1 ; int [] f = new int [ n + 1 ] ; Arrays . fill ( f , 0x3f3f3f3f ); for ( int i = 0 ; i < n ; i ++ ) { int t = nums [ i ] ; int l = 1 , r = i + 1 ; while ( l < r ) { int mid = l + r >> 1 ; if ( f [ mid ] >= t ) r = mid ; else l = mid + 1 ; } f [ r ] = t ; ans = Math . max ( ans , r ); } return ans >= 3 ; } } \u65e2\u7136\u9898\u76ee\u4e0a\u8bf4\u4e86\u5c1d\u8bd5\u80fd\u5426\u7528 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u3002\u4f18\u5316\u4e00\u4e0b\u4e0a\u9762\u7684\u7b97\u6cd5\uff1a(\u5176\u5b9e\u6211\u4e5f\u4e0d\u4f1a\uff0c\u6284\u7684) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public boolean increasingTriplet ( int [] nums ) { int n = nums . length ; long [] f = new long [ 3 ] ; f [ 1 ] = f [ 2 ] = ( int ) 1e19 ; for ( int i = 0 ; i < n ; i ++ ) { int t = nums [ i ] ; if ( f [ 2 ] < t ) return true ; else if ( f [ 1 ] < t && t < f [ 2 ] ) f [ 2 ] = t ; else if ( f [ 1 ] > t ) f [ 1 ] = t ; } return false ; } }","title":"Solutions"},{"location":"algo/leetcode/daily/2022-01-13/","tags":["Easy"],"text":"747. \u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570 - Easy Description \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u603b\u662f\u5b58\u5728 \u552f\u4e00\u7684 \u4e00\u4e2a\u6700\u5927\u6574\u6570 \u3002 \u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u5e76\u68c0\u67e5\u5b83\u662f\u5426 \u81f3\u5c11\u662f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5176\u4ed6\u6570\u5b57\u7684\u4e24\u500d \u3002\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de \u6700\u5927\u5143\u7d20\u7684\u4e0b\u6807 \uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int dominantIndex ( int [] nums ) { int maxIdx = 0 ; int n = nums . length ; for ( int i = 0 ; i < n ; i ++ ) { maxIdx = nums [ i ] >= nums [ maxIdx ] ? i : maxIdx ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == maxIdx ) continue ; if ( nums [ i ] * 2 > nums [ maxIdx ] ) return - 1 ; } return maxIdx ; } }","title":"2022/01/13 - 747. \u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570"},{"location":"algo/leetcode/daily/2022-01-13/#description","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u603b\u662f\u5b58\u5728 \u552f\u4e00\u7684 \u4e00\u4e2a\u6700\u5927\u6574\u6570 \u3002 \u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u5e76\u68c0\u67e5\u5b83\u662f\u5426 \u81f3\u5c11\u662f\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5176\u4ed6\u6570\u5b57\u7684\u4e24\u500d \u3002\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56de \u6700\u5927\u5143\u7d20\u7684\u4e0b\u6807 \uff0c\u5426\u5219\u8fd4\u56de -1 \u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-13/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public int dominantIndex ( int [] nums ) { int maxIdx = 0 ; int n = nums . length ; for ( int i = 0 ; i < n ; i ++ ) { maxIdx = nums [ i ] >= nums [ maxIdx ] ? i : maxIdx ; } for ( int i = 0 ; i < n ; i ++ ) { if ( i == maxIdx ) continue ; if ( nums [ i ] * 2 > nums [ maxIdx ] ) return - 1 ; } return maxIdx ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-14/","tags":["Medium"],"text":"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57 - Medium Description \u00b6 373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57 \u7ed9\u5b9a\u4e24\u4e2a\u4ee5 \u5347\u5e8f\u6392\u5217 \u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 , \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k \u3002 \u5b9a\u4e49\u4e00\u5bf9\u503c (u,v) \uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1 \uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2 \u3002 \u8bf7\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u4e2a\u6570\u5bf9 (u1,v1) , (u2,v2) ... (uk,vk) \u3002 \u5c31\u662f\u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u6700\u5c0f\u7684\u524d k \u4e2a\u6570\u5bf9\uff0c\u4f8b\u5982\uff1a nums1 = [1, 2, 3, 4, 5], nums2 = [2, 5, 8, 9, 10], k = 2 \u90a3\u4e48\u7b54\u6848\u5c31\u662f\uff1a[[1, 2], [2, 2]] Solution \u00b6 \u901a\u8fc7\u9898\u76ee\u63cf\u8ff0\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u5927\u6982\u786e\u5b9a\u89e3\u9898\u65b9\u6cd5\u4e86\uff0c\u8fd9\u9053\u9898\u7c7b\u4f3c\u4e8e TopK \u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u6709\u4e24\u4e2a\u5e8f\u5217\uff0c\u800c\u4e14\u662f\u5bf9\u6570\u5bf9\u7684\u6392\u5e8f\u3002\u9996\u5148\u80fd\u60f3\u5230\u7684\u5c31\u662f\u904d\u5386\u6240\u6709\u7684\u6570\u5bf9\uff0c\u7136\u540e\u53d6\u524d k \u4e2a\u5c0f\u6570\u5bf9\u3002\u4f46\u662f\u9898\u76ee\u89c4\u5b9a nums1 \u548c nums2 \u7684\u957f\u5ea6\u6700\u5927\u90fd\u4e3a 10^5 \uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u5bf9\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a\u51fa\u73b0TLE\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 Top K \u4e2a\u6570\u5bf9\uff0c\u800c\u4e24\u4e2a\u6570\u7ec4\u53c8\u662f\u5347\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u5148\u5c06\u524d K \u4e2a\u6570\u5bf9\u653e\u5165\u5c0f\u6839\u5806\uff0c\u53d6\u51fa\u5806\u9876\u6570\u5bf9\uff0c\u518d\u653e\u5165\u4e0b\u4e00\u4e2a\u6570\u5bf9\u3002 \u4e3b\u8981\u601d\u60f3\u662f \u591a\u8def\u5f52\u5e76 \uff0c\u9996\u5148 [nums1[0], nums2[0]] \u80af\u5b9a\u662f\u6700\u5c0f\u7684\u6570\u5bf9\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5c0f\u7684\u6570\u5bf9\u80af\u5b9a\u5c31\u662f\u5728 (nums1[0], nums2[1]) \u548c (nums1[1], nums2[0]) \u4e4b\u95f4\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u67d0\u4e2a\u7d22\u5f15 i \u548c j \u7684\u6570\u5bf9\uff0c\u4e0b\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6700\u5c0f\u6570\u5bf9\u80af\u5b9a\u662f\u5728 (nums1[i], nums2[j + 1]) \u548c (nums1[i + 1], nums2[j]) \u4e4b\u95f4\uff0c\u90a3\u6211\u4eec\u7684\u601d\u8def\u5dee\u4e0d\u591a\u5c31\u6e05\u6670\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public List < List < Integer >> kSmallestPairs ( int [] nums1 , int [] nums2 , int k ) { List < List < Integer >> ans = new ArrayList <> (); int n = nums1 . length , m = nums2 . length ; PriorityQueue < int []> pq = new PriorityQueue <> ( k , ( a , b ) -> ( nums1 [ a [ 0 ] ] + nums2 [ a [ 1 ]] ) - ( nums1 [ b [ 0 ]] + nums2 [ b [ 1 ]] )); for ( int i = 0 ; i < Math . min ( n , k ); i ++ ) { pq . offer ( new int [] { i , 0 }); } while ( ! pq . isEmpty () && k > 0 ) { int [] pair = pq . poll (); ans . add ( List . of ( nums1 [ pair [ 0 ]] , nums2 [ pair [ 1 ]] )); if ( pair [ 1 ] + 1 < m ) pq . offer ( new int [] { pair [ 0 ] , pair [ 1 ] + 1 }); k -- ; } return ans ; } }","title":"2022/01/14 - 373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57"},{"location":"algo/leetcode/daily/2022-01-14/#description","text":"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57 \u7ed9\u5b9a\u4e24\u4e2a\u4ee5 \u5347\u5e8f\u6392\u5217 \u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 , \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k \u3002 \u5b9a\u4e49\u4e00\u5bf9\u503c (u,v) \uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1 \uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2 \u3002 \u8bf7\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u4e2a\u6570\u5bf9 (u1,v1) , (u2,v2) ... (uk,vk) \u3002 \u5c31\u662f\u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u51fa\u548c\u6700\u5c0f\u7684\u524d k \u4e2a\u6570\u5bf9\uff0c\u4f8b\u5982\uff1a nums1 = [1, 2, 3, 4, 5], nums2 = [2, 5, 8, 9, 10], k = 2 \u90a3\u4e48\u7b54\u6848\u5c31\u662f\uff1a[[1, 2], [2, 2]]","title":"Description"},{"location":"algo/leetcode/daily/2022-01-14/#solution","text":"\u901a\u8fc7\u9898\u76ee\u63cf\u8ff0\uff0c\u6211\u4eec\u662f\u53ef\u4ee5\u5927\u6982\u786e\u5b9a\u89e3\u9898\u65b9\u6cd5\u4e86\uff0c\u8fd9\u9053\u9898\u7c7b\u4f3c\u4e8e TopK \u95ee\u9898\uff0c\u4f46\u662f\u8fd9\u91cc\u6211\u4eec\u6709\u4e24\u4e2a\u5e8f\u5217\uff0c\u800c\u4e14\u662f\u5bf9\u6570\u5bf9\u7684\u6392\u5e8f\u3002\u9996\u5148\u80fd\u60f3\u5230\u7684\u5c31\u662f\u904d\u5386\u6240\u6709\u7684\u6570\u5bf9\uff0c\u7136\u540e\u53d6\u524d k \u4e2a\u5c0f\u6570\u5bf9\u3002\u4f46\u662f\u9898\u76ee\u89c4\u5b9a nums1 \u548c nums2 \u7684\u957f\u5ea6\u6700\u5927\u90fd\u4e3a 10^5 \uff0c\u904d\u5386\u6240\u6709\u7684\u6570\u5bf9\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u592a\u9ad8\uff0c\u4f1a\u51fa\u73b0TLE\u3002\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3 Top K \u4e2a\u6570\u5bf9\uff0c\u800c\u4e24\u4e2a\u6570\u7ec4\u53c8\u662f\u5347\u5e8f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u80fd\u5148\u5c06\u524d K \u4e2a\u6570\u5bf9\u653e\u5165\u5c0f\u6839\u5806\uff0c\u53d6\u51fa\u5806\u9876\u6570\u5bf9\uff0c\u518d\u653e\u5165\u4e0b\u4e00\u4e2a\u6570\u5bf9\u3002 \u4e3b\u8981\u601d\u60f3\u662f \u591a\u8def\u5f52\u5e76 \uff0c\u9996\u5148 [nums1[0], nums2[0]] \u80af\u5b9a\u662f\u6700\u5c0f\u7684\u6570\u5bf9\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5c0f\u7684\u6570\u5bf9\u80af\u5b9a\u5c31\u662f\u5728 (nums1[0], nums2[1]) \u548c (nums1[1], nums2[0]) \u4e4b\u95f4\uff0c\u4e5f\u5c31\u662f\u8bf4\u5bf9\u4e8e\u67d0\u4e2a\u7d22\u5f15 i \u548c j \u7684\u6570\u5bf9\uff0c\u4e0b\u4e00\u4e2a\u6bd4\u5b83\u5927\u7684\u6700\u5c0f\u6570\u5bf9\u80af\u5b9a\u662f\u5728 (nums1[i], nums2[j + 1]) \u548c (nums1[i + 1], nums2[j]) \u4e4b\u95f4\uff0c\u90a3\u6211\u4eec\u7684\u601d\u8def\u5dee\u4e0d\u591a\u5c31\u6e05\u6670\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 class Solution { public List < List < Integer >> kSmallestPairs ( int [] nums1 , int [] nums2 , int k ) { List < List < Integer >> ans = new ArrayList <> (); int n = nums1 . length , m = nums2 . length ; PriorityQueue < int []> pq = new PriorityQueue <> ( k , ( a , b ) -> ( nums1 [ a [ 0 ] ] + nums2 [ a [ 1 ]] ) - ( nums1 [ b [ 0 ]] + nums2 [ b [ 1 ]] )); for ( int i = 0 ; i < Math . min ( n , k ); i ++ ) { pq . offer ( new int [] { i , 0 }); } while ( ! pq . isEmpty () && k > 0 ) { int [] pair = pq . poll (); ans . add ( List . of ( nums1 [ pair [ 0 ]] , nums2 [ pair [ 1 ]] )); if ( pair [ 1 ] + 1 < m ) pq . offer ( new int [] { pair [ 0 ] , pair [ 1 ] + 1 }); k -- ; } return ans ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-15-en/","tags":["Hard","BFS"],"text":"1345. Jump Game IV - Hard Description \u00b6 1345. Jump Game IV Given an array of integers arr , you are initially positioned at the first index of the array. In one step you can jump from index i to index: i + 1 where: i + 1 < arr.length . i - 1 where: i - 1 >= 0 . j where: arr[i] == arr[j] and i != j . Return the minimum number of steps to reach the last index of the array. Notice that you can not jump outside of the array at any time. \u5927\u6982\u610f\u601d\u5c31\u662f\u5728 i \u8fd9\u4e2a\u4f4d\u7f6e\u80fd\u8df3\u5230 i + 1 \u548c i - 1 \u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4e0e arr[i] \u503c\u76f8\u7b49\u4f46\u662f\u7d22\u5f15\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u8ba1\u7b97\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b65\u80fd\u591f\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u3002 Solutions \u00b6 \u770b\u5230\u8fd9\u6837\u7684\u9898\uff0c\u9996\u5148\u80fd\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6cd5\u662f BFS \uff0c\u56e0\u4e3a\u9700\u8981\u641c\u7d22\u6bcf\u4e2a\u4f4d\u7f6e\u80fd\u591f\u8df3\u5230\u7684\u7d22\u5f15\u3002\u62ff [100,-23,-23,404,100,23,23,23,3,404] \u6765\u4e3e\u4f8b\uff0c\u9996\u5148\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20 100 \u5f00\u59cb\uff0c\u6211\u4eec\u9700\u8981\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u54ea\u4e9b\u4f4d\u7f6e\u4e0a\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a Map \u6765\u5b58\u50a8\u5bf9\u5e94\u7684\u6570\u636e\u4f8b\u5982\uff1a {100, [0, 4]} \uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u90fd\u50cf\u8fd9\u6837\u52a0\u5165 Map \u4e2d\u3002 \u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6240\u4ee5\u4f18\u5148\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15 0 \u653e\u5165\u961f\u5217\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u4f4d\u7f6e\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff08\u5982\u679c\u4e0d\u8bb0\u5f55\u4ee5\u8bbf\u95ee\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff09\u3002\u641c\u7d22\u7684\u7b2c\u4e00\u6b21\u5faa\u73af\uff0c\u5f39\u51fa\u961f\u9996\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u6570\u7ec4\u4f4d\u7f6e\u4e2d\u7684\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u5c31\u5c06\u8fd9\u4e2a\u7d22\u5f15\u52a0\u5165\u961f\u5217\uff0c\u5e76\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u7d22\u5f15+1\u548c-1\u7684\u4f4d\u7f6e\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u7d22\u5f15\u4e5f\u90fd\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff08\u53c2\u8003\u9898\u76ee\u4e0a\u80fd\u591f\u8df3\u5230\u7684\u4f4d\u7f6e\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int minJumps ( int [] arr ) { int n = arr . length ; if ( n <= 1 ) return 0 ; Map < Integer , List < Integer >> graph = new HashMap <> (); for ( int i = 0 ; i < n ; i ++ ) { graph . computeIfAbsent ( arr [ i ] , v -> new LinkedList <> ()). add ( i ); } Deque < Integer > q = new LinkedList <> (); q . offer ( 0 ); boolean [] visited = new boolean [ n ] ; visited [ 0 ] = true ; int step = 0 ; while ( ! q . isEmpty ()) { int size = q . size (); for ( int i = 0 ; i < size ; i ++ ) { int idx = q . poll (); if ( idx == n - 1 ) return step ; for ( int child : graph . get ( arr [ idx ] )) { if ( ! visited [ child ] ) { visited [ child ] = true ; q . offer ( child ); } } graph . get ( arr [ idx ] ). clear (); if ( idx - 1 >= 0 && ! visited [ idx - 1 ] ) { visited [ idx - 1 ] = true ; q . offer ( idx - 1 ); } if ( idx + 1 < n && ! visited [ idx + 1 ] ) { visited [ idx + 1 ] = true ; q . offer ( idx + 1 ); } } step ++ ; } return - 1 ; } }","title":"2022/01/15 - 1345. Jump Game IV"},{"location":"algo/leetcode/daily/2022-01-15-en/#description","text":"1345. Jump Game IV Given an array of integers arr , you are initially positioned at the first index of the array. In one step you can jump from index i to index: i + 1 where: i + 1 < arr.length . i - 1 where: i - 1 >= 0 . j where: arr[i] == arr[j] and i != j . Return the minimum number of steps to reach the last index of the array. Notice that you can not jump outside of the array at any time. \u5927\u6982\u610f\u601d\u5c31\u662f\u5728 i \u8fd9\u4e2a\u4f4d\u7f6e\u80fd\u8df3\u5230 i + 1 \u548c i - 1 \u7684\u4f4d\u7f6e\uff0c\u4ee5\u53ca\u4e0e arr[i] \u503c\u76f8\u7b49\u4f46\u662f\u7d22\u5f15\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u8ba1\u7b97\u6700\u5c11\u9700\u8981\u591a\u5c11\u6b65\u80fd\u591f\u8df3\u5230\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u4f4d\u7f6e\u4e0a\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-15-en/#solutions","text":"\u770b\u5230\u8fd9\u6837\u7684\u9898\uff0c\u9996\u5148\u80fd\u60f3\u5230\u7684\u89e3\u51b3\u65b9\u6cd5\u662f BFS \uff0c\u56e0\u4e3a\u9700\u8981\u641c\u7d22\u6bcf\u4e2a\u4f4d\u7f6e\u80fd\u591f\u8df3\u5230\u7684\u7d22\u5f15\u3002\u62ff [100,-23,-23,404,100,23,23,23,3,404] \u6765\u4e3e\u4f8b\uff0c\u9996\u5148\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20 100 \u5f00\u59cb\uff0c\u6211\u4eec\u9700\u8981\u5b58\u50a8\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u54ea\u4e9b\u4f4d\u7f6e\u4e0a\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a Map \u6765\u5b58\u50a8\u5bf9\u5e94\u7684\u6570\u636e\u4f8b\u5982\uff1a {100, [0, 4]} \uff0c\u5c06\u6bcf\u4e2a\u5143\u7d20\u90fd\u50cf\u8fd9\u6837\u52a0\u5165 Map \u4e2d\u3002 \u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\uff0c\u6240\u4ee5\u4f18\u5148\u5c06\u7b2c\u4e00\u4e2a\u5143\u7d20\u7d22\u5f15 0 \u653e\u5165\u961f\u5217\u4e2d\uff0c\u5e76\u6807\u8bb0\u8be5\u4f4d\u7f6e\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\u4e86\uff08\u5982\u679c\u4e0d\u8bb0\u5f55\u4ee5\u8bbf\u95ee\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u4e00\u5b9a\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\uff09\u3002\u641c\u7d22\u7684\u7b2c\u4e00\u6b21\u5faa\u73af\uff0c\u5f39\u51fa\u961f\u9996\u5143\u7d20\uff0c\u7136\u540e\u904d\u5386\u8fd9\u4e2a\u5143\u7d20\u6240\u5728\u6570\u7ec4\u4f4d\u7f6e\u4e2d\u7684\u503c\u5bf9\u5e94\u7684\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\u5c31\u5c06\u8fd9\u4e2a\u7d22\u5f15\u52a0\u5165\u961f\u5217\uff0c\u5e76\u5224\u65ad\u5f53\u524d\u8fd9\u4e2a\u7d22\u5f15+1\u548c-1\u7684\u4f4d\u7f6e\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\uff0c\u6ca1\u6709\u88ab\u8bbf\u95ee\u7684\u7d22\u5f15\u4e5f\u90fd\u52a0\u5165\u5230\u961f\u5217\u4e2d\uff08\u53c2\u8003\u9898\u76ee\u4e0a\u80fd\u591f\u8df3\u5230\u7684\u4f4d\u7f6e\uff09\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public int minJumps ( int [] arr ) { int n = arr . length ; if ( n <= 1 ) return 0 ; Map < Integer , List < Integer >> graph = new HashMap <> (); for ( int i = 0 ; i < n ; i ++ ) { graph . computeIfAbsent ( arr [ i ] , v -> new LinkedList <> ()). add ( i ); } Deque < Integer > q = new LinkedList <> (); q . offer ( 0 ); boolean [] visited = new boolean [ n ] ; visited [ 0 ] = true ; int step = 0 ; while ( ! q . isEmpty ()) { int size = q . size (); for ( int i = 0 ; i < size ; i ++ ) { int idx = q . poll (); if ( idx == n - 1 ) return step ; for ( int child : graph . get ( arr [ idx ] )) { if ( ! visited [ child ] ) { visited [ child ] = true ; q . offer ( child ); } } graph . get ( arr [ idx ] ). clear (); if ( idx - 1 >= 0 && ! visited [ idx - 1 ] ) { visited [ idx - 1 ] = true ; q . offer ( idx - 1 ); } if ( idx + 1 < n && ! visited [ idx + 1 ] ) { visited [ idx + 1 ] = true ; q . offer ( idx + 1 ); } } step ++ ; } return - 1 ; } }","title":"Solutions"},{"location":"algo/leetcode/daily/2022-01-15/","tags":["Easy"],"text":"1716. \u8ba1\u7b97\u529b\u6263\u94f6\u884c\u7684\u94b1 - Easy Description \u00b6 1716. \u8ba1\u7b97\u529b\u6263\u94f6\u884c\u7684\u94b1 Hercy \u60f3\u8981\u4e3a\u8d2d\u4e70\u7b2c\u4e00\u8f86\u8f66\u5b58\u94b1\u3002\u4ed6 \u6bcf\u5929 \u90fd\u5f80\u529b\u6263\u94f6\u884c\u91cc\u5b58\u94b1\u3002 \u6700\u5f00\u59cb\uff0c\u4ed6\u5728\u5468\u4e00\u7684\u65f6\u5019\u5b58\u5165 1 \u5757\u94b1\u3002\u4ece\u5468\u4e8c\u5230\u5468\u65e5\uff0c\u4ed6\u6bcf\u5929\u90fd\u6bd4\u524d\u4e00\u5929\u591a\u5b58\u5165 1 \u5757\u94b1\u3002\u5728\u63a5\u4e0b\u6765\u6bcf\u4e00\u4e2a\u5468\u4e00\uff0c\u4ed6\u90fd\u4f1a\u6bd4 \u524d\u4e00\u4e2a\u5468\u4e00 \u591a\u5b58\u5165 1 \u5757\u94b1\u3002 \u7ed9\u4f60 n \uff0c\u8bf7\u4f60\u8fd4\u56de\u5728\u7b2c n \u5929\u7ed3\u675f\u7684\u65f6\u5019\u4ed6\u5728\u529b\u6263\u94f6\u884c\u603b\u5171\u5b58\u4e86\u591a\u5c11\u5757\u94b1\u3002 Solution \u00b6 \u7b80\u5355\u9898\uff0c\u4e0d\u7528\u8bf4\u660e\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int totalMoney ( int n ) { int monday = 1 , cur = 1 , sum = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 7 == 0 ) { monday += 1 ; cur = monday ; } else { cur ++ ; } sum += cur ; } return sum ; } }","title":"2022/01/15 - 1716. \u8ba1\u7b97\u529b\u6263\u94f6\u884c\u7684\u94b1"},{"location":"algo/leetcode/daily/2022-01-15/#description","text":"1716. \u8ba1\u7b97\u529b\u6263\u94f6\u884c\u7684\u94b1 Hercy \u60f3\u8981\u4e3a\u8d2d\u4e70\u7b2c\u4e00\u8f86\u8f66\u5b58\u94b1\u3002\u4ed6 \u6bcf\u5929 \u90fd\u5f80\u529b\u6263\u94f6\u884c\u91cc\u5b58\u94b1\u3002 \u6700\u5f00\u59cb\uff0c\u4ed6\u5728\u5468\u4e00\u7684\u65f6\u5019\u5b58\u5165 1 \u5757\u94b1\u3002\u4ece\u5468\u4e8c\u5230\u5468\u65e5\uff0c\u4ed6\u6bcf\u5929\u90fd\u6bd4\u524d\u4e00\u5929\u591a\u5b58\u5165 1 \u5757\u94b1\u3002\u5728\u63a5\u4e0b\u6765\u6bcf\u4e00\u4e2a\u5468\u4e00\uff0c\u4ed6\u90fd\u4f1a\u6bd4 \u524d\u4e00\u4e2a\u5468\u4e00 \u591a\u5b58\u5165 1 \u5757\u94b1\u3002 \u7ed9\u4f60 n \uff0c\u8bf7\u4f60\u8fd4\u56de\u5728\u7b2c n \u5929\u7ed3\u675f\u7684\u65f6\u5019\u4ed6\u5728\u529b\u6263\u94f6\u884c\u603b\u5171\u5b58\u4e86\u591a\u5c11\u5757\u94b1\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-15/#solution","text":"\u7b80\u5355\u9898\uff0c\u4e0d\u7528\u8bf4\u660e\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int totalMoney ( int n ) { int monday = 1 , cur = 1 , sum = 1 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 7 == 0 ) { monday += 1 ; cur = monday ; } else { cur ++ ; } sum += cur ; } return sum ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-16/","tags":["Medium"],"text":"849. Maximize Distance to Closest Person - Medium Description \u00b6 849. Maximize Distance to Closest Person You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty ( 0-indexed ). There is at least one empty seat, and at least one person sitting. Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. Return that maximum distance to the closest person. \u9898\u76ee\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a\u6570\u7ec4\u4ee3\u8868\u5ea7\u4f4d\uff0c seats[i] \u7684\u503c\u662f 1 \u65f6\u8bf4\u660e\u5ea7\u4f4d\u4e0a\u6709\u4eba\uff0c\u503c\u4e3a 0 \u65f6\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4eba\uff0c\u53ef\u4ee5\u5750\u3002\u8ba9\u6211\u4eec\u627e\u51fa\u4e00\u4e2a\u79bb\u6700\u8fd1\u7684\u4eba\u8ddd\u79bb\u6700\u8fdc\u7684\u5ea7\u4f4d\u3002 Solution \u00b6 \u9996\u5148\u60f3\u8981\u627e\u51fa\u8ddd\u79bb\u6700\u8fd1\u7684\u4eba\u6700\u8fdc\u7684\u4f4d\u7f6e\uff0c\u5c31\u6709\u4e09\u79cd\u60c5\u51b5\uff1a \u5de6\u53f3\u4e24\u8fb9\u90fd\u6709\u4eba \u53f3\u8fb9\u6ca1\u6709\u4eba\uff0c\u53ea\u6709\u5de6\u8fb9\u6709\u4eba \u5de6\u8fb9\u6ca1\u6709\u4eba\uff0c\u53ea\u6709\u53f3\u8fb9\u6709\u4eba \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\u6211\u4eec\u5c31\u9700\u8981\u53cc\u6307\u9488\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u4ee3\u8868\u5de6\u8fb9\u6709\u4eba\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u904d\u5386\u5230\u53f3\u8fb9\u6709\u4eba\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\u65f6\uff0c (\u53f3\u8fb9\u6709\u4eba\u7684\u5ea7\u4f4d\u7684\u7d22\u5f15 - \u5de6\u8fb9\u6709\u4eba\u7684\u5ea7\u4f4d\u7684\u7d22\u5f15) / 2 \uff0c\u5c31\u662f\u8fd9\u4e24\u4e2a\u4eba\u4e4b\u95f4\u8ddd\u79bb\u6700\u8fd1\u7684\u90a3\u4e2a\u4eba\u7684\u8ddd\u79bb\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u548c\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u8981\u5355\u72ec\u62ff\u51fa\u6765\u8bf4\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982 seats \u6570\u7ec4\u662f\u8fd9\u6837\u7684\uff1a [1,0,0,0,0,0,0,0,...,0] \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7528 \u6570\u7ec4\u7684\u957f\u5ea6 - \u5de6\u8fb9\u6709\u4eba\u5ea7\u4f4d\u7684\u7d22\u5f15 - 1 \uff0c\u5c31\u80fd\u5f97\u51fa\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7684\u7b54\u6848\u3002\u800c\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a [0,0,0,0,0,...,0,1] \uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u6700\u540e\u4e00\u4e2a\u6709\u4eba\u5ea7\u4f4d\u7684\u7d22\u5f15\u5f53\u4f5c\u8ddd\u79bb\u5c31\u884c\u3002 \u5206\u6790\u5b8c\u9898\u76ee\uff0c\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u4ee3\u7801\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int maxDistToClosest ( int [] seats ) { int p1 = - 1 , n = seats . length , res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( seats [ i ] == 1 ) { // p1\u5c0f\u4e8e\u96f6\u65f6\uff0c\u5c31\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u53d6i\u5c31\u53ef\u4ee5 res = p1 < 0 ? i : Math . max ( res , ( i - p1 ) / 2 ); p1 = i ; } } // \u5224\u65ad\u4e00\u4e0b\u7b2c\u4e8c\u79cd\u60c5\u51b5 res = Math . max ( res , n - p1 - 1 ); return res ; } }","title":"2022/01/16 - 849. Maximize Distance to Closest Person"},{"location":"algo/leetcode/daily/2022-01-16/#description","text":"849. Maximize Distance to Closest Person You are given an array representing a row of seats where seats[i] = 1 represents a person sitting in the ith seat, and seats[i] = 0 represents that the ith seat is empty ( 0-indexed ). There is at least one empty seat, and at least one person sitting. Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. Return that maximum distance to the closest person. \u9898\u76ee\u7684\u5927\u81f4\u610f\u601d\u5c31\u662f\u6709\u4e00\u4e2a\u6570\u7ec4\u4ee3\u8868\u5ea7\u4f4d\uff0c seats[i] \u7684\u503c\u662f 1 \u65f6\u8bf4\u660e\u5ea7\u4f4d\u4e0a\u6709\u4eba\uff0c\u503c\u4e3a 0 \u65f6\u8bf4\u660e\u8fd9\u4e2a\u4f4d\u7f6e\u6ca1\u6709\u4eba\uff0c\u53ef\u4ee5\u5750\u3002\u8ba9\u6211\u4eec\u627e\u51fa\u4e00\u4e2a\u79bb\u6700\u8fd1\u7684\u4eba\u8ddd\u79bb\u6700\u8fdc\u7684\u5ea7\u4f4d\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-16/#solution","text":"\u9996\u5148\u60f3\u8981\u627e\u51fa\u8ddd\u79bb\u6700\u8fd1\u7684\u4eba\u6700\u8fdc\u7684\u4f4d\u7f6e\uff0c\u5c31\u6709\u4e09\u79cd\u60c5\u51b5\uff1a \u5de6\u53f3\u4e24\u8fb9\u90fd\u6709\u4eba \u53f3\u8fb9\u6ca1\u6709\u4eba\uff0c\u53ea\u6709\u5de6\u8fb9\u6709\u4eba \u5de6\u8fb9\u6ca1\u6709\u4eba\uff0c\u53ea\u6709\u53f3\u8fb9\u6709\u4eba \u5bf9\u4e8e\u7b2c\u4e00\u79cd\u60c5\u51b5\u6211\u4eec\u5c31\u9700\u8981\u53cc\u6307\u9488\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u4e2a\u4ee3\u8868\u5de6\u8fb9\u6709\u4eba\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\uff0c\u904d\u5386\u5230\u53f3\u8fb9\u6709\u4eba\u7684\u4f4d\u7f6e\u7684\u7d22\u5f15\u65f6\uff0c (\u53f3\u8fb9\u6709\u4eba\u7684\u5ea7\u4f4d\u7684\u7d22\u5f15 - \u5de6\u8fb9\u6709\u4eba\u7684\u5ea7\u4f4d\u7684\u7d22\u5f15) / 2 \uff0c\u5c31\u662f\u8fd9\u4e24\u4e2a\u4eba\u4e4b\u95f4\u8ddd\u79bb\u6700\u8fd1\u7684\u90a3\u4e2a\u4eba\u7684\u8ddd\u79bb\u3002 \u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u548c\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u5c31\u8981\u5355\u72ec\u62ff\u51fa\u6765\u8bf4\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u5047\u5982 seats \u6570\u7ec4\u662f\u8fd9\u6837\u7684\uff1a [1,0,0,0,0,0,0,0,...,0] \uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u7528 \u6570\u7ec4\u7684\u957f\u5ea6 - \u5de6\u8fb9\u6709\u4eba\u5ea7\u4f4d\u7684\u7d22\u5f15 - 1 \uff0c\u5c31\u80fd\u5f97\u51fa\u7b2c\u4e8c\u79cd\u60c5\u51b5\u7684\u7b54\u6848\u3002\u800c\u5bf9\u4e8e\u7b2c\u4e09\u79cd\u60c5\u51b5\uff1a [0,0,0,0,0,...,0,1] \uff0c\u6211\u4eec\u5c31\u76f4\u63a5\u7528\u6700\u540e\u4e00\u4e2a\u6709\u4eba\u5ea7\u4f4d\u7684\u7d22\u5f15\u5f53\u4f5c\u8ddd\u79bb\u5c31\u884c\u3002 \u5206\u6790\u5b8c\u9898\u76ee\uff0c\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u4ee3\u7801\u4e86\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution { public int maxDistToClosest ( int [] seats ) { int p1 = - 1 , n = seats . length , res = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( seats [ i ] == 1 ) { // p1\u5c0f\u4e8e\u96f6\u65f6\uff0c\u5c31\u662f\u7b2c\u4e09\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u76f4\u63a5\u53d6i\u5c31\u53ef\u4ee5 res = p1 < 0 ? i : Math . max ( res , ( i - p1 ) / 2 ); p1 = i ; } } // \u5224\u65ad\u4e00\u4e0b\u7b2c\u4e8c\u79cd\u60c5\u51b5 res = Math . max ( res , n - p1 - 1 ); return res ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-17/","tags":["Easy"],"text":"290. Word Pattern - Easy Description \u00b6 290. Word Pattern Given a pattern and a string s , find if s follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s . Example 1: Input : pattern = \"abba\", s = \"dog cat cat dog\" Output : true Example 2: Input: pattern = \"abba\", s = \"dog cat cat fish\" Output: false Solution \u00b6 Double Map Map + Set 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public boolean wordPattern ( String pattern , String s ) { Map < String , Character > map1 = new HashMap <> (); Map < Character , String > map2 = new HashMap <> (); char [] chArr = pattern . toCharArray (); String [] strArr = s . split ( \" \" ); if ( chArr . length != strArr . length ) return false ; int n = chArr . length ; for ( int i = 0 ; i < n ; i ++ ) { char c = chArr [ i ] ; String str = strArr [ i ] ; if ( ! map1 . containsKey ( str ) && ! map2 . containsKey ( c )) { map1 . put ( str , c ); map2 . put ( c , str ); } else { if ( ! str . equals ( map2 . get ( c )) || c != map1 . get ( str )) return false ; } } return true ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public boolean wordPattern ( String pattern , String s ) { Map < Character , String > map = new HashMap <> (); Set < String > set = new HashSet <> (); char [] chArr = pattern . toCharArray (); String [] strArr = s . split ( \" \" ); int n = chArr . length , m = strArr . length ; if ( n != m ) return false ; for ( int i = 0 ; i < n ; i ++ ) { char c = chArr [ i ] ; String str = strArr [ i ] ; if ( ! map . containsKey ( c )) { if ( set . contains ( str )) return false ; map . put ( c , str ); set . add ( str ); } else { if ( ! str . equals ( map . get ( c ))) return false ; } } return true ; } }","title":"2022/01/17 - 290. Word Pattern"},{"location":"algo/leetcode/daily/2022-01-17/#description","text":"290. Word Pattern Given a pattern and a string s , find if s follows the same pattern. Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s . Example 1: Input : pattern = \"abba\", s = \"dog cat cat dog\" Output : true Example 2: Input: pattern = \"abba\", s = \"dog cat cat fish\" Output: false","title":"Description"},{"location":"algo/leetcode/daily/2022-01-17/#solution","text":"Double Map Map + Set 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public boolean wordPattern ( String pattern , String s ) { Map < String , Character > map1 = new HashMap <> (); Map < Character , String > map2 = new HashMap <> (); char [] chArr = pattern . toCharArray (); String [] strArr = s . split ( \" \" ); if ( chArr . length != strArr . length ) return false ; int n = chArr . length ; for ( int i = 0 ; i < n ; i ++ ) { char c = chArr [ i ] ; String str = strArr [ i ] ; if ( ! map1 . containsKey ( str ) && ! map2 . containsKey ( c )) { map1 . put ( str , c ); map2 . put ( c , str ); } else { if ( ! str . equals ( map2 . get ( c )) || c != map1 . get ( str )) return false ; } } return true ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public boolean wordPattern ( String pattern , String s ) { Map < Character , String > map = new HashMap <> (); Set < String > set = new HashSet <> (); char [] chArr = pattern . toCharArray (); String [] strArr = s . split ( \" \" ); int n = chArr . length , m = strArr . length ; if ( n != m ) return false ; for ( int i = 0 ; i < n ; i ++ ) { char c = chArr [ i ] ; String str = strArr [ i ] ; if ( ! map . containsKey ( c )) { if ( set . contains ( str )) return false ; map . put ( c , str ); set . add ( str ); } else { if ( ! str . equals ( map . get ( c ))) return false ; } } return true ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-20/","tags":["Medium","Binary Search"],"text":"875. Koko Eating Bananas - Medium \u8fd0\u7528\u4e86\u4e8c\u5206\u67e5\u627e\u6cd5\uff0c\u7a0d\u5fae\u6839\u636e\u9898\u76ee\u53d8\u52a8\u4e00\u70b9\u70b9\u3002 Description \u00b6 875. Koko Eating Bananas Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours. Koko can decide her bananas-per-hour eating speed of k . Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return the minimum integer k such that she can eat all the bananas within h hours. Example 1 : Input : piles = [3,6,7,11], h = 8 Output : 4 Example 2 : Input : piles = [30,11,23,4,20], h = 5 Output : 30 Example 3 : Input : [1,1,1,999999999] Output : 142857143 \u8fd9\u9053\u9898\u5462\u7a0d\u5fae\u6709\u70b9 tricky\uff0c\u6211\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u627e\u5230\u8bdd\u8d39\u7684\u65f6\u95f4\u521a\u597d\u7b49\u4e8e h \u7684\u6570\u503c\u5c31\u884c\u4e86\uff0c\u7ed3\u679c [1,1,1,999999999] \u8f93\u5165\u77ac\u95f4\u6253\u6211\u8138\uff0c\u6240\u4ee5\u6211\u5c31\u60f3\uff0c\u5982\u679c\u6570\u5b57\u975e\u5e38\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u80af\u5b9a\u662f\u4f1a\u6709\u5f88\u591a\u79cd\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6837\uff0c\u800c\u8fd9\u9053\u9898\u662f\u8981\u627e\u6700\u5c0f\u7684\u90a3\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u6211\u8ba1\u7b97\u5230 total \u503c\u7b49\u4e8e h \u7684\u65f6\u5019\uff0c\u65e0\u8111\u5c06 right = mid - 1 \uff0c\u7136\u540e\u7ee7\u7eed\u5c1d\u8bd5\uff0c\u76f4\u5230 left \u548c right \u76f8\u7b49\u7684\u65f6\u5019\uff0c\u5c31\u662f\u6700\u5c0f\u503c\u5566\u3002 Solution \u00b6 Scala Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 object Solution { def minEatingSpeed ( piles : Array [ Int ], h : Int ): Int = { val dummy = piles . sorted val k = dummy ( dummy . length - 1 ) var left = 1 var right = k while ( left <= right ) { val mid = ( left + right ) / 2 var total : Int = 0 for ( i <- piles ) { total = total + ( if ( i % mid > 0 ) i / mid + 1 else i / mid ) } if ( total == h ) { right = mid - 1 } else if ( total > h ) { left = mid + 1 } else { right = mid - 1 } } right + 1 } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int minEatingSpeed ( int [] piles , int h ) { // \u9996\u5148\u627e\u5230piles\u4e2d\u7684\u6700\u5927\u503c int right = 0 ; for ( int p : piles ) { right = Math . max ( right , p ); } int left = 1 ; // \u4e8c\u5206\u67e5\u627e while ( left <= right ) { int total = 0 ; int mid = ( left + right ) / 2 ; for ( int p : piles ) { total += p % mid > 0 ? p / mid + 1 : p / mid ; } if ( total == h ) { right = mid - 1 ; } else if ( total > h ) { left = mid + 1 ; } else { right = mid - 1 ; } } return right + 1 ; } }","title":"2022/01/20 - 875. Koko Eating Bananas"},{"location":"algo/leetcode/daily/2022-01-20/#description","text":"875. Koko Eating Bananas Koko loves to eat bananas. There are n piles of bananas, the ith pile has piles[i] bananas. The guards have gone and will come back in h hours. Koko can decide her bananas-per-hour eating speed of k . Each hour, she chooses some pile of bananas and eats k bananas from that pile. If the pile has less than k bananas, she eats all of them instead and will not eat any more bananas during this hour. Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. Return the minimum integer k such that she can eat all the bananas within h hours. Example 1 : Input : piles = [3,6,7,11], h = 8 Output : 4 Example 2 : Input : piles = [30,11,23,4,20], h = 5 Output : 30 Example 3 : Input : [1,1,1,999999999] Output : 142857143 \u8fd9\u9053\u9898\u5462\u7a0d\u5fae\u6709\u70b9 tricky\uff0c\u6211\u4e00\u5f00\u59cb\u60f3\u7684\u662f\u627e\u5230\u8bdd\u8d39\u7684\u65f6\u95f4\u521a\u597d\u7b49\u4e8e h \u7684\u6570\u503c\u5c31\u884c\u4e86\uff0c\u7ed3\u679c [1,1,1,999999999] \u8f93\u5165\u77ac\u95f4\u6253\u6211\u8138\uff0c\u6240\u4ee5\u6211\u5c31\u60f3\uff0c\u5982\u679c\u6570\u5b57\u975e\u5e38\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u80af\u5b9a\u662f\u4f1a\u6709\u5f88\u591a\u79cd\u8f93\u51fa\u7ed3\u679c\u662f\u4e00\u6837\uff0c\u800c\u8fd9\u9053\u9898\u662f\u8981\u627e\u6700\u5c0f\u7684\u90a3\u4e2a\u503c\uff0c\u6240\u4ee5\u5f53\u6211\u8ba1\u7b97\u5230 total \u503c\u7b49\u4e8e h \u7684\u65f6\u5019\uff0c\u65e0\u8111\u5c06 right = mid - 1 \uff0c\u7136\u540e\u7ee7\u7eed\u5c1d\u8bd5\uff0c\u76f4\u5230 left \u548c right \u76f8\u7b49\u7684\u65f6\u5019\uff0c\u5c31\u662f\u6700\u5c0f\u503c\u5566\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-20/#solution","text":"Scala Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 object Solution { def minEatingSpeed ( piles : Array [ Int ], h : Int ): Int = { val dummy = piles . sorted val k = dummy ( dummy . length - 1 ) var left = 1 var right = k while ( left <= right ) { val mid = ( left + right ) / 2 var total : Int = 0 for ( i <- piles ) { total = total + ( if ( i % mid > 0 ) i / mid + 1 else i / mid ) } if ( total == h ) { right = mid - 1 } else if ( total > h ) { left = mid + 1 } else { right = mid - 1 } } right + 1 } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public int minEatingSpeed ( int [] piles , int h ) { // \u9996\u5148\u627e\u5230piles\u4e2d\u7684\u6700\u5927\u503c int right = 0 ; for ( int p : piles ) { right = Math . max ( right , p ); } int left = 1 ; // \u4e8c\u5206\u67e5\u627e while ( left <= right ) { int total = 0 ; int mid = ( left + right ) / 2 ; for ( int p : piles ) { total += p % mid > 0 ? p / mid + 1 : p / mid ; } if ( total == h ) { right = mid - 1 ; } else if ( total > h ) { left = mid + 1 ; } else { right = mid - 1 ; } } return right + 1 ; } }","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-21/","tags":["Medium"],"text":"134. Gas Station - Medium Description \u00b6 134. Gas Station There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i] . You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays gas and cost , return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1 . If there exists a solution, it is guaranteed to be unique Example 1 : Input : gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output : 3 Explanation : Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. \u5176\u5b9e\u5c31\u662f\u4e00\u9053\u627e\u89c4\u5f8b\u7684\u6570\u7ec4\u9898\uff0c\u9996\u5148\u80fd\u60f3\u51fa\u6765\u7684\u529e\u6cd5\u5c31\u662f\u66b4\u529b\u904d\u5386\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u5f53\u6210\u662f\u7b2c\u4e00\u4e2a station \uff0c\u770b\u662f\u5426\u53ef\u4ee5\u8f6c\u4e00\u5708\u56de\u5230\u8fd9\u4e2a\u5730\u65b9\u3002\u4f46\u662f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) \uff0c\u6240\u4ee5 TLE \u4e86\u3002\u90a3\u4e48\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u65b9\u6cd5\u6709\u6ca1\u6709\u4f18\u5316\u7684\u4f59\u5730\u5462\uff1f \u56e0\u4e3a\u8fd9\u4e2a\u66b4\u529b\u7a77\u4e3e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d8\u5316\u7684\u91cf\u53ea\u6709 \u8d77\u70b9 \u548c \u5f53\u524d\u6cb9\u7bb1\u7684\u6cb9\u91cf \u3002\u8fd9\u4e24\u79cd\u72b6\u6001\u7684\u7ec4\u5408\u4e00\u5b9a\u6709\u4e0d\u4e0b n^2 \u79cd\uff0c\u6240\u4ee5\u6ca1\u6709\u4efb\u4f55\u4f18\u5316\u7a7a\u95f4\u3002 Solution \u00b6 \u56fe\u50cf \u00b6 Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int canCompleteCircuit ( int [] gas , int [] cost ) { int n = gas . length ; // \u5229\u7528\u4e00\u4e2asum\u53d8\u91cf\uff0c\u8bb0\u5f55\u5728\u6bcf\u4e2a\u70b9\u65f6\u7684\u603b\u6cb9\u91cf // \u7528\u4e00\u4e2aminSum\u8bb0\u5f55\u8def\u9014\u4e2dsum\u7684\u6700\u5c0f\u503c int sum = 0 , minSum = 0 ; int start = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += gas [ i ] - cost [ i ] ; if ( sum < minSum ) { start = i + 1 ; minSum = sum ; } } if ( sum < 0 ) return - 1 ; return start == n ? 0 : start ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 object Solution { def canCompleteCircuit ( gas : Array [ Int ], cost : Array [ Int ]): Int = { val n = gas . length var sum : Int = 0 var minSum : Int = 0 var start : Int = 0 for ( i <- ( 0 until n )) { sum = sum + gas ( i ) - cost ( i ) if ( sum < minSum ) { start = i + 1 minSum = sum } } if ( sum < 0 ) return - 1 if ( start == n ) 0 else start } } \u8d2a\u5fc3\u7b97\u6cd5 \u00b6 \u5176\u5b9e\u662f\u548c\u56fe\u50cf\u89e3\u6cd5\u5dee\u4e0d\u591a\u7684\uff0c\u5c31\u662f\u601d\u8def\u4e0d\u592a\u4e00\u6837\u3002 \u5047\u8bbe\u4ece i \u5f00\u59cb\u4e3a\u8d77\u70b9\uff0c\u5230 j \u65f6\uff0c\u603b\u6cb9\u91cf\u5c0f\u4e8e0\u4e86\uff0c\u8bf4\u660e i \u65e0\u6cd5\u5230 j \uff0c\u8fd9\u4e5f\u4fa7\u9762\u8bf4\u660e\u4e86 i \u548c j \u4e4b\u95f4\u7684\u70b9\u90fd\u65e0\u6cd5\u8d70\u5230 j \uff0c\u4f8b\u5982 k \u4e3a i \u548c j \u4e4b\u95f4\u7684\u70b9\uff0c i \u5230 k \u7684\u65f6\u5019\u603b\u6cb9\u91cf\u4e00\u5b9a\u662f\u5927\u4e8e\u7b49\u4e8e0\u7684\uff0c\u5982\u679c\u4ece k \u70b9\u5f00\u59cb\uff0c\u8d77\u59cb\u6cb9\u91cf\u4e00\u5b9a\u662f0\uff0c\u90a3\u4e48\u60f3\u4e00\u4e0b\uff0c\u4ece i \u5230 k \u7684\u65f6\u5019\u6cb9\u91cf\u5927\u4e8e\u96f6\u90fd\u65e0\u6cd5\u5230\u8fbe j \uff0c\u90a3\u4e48 k \u5f00\u59cb\u6cb9\u91cf\u4e3a0\uff0c\u5c31\u66f4\u4e0d\u53ef\u80fd\u5230\u8fbe j \u4e86\u3002 \u6240\u4ee5\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u5f53\u524d\u7684\u90ae\u7bb1\u603b\u91cf\u5c0f\u4e8e0\uff0c\u90a3\u5c31\u5c31\u8ba9\u8d77\u59cb\u70b9 start \u4e3a i+1 \uff0c\u7136\u540e tank \uff08\u603b\u6cb9\u91cf\uff09\u91cd\u65b0\u8bbe\u7f6e\u4e3a0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int canCompleteCircuit ( int [] gas , int [] cost ) { int n = gas . length ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += gas [ i ] - cost [ i ] ; } // \u603b\u6cb9\u91cf\u5c0f\u4e8e0\uff0c\u8bf4\u660e\u65e0\u89e3 if ( sum < 0 ) return - 1 ; int tank = 0 , start = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tank += gas [ i ] - cost [ i ] ; if ( tank < 0 ) { tank = 0 ; start = i + 1 ; } } return start == n ? 0 : start ; } }","title":"2022/01/20 - 134. Gas Station"},{"location":"algo/leetcode/daily/2022-01-21/#description","text":"134. Gas Station There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i] . You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations. Given two integer arrays gas and cost , return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1 . If there exists a solution, it is guaranteed to be unique Example 1 : Input : gas = [1,2,3,4,5], cost = [3,4,5,1,2] Output : 3 Explanation : Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4 Travel to station 4. Your tank = 4 - 1 + 5 = 8 Travel to station 0. Your tank = 8 - 2 + 1 = 7 Travel to station 1. Your tank = 7 - 3 + 2 = 6 Travel to station 2. Your tank = 6 - 4 + 3 = 5 Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3. Therefore, return 3 as the starting index. \u5176\u5b9e\u5c31\u662f\u4e00\u9053\u627e\u89c4\u5f8b\u7684\u6570\u7ec4\u9898\uff0c\u9996\u5148\u80fd\u60f3\u51fa\u6765\u7684\u529e\u6cd5\u5c31\u662f\u66b4\u529b\u904d\u5386\uff0c\u5c06\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u90fd\u5f53\u6210\u662f\u7b2c\u4e00\u4e2a station \uff0c\u770b\u662f\u5426\u53ef\u4ee5\u8f6c\u4e00\u5708\u56de\u5230\u8fd9\u4e2a\u5730\u65b9\u3002\u4f46\u662f\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) \uff0c\u6240\u4ee5 TLE \u4e86\u3002\u90a3\u4e48\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u65b9\u6cd5\u6709\u6ca1\u6709\u4f18\u5316\u7684\u4f59\u5730\u5462\uff1f \u56e0\u4e3a\u8fd9\u4e2a\u66b4\u529b\u7a77\u4e3e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53d8\u5316\u7684\u91cf\u53ea\u6709 \u8d77\u70b9 \u548c \u5f53\u524d\u6cb9\u7bb1\u7684\u6cb9\u91cf \u3002\u8fd9\u4e24\u79cd\u72b6\u6001\u7684\u7ec4\u5408\u4e00\u5b9a\u6709\u4e0d\u4e0b n^2 \u79cd\uff0c\u6240\u4ee5\u6ca1\u6709\u4efb\u4f55\u4f18\u5316\u7a7a\u95f4\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-21/#solution","text":"","title":"Solution"},{"location":"algo/leetcode/daily/2022-01-21/#_1","text":"Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public int canCompleteCircuit ( int [] gas , int [] cost ) { int n = gas . length ; // \u5229\u7528\u4e00\u4e2asum\u53d8\u91cf\uff0c\u8bb0\u5f55\u5728\u6bcf\u4e2a\u70b9\u65f6\u7684\u603b\u6cb9\u91cf // \u7528\u4e00\u4e2aminSum\u8bb0\u5f55\u8def\u9014\u4e2dsum\u7684\u6700\u5c0f\u503c int sum = 0 , minSum = 0 ; int start = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += gas [ i ] - cost [ i ] ; if ( sum < minSum ) { start = i + 1 ; minSum = sum ; } } if ( sum < 0 ) return - 1 ; return start == n ? 0 : start ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 object Solution { def canCompleteCircuit ( gas : Array [ Int ], cost : Array [ Int ]): Int = { val n = gas . length var sum : Int = 0 var minSum : Int = 0 var start : Int = 0 for ( i <- ( 0 until n )) { sum = sum + gas ( i ) - cost ( i ) if ( sum < minSum ) { start = i + 1 minSum = sum } } if ( sum < 0 ) return - 1 if ( start == n ) 0 else start } }","title":"\u56fe\u50cf"},{"location":"algo/leetcode/daily/2022-01-21/#_2","text":"\u5176\u5b9e\u662f\u548c\u56fe\u50cf\u89e3\u6cd5\u5dee\u4e0d\u591a\u7684\uff0c\u5c31\u662f\u601d\u8def\u4e0d\u592a\u4e00\u6837\u3002 \u5047\u8bbe\u4ece i \u5f00\u59cb\u4e3a\u8d77\u70b9\uff0c\u5230 j \u65f6\uff0c\u603b\u6cb9\u91cf\u5c0f\u4e8e0\u4e86\uff0c\u8bf4\u660e i \u65e0\u6cd5\u5230 j \uff0c\u8fd9\u4e5f\u4fa7\u9762\u8bf4\u660e\u4e86 i \u548c j \u4e4b\u95f4\u7684\u70b9\u90fd\u65e0\u6cd5\u8d70\u5230 j \uff0c\u4f8b\u5982 k \u4e3a i \u548c j \u4e4b\u95f4\u7684\u70b9\uff0c i \u5230 k \u7684\u65f6\u5019\u603b\u6cb9\u91cf\u4e00\u5b9a\u662f\u5927\u4e8e\u7b49\u4e8e0\u7684\uff0c\u5982\u679c\u4ece k \u70b9\u5f00\u59cb\uff0c\u8d77\u59cb\u6cb9\u91cf\u4e00\u5b9a\u662f0\uff0c\u90a3\u4e48\u60f3\u4e00\u4e0b\uff0c\u4ece i \u5230 k \u7684\u65f6\u5019\u6cb9\u91cf\u5927\u4e8e\u96f6\u90fd\u65e0\u6cd5\u5230\u8fbe j \uff0c\u90a3\u4e48 k \u5f00\u59cb\u6cb9\u91cf\u4e3a0\uff0c\u5c31\u66f4\u4e0d\u53ef\u80fd\u5230\u8fbe j \u4e86\u3002 \u6240\u4ee5\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u70b9\u65f6\uff0c\u5f53\u524d\u7684\u90ae\u7bb1\u603b\u91cf\u5c0f\u4e8e0\uff0c\u90a3\u5c31\u5c31\u8ba9\u8d77\u59cb\u70b9 start \u4e3a i+1 \uff0c\u7136\u540e tank \uff08\u603b\u6cb9\u91cf\uff09\u91cd\u65b0\u8bbe\u7f6e\u4e3a0\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public int canCompleteCircuit ( int [] gas , int [] cost ) { int n = gas . length ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += gas [ i ] - cost [ i ] ; } // \u603b\u6cb9\u91cf\u5c0f\u4e8e0\uff0c\u8bf4\u660e\u65e0\u89e3 if ( sum < 0 ) return - 1 ; int tank = 0 , start = 0 ; for ( int i = 0 ; i < n ; i ++ ) { tank += gas [ i ] - cost [ i ] ; if ( tank < 0 ) { tank = 0 ; start = i + 1 ; } } return start == n ? 0 : start ; } }","title":"\u8d2a\u5fc3\u7b97\u6cd5"},{"location":"algo/leetcode/daily/2022-01-26/","tags":["Medium","BST","\u4e2d\u5e8f\u904d\u5386"],"text":"1305. All Elements in Two Binary Search Trees - Hard Description \u00b6 1305. All Elements in Two Binary Search Trees Given two binary search trees root1 and root2 , return a list containing all the integers from both trees sorted in ascending order . \u5c31\u662f\u5c06\u4e24\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u5143\u7d20\u5408\u5e76\u5230\u4e00\u4e2alist\u4e2d\u5e76\u4e14\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u3002\u9996\u5148\u6211\u80fd\u60f3\u5230\u7684\u5c31\u662f\u7528\u4e2d\u5e8f\u904d\u5386\u5c06\u4e24\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5347\u5e8f\u653e\u5165\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u518d\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < Integer > getAllElements ( TreeNode root1 , TreeNode root2 ) { // use inorder to generate sorted list for each TreeNode List < Integer > tree1 = new ArrayList (); inorder ( root1 , tree1 ); List < Integer > tree2 = new ArrayList (); inorder ( root2 , tree2 ); int n1 = tree1 . size (), n2 = tree2 . size (); // merge two lists List < Integer > ans = new ArrayList <> (); for ( int i = 0 , j = 0 ; i < n1 || j < n2 ;) { if ( i < n1 && j < n2 ) { if ( tree1 . get ( i ) < tree2 . get ( j )) { ans . add ( tree1 . get ( i ++ )); } else { ans . add ( tree2 . get ( j ++ )); } } else if ( i >= n1 ) { ans . add ( tree2 . get ( j ++ )); } else { ans . add ( tree1 . get ( i ++ )); } } return ans ; } private void inorder ( TreeNode node , List < Integer > list ) { if ( node == null ) return ; inorder ( node . left , list ); list . add ( node . val ); inorder ( node . right , list ); } }","title":"2022/01/26 - 1305. All Elements in Two Binary Search Trees"},{"location":"algo/leetcode/daily/2022-01-26/#description","text":"1305. All Elements in Two Binary Search Trees Given two binary search trees root1 and root2 , return a list containing all the integers from both trees sorted in ascending order . \u5c31\u662f\u5c06\u4e24\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u5143\u7d20\u5408\u5e76\u5230\u4e00\u4e2alist\u4e2d\u5e76\u4e14\u6309\u7167\u5347\u5e8f\u6392\u5e8f\u3002\u9996\u5148\u6211\u80fd\u60f3\u5230\u7684\u5c31\u662f\u7528\u4e2d\u5e8f\u904d\u5386\u5c06\u4e24\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5347\u5e8f\u653e\u5165\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u518d\u5408\u5e76\u4e24\u4e2a\u6570\u7ec4\u3002","title":"Description"},{"location":"algo/leetcode/daily/2022-01-26/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < Integer > getAllElements ( TreeNode root1 , TreeNode root2 ) { // use inorder to generate sorted list for each TreeNode List < Integer > tree1 = new ArrayList (); inorder ( root1 , tree1 ); List < Integer > tree2 = new ArrayList (); inorder ( root2 , tree2 ); int n1 = tree1 . size (), n2 = tree2 . size (); // merge two lists List < Integer > ans = new ArrayList <> (); for ( int i = 0 , j = 0 ; i < n1 || j < n2 ;) { if ( i < n1 && j < n2 ) { if ( tree1 . get ( i ) < tree2 . get ( j )) { ans . add ( tree1 . get ( i ++ )); } else { ans . add ( tree2 . get ( j ++ )); } } else if ( i >= n1 ) { ans . add ( tree2 . get ( j ++ )); } else { ans . add ( tree1 . get ( i ++ )); } } return ans ; } private void inorder ( TreeNode node , List < Integer > list ) { if ( node == null ) return ; inorder ( node . left , list ); list . add ( node . val ); inorder ( node . right , list ); } }","title":"Solution"},{"location":"algo/leetcode/dp/188-best-time-to-buy-and-sell-stock-iv/","tags":["Hard","Dynamic Programming"],"text":"188. Best Time to Buy and Sell Stock IV - Hard \u8fd9\u9053\u9898\u867d\u7136\u8bf4\u662f\u4e00\u9053 Hard \u9898\uff0c\u4f46\u662f\u601d\u60f3\u548c\u5b83\u7684\u524d\u7f6e\u9898\u662f\u4e00\u6837\u7684\u3002\u8be6\u7ec6\u53ef\u4ee5\u53c2\u8003\uff1a 123. Best Time to Buy and Sell Stock III : Solution \u3002 Description \u00b6 188. Best Time to Buy and Sell Stock IV You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k . Find the maximum profit you can achieve. You may complete at most k transactions. Note : You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). Solution \u00b6 \u56e0\u4e3a\u8fd9\u9053\u9898\u548c\u4e70\u5356\u80a1\u7968III\u5f88\u50cf\uff0c\u5c31\u4e0d\u505a\u8fc7\u591a\u7684\u8bf4\u660e\uff0c\u7a0d\u5fae\u8bb2\u4e00\u4e0b\u91cd\u70b9\u3002 \u4e70\u5356\u80a1\u7968III \u4e2d\u8981\u6c42\u6700\u591a\u4e70\u5356\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u4e86 buy1 \u3001 sell1 \u3001 buy2 \u548c sell2 \u56db\u4e2a\u53d8\u91cf\u53bb\u5b58\u50a8\u7b2c\u4e00\u6b21\u4e70\u5356\u548c\u7b2c\u4e8c\u6b21\u4e70\u5356\u6700\u5927\u7684\u6536\u76ca\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e2d\u7684\u4e70\u5356\u6b21\u6570\u4e3a k \u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u786e\u5b9a\u5230\u5e95\u662f\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u4e24\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6570\u7ec4\uff08 buy[k] \u548c sell[k] \uff09\uff0c\u6765\u5b58\u50a8\u4e70\u548c\u5356\u65f6\u7684\u6700\u5927\u6536\u76ca\u3002\u6700\u540e\u603b\u5171\u7684\u6700\u5927\u6536\u76ca\u5c31\u662f sell[k-1] \u3002 \u5728\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u4e0d\u4ec5\u8981\u904d\u5386\u6570\u7ec4 prices \uff0c\u8fd8\u8981\u904d\u5386 k \u6765\u66f4\u6539 buy \u548c sell \u6570\u7ec4\u3002\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n * k) \uff0c\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(k) \u3002 \u4e0b\u9762\u5c31\u6765\u770b\u770b\u4ee3\u7801\u65f6\u600e\u4e48\u5199\u7684\u5427\uff1a Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int maxProfit ( int k , int [] prices ) { int n = prices . length ; if ( k == 0 || n == 0 ) return 0 ; int [] buy = new int [ k ] ; int [] sell = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { buy [ i ] = - prices [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { if ( j == 0 ) { buy [ j ] = Math . max ( buy [ j ] , - prices [ i ] ); sell [ j ] = Math . max ( sell [ j ] , buy [ j ] + prices [ i ] ); } else { buy [ j ] = Math . max ( buy [ j ] , sell [ j - 1 ] - prices [ i ] ); sell [ j ] = Math . max ( sell [ j ] , buy [ j ] + prices [ i ] ); } } } return sell [ k - 1 ] ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 object Solution { def maxProfit ( k : Int , prices : Array [ Int ]): Int = { if ( k == 0 || prices . length == 0 ) return 0 var buy : Array [ Int ] = new Array [ Int ]( k ) var sell : Array [ Int ] = new Array [ Int ]( k ) for ( i <- ( 0 to k - 1 )) { buy ( i ) = - prices ( 0 ) } for ( p <- prices ) { for ( i <- ( 0 to k - 1 )) { if ( i == 0 ) { buy ( i ) = math . max ( buy ( i ), - p ) sell ( i ) = math . max ( sell ( i ), buy ( i ) + p ) } else { buy ( i ) = math . max ( buy ( i ), sell ( i - 1 ) - p ) sell ( i ) = math . max ( sell ( i ), buy ( i ) + p ) } } } return sell ( k - 1 ) } }","title":"188. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a IV"},{"location":"algo/leetcode/dp/188-best-time-to-buy-and-sell-stock-iv/#description","text":"188. Best Time to Buy and Sell Stock IV You are given an integer array prices where prices[i] is the price of a given stock on the ith day, and an integer k . Find the maximum profit you can achieve. You may complete at most k transactions. Note : You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","title":"Description"},{"location":"algo/leetcode/dp/188-best-time-to-buy-and-sell-stock-iv/#solution","text":"\u56e0\u4e3a\u8fd9\u9053\u9898\u548c\u4e70\u5356\u80a1\u7968III\u5f88\u50cf\uff0c\u5c31\u4e0d\u505a\u8fc7\u591a\u7684\u8bf4\u660e\uff0c\u7a0d\u5fae\u8bb2\u4e00\u4e0b\u91cd\u70b9\u3002 \u4e70\u5356\u80a1\u7968III \u4e2d\u8981\u6c42\u6700\u591a\u4e70\u5356\u4e24\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u5b9a\u4e49\u4e86 buy1 \u3001 sell1 \u3001 buy2 \u548c sell2 \u56db\u4e2a\u53d8\u91cf\u53bb\u5b58\u50a8\u7b2c\u4e00\u6b21\u4e70\u5356\u548c\u7b2c\u4e8c\u6b21\u4e70\u5356\u6700\u5927\u7684\u6536\u76ca\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u4e2d\u7684\u4e70\u5356\u6b21\u6570\u4e3a k \u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u786e\u5b9a\u5230\u5e95\u662f\u591a\u5c11\u6b21\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u4e24\u4e2a\u957f\u5ea6\u4e3a k \u7684\u6570\u7ec4\uff08 buy[k] \u548c sell[k] \uff09\uff0c\u6765\u5b58\u50a8\u4e70\u548c\u5356\u65f6\u7684\u6700\u5927\u6536\u76ca\u3002\u6700\u540e\u603b\u5171\u7684\u6700\u5927\u6536\u76ca\u5c31\u662f sell[k-1] \u3002 \u5728\u4ee3\u7801\u5b9e\u73b0\u4e2d\uff0c\u4e0d\u4ec5\u8981\u904d\u5386\u6570\u7ec4 prices \uff0c\u8fd8\u8981\u904d\u5386 k \u6765\u66f4\u6539 buy \u548c sell \u6570\u7ec4\u3002\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(n * k) \uff0c\u989d\u5916\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f O(k) \u3002 \u4e0b\u9762\u5c31\u6765\u770b\u770b\u4ee3\u7801\u65f6\u600e\u4e48\u5199\u7684\u5427\uff1a Java Scala 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Solution { public int maxProfit ( int k , int [] prices ) { int n = prices . length ; if ( k == 0 || n == 0 ) return 0 ; int [] buy = new int [ k ] ; int [] sell = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { buy [ i ] = - prices [ 0 ] ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < k ; j ++ ) { if ( j == 0 ) { buy [ j ] = Math . max ( buy [ j ] , - prices [ i ] ); sell [ j ] = Math . max ( sell [ j ] , buy [ j ] + prices [ i ] ); } else { buy [ j ] = Math . max ( buy [ j ] , sell [ j - 1 ] - prices [ i ] ); sell [ j ] = Math . max ( sell [ j ] , buy [ j ] + prices [ i ] ); } } } return sell [ k - 1 ] ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 object Solution { def maxProfit ( k : Int , prices : Array [ Int ]): Int = { if ( k == 0 || prices . length == 0 ) return 0 var buy : Array [ Int ] = new Array [ Int ]( k ) var sell : Array [ Int ] = new Array [ Int ]( k ) for ( i <- ( 0 to k - 1 )) { buy ( i ) = - prices ( 0 ) } for ( p <- prices ) { for ( i <- ( 0 to k - 1 )) { if ( i == 0 ) { buy ( i ) = math . max ( buy ( i ), - p ) sell ( i ) = math . max ( sell ( i ), buy ( i ) + p ) } else { buy ( i ) = math . max ( buy ( i ), sell ( i - 1 ) - p ) sell ( i ) = math . max ( sell ( i ), buy ( i ) + p ) } } } return sell ( k - 1 ) } }","title":"Solution"},{"location":"algo/leetcode/dp/309-best-time-to-buy-and-sell-stock-with-cooldown/","tags":["Medium","DP"],"text":"309. Best Time to Buy and Sell Stock with Cooldown - Hard Description \u00b6 309. Best Time to Buy and Sell Stock with Cooldown You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Note : You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). \u9898\u610f\u5927\u81f4\u662f\u4f60\u53ef\u4ee5\u4e70\u5356\u4efb\u610f\u6b21\u6570\u7684\u80a1\u7968\uff0c\u4f46\u662f\u4e70\u4e4b\u524d\u5fc5\u987b\u5f97\u5356\u6389\u4e0a\u6b21\u4e70\u7684\u80a1\u7968\uff0c\u800c\u4e14\u4e24\u6b21\u4e70\u5356\u4e4b\u95f4\u6709\u4e00\u5929\u7684\u51b7\u51bb\u671f\uff0c\u6c42\u6700\u5927\u7684\u6536\u76ca\u3002 \u4e70\u5356\u80a1\u7968\u8fd9\u9053\u9898\u90fd\u662f\u901a\u7528\u7684\uff0c\u5c31\u662f\u770b\u4f60\u8fd9\u5929\u662f\u624b\u4e0a\u6709\u65e0\u80a1\u7968\uff1a \u8fd9\u5929\u624b\u4e0a\u6709\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6709\u80a1\u7968\u4eca\u5929\u4e0d\u5356 \u4e24\u5929\u524d\u624b\u4e0a\u7684\u80a1\u7968\u5356\u4e86\uff0c\u4eca\u5929\u4e70\u5165\u80a1\u7968 \u8fd9\u5929\u624b\u4e0a\u65e0\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6ca1\u6709\u80a1\u7968\u5207\u4eca\u5929\u6ca1\u6709\u4e70\u5165\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6709\u80a1\u7968\u4eca\u5929\u5356\u4e86 \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4 dp[n][2] \u6765\u8868\u793a\u6bcf\u5929\u7684\u72b6\u6001\uff0c\u5176\u4e2d n \u4ee3\u8868\u7b2c\u51e0\u5929\uff0c 2 \u4ee3\u8868\u4e86\u4eca\u5929\u624b\u4e0a\u6709\u80a1\u7968\u548c\u65e0\u80a1\u7968\u7684\u4e24\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u72b6\u6001\u65b9\u7a0b\u4e86\uff1a 1 2 dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , dp [ i - 2 ][ 0 ] - prices [ i ] ); \u4e0a\u9762\u7684\u65b9\u7a0b\u9700\u8981\u8003\u8651\u4e24\u4e2a\u60c5\u51b5\uff0c\u7b2c\u4e00\u5929\u548c\u7b2c\u4e8c\u5929\uff0c\u7b2c\u4e00\u5929\u6ca1\u6709\u524d\u4e00\u5929\u6240\u4ee5 dp[0][0] = 0; dp[0][1] = -prices[0] \uff0c\u7b2c\u4e8c\u5929\u5219\u662f dp[1][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[1]; dp[1][1] = Math.max(dp[0][1], -prices[1]) \u3002 \u6362\u6210\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5219\u662f\uff1a 1 2 3 4 5 6 7 // \u7b2c\u4e00\u5929 dp [ i ][ 0 ] = 0 ; dp [ i ][ 1 ] = - prices [ i ] ; // \u7b2c\u4e8c\u5929\u7684\u60c5\u51b5 dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , - prices [ i ] ); \u800c\u6700\u5927\u6536\u76ca\u5c31\u662f\u6700\u540e\u4e00\u5929\u624b\u4e0a\u4e0d\u6301\u80a1\u65f6\u7684\u503c\u4e5f\u5c31\u662f dp[n - 1][0] \u3002 Solution \u00b6 \u7ecf\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int maxProfit ( int [] prices ) { int n = prices . length ; int [][] dp = new int [ n ][ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { dp [ i ][ 0 ] = 0 ; dp [ i ][ 1 ] = - prices [ i ] ; continue ; } if ( i == 1 ) { dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , - prices [ i ] ); continue ; } dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , dp [ i - 2 ][ 0 ] - prices [ i ] ); } return dp [ n - 1 ][ 0 ] ; } }","title":"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f"},{"location":"algo/leetcode/dp/309-best-time-to-buy-and-sell-stock-with-cooldown/#description","text":"309. Best Time to Buy and Sell Stock with Cooldown You are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). Note : You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again). \u9898\u610f\u5927\u81f4\u662f\u4f60\u53ef\u4ee5\u4e70\u5356\u4efb\u610f\u6b21\u6570\u7684\u80a1\u7968\uff0c\u4f46\u662f\u4e70\u4e4b\u524d\u5fc5\u987b\u5f97\u5356\u6389\u4e0a\u6b21\u4e70\u7684\u80a1\u7968\uff0c\u800c\u4e14\u4e24\u6b21\u4e70\u5356\u4e4b\u95f4\u6709\u4e00\u5929\u7684\u51b7\u51bb\u671f\uff0c\u6c42\u6700\u5927\u7684\u6536\u76ca\u3002 \u4e70\u5356\u80a1\u7968\u8fd9\u9053\u9898\u90fd\u662f\u901a\u7528\u7684\uff0c\u5c31\u662f\u770b\u4f60\u8fd9\u5929\u662f\u624b\u4e0a\u6709\u65e0\u80a1\u7968\uff1a \u8fd9\u5929\u624b\u4e0a\u6709\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6709\u80a1\u7968\u4eca\u5929\u4e0d\u5356 \u4e24\u5929\u524d\u624b\u4e0a\u7684\u80a1\u7968\u5356\u4e86\uff0c\u4eca\u5929\u4e70\u5165\u80a1\u7968 \u8fd9\u5929\u624b\u4e0a\u65e0\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6ca1\u6709\u80a1\u7968\u5207\u4eca\u5929\u6ca1\u6709\u4e70\u5165\u80a1\u7968 \u524d\u4e00\u5929\u624b\u4e0a\u6709\u80a1\u7968\u4eca\u5929\u5356\u4e86 \u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4 dp[n][2] \u6765\u8868\u793a\u6bcf\u5929\u7684\u72b6\u6001\uff0c\u5176\u4e2d n \u4ee3\u8868\u7b2c\u51e0\u5929\uff0c 2 \u4ee3\u8868\u4e86\u4eca\u5929\u624b\u4e0a\u6709\u80a1\u7968\u548c\u65e0\u80a1\u7968\u7684\u4e24\u4e2a\u72b6\u6001\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5199\u51fa\u72b6\u6001\u65b9\u7a0b\u4e86\uff1a 1 2 dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , dp [ i - 2 ][ 0 ] - prices [ i ] ); \u4e0a\u9762\u7684\u65b9\u7a0b\u9700\u8981\u8003\u8651\u4e24\u4e2a\u60c5\u51b5\uff0c\u7b2c\u4e00\u5929\u548c\u7b2c\u4e8c\u5929\uff0c\u7b2c\u4e00\u5929\u6ca1\u6709\u524d\u4e00\u5929\u6240\u4ee5 dp[0][0] = 0; dp[0][1] = -prices[0] \uff0c\u7b2c\u4e8c\u5929\u5219\u662f dp[1][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[1]; dp[1][1] = Math.max(dp[0][1], -prices[1]) \u3002 \u6362\u6210\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u5219\u662f\uff1a 1 2 3 4 5 6 7 // \u7b2c\u4e00\u5929 dp [ i ][ 0 ] = 0 ; dp [ i ][ 1 ] = - prices [ i ] ; // \u7b2c\u4e8c\u5929\u7684\u60c5\u51b5 dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , - prices [ i ] ); \u800c\u6700\u5927\u6536\u76ca\u5c31\u662f\u6700\u540e\u4e00\u5929\u624b\u4e0a\u4e0d\u6301\u80a1\u65f6\u7684\u503c\u4e5f\u5c31\u662f dp[n - 1][0] \u3002","title":"Description"},{"location":"algo/leetcode/dp/309-best-time-to-buy-and-sell-stock-with-cooldown/#solution","text":"\u7ecf\u8fc7\u4e0a\u9762\u7684\u5206\u6790\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u51fa\u4ee3\u7801\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 class Solution { public int maxProfit ( int [] prices ) { int n = prices . length ; int [][] dp = new int [ n ][ 2 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 0 ) { dp [ i ][ 0 ] = 0 ; dp [ i ][ 1 ] = - prices [ i ] ; continue ; } if ( i == 1 ) { dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , - prices [ i ] ); continue ; } dp [ i ][ 0 ] = Math . max ( dp [ i - 1 ][ 0 ] , dp [ i - 1 ][ 1 ] + prices [ i ] ); dp [ i ][ 1 ] = Math . max ( dp [ i - 1 ][ 1 ] , dp [ i - 2 ][ 0 ] - prices [ i ] ); } return dp [ n - 1 ][ 0 ] ; } }","title":"Solution"},{"location":"algo/leetcode/string/6-zigzag-conversion/","tags":["Medium","String"],"text":"6. Zigzag Conversion - Medium Description \u00b6 6. Zigzag Conversion The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) 1 2 3 P A H N A P L S I I G Y I R And then read line by line: \"PAHNAPLSIIGYIR\" Write the code that will take a string and make this conversion given a number of rows: 1 string convert(string s, int numRows); \u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u7ecf\u5178\u4e86\uff0c\u627e\u5230\u89c4\u5f8b\u9a6c\u4e0a\u5c31\u89e3\u51b3\u4e86\u3002 Solution \u00b6 \u9996\u5148\u5f53 numRows = 1 \u65f6\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u5904\u7406\uff0c\u76f4\u63a5\u8fd4\u56de s \u5c31\u884c\u4e86\uff1b \u5982\u679c numRows > 1 \u65f6\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u628a\u5b57\u7b26\u4e32\u5206\u6210 numRows \u884c\u4e86","title":"6. Zigzag Conversion"},{"location":"algo/leetcode/string/6-zigzag-conversion/#description","text":"6. Zigzag Conversion The string \"PAYPALISHIRING\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) 1 2 3 P A H N A P L S I I G Y I R And then read line by line: \"PAHNAPLSIIGYIR\" Write the code that will take a string and make this conversion given a number of rows: 1 string convert(string s, int numRows); \u8fd9\u9053\u9898\u8fd8\u662f\u6bd4\u8f83\u7ecf\u5178\u4e86\uff0c\u627e\u5230\u89c4\u5f8b\u9a6c\u4e0a\u5c31\u89e3\u51b3\u4e86\u3002","title":"Description"},{"location":"algo/leetcode/string/6-zigzag-conversion/#solution","text":"\u9996\u5148\u5f53 numRows = 1 \u65f6\uff0c\u90a3\u4e48\u5c31\u4e0d\u7528\u5904\u7406\uff0c\u76f4\u63a5\u8fd4\u56de s \u5c31\u884c\u4e86\uff1b \u5982\u679c numRows > 1 \u65f6\uff0c\u90a3\u6211\u4eec\u5c31\u9700\u8981\u628a\u5b57\u7b26\u4e32\u5206\u6210 numRows \u884c\u4e86","title":"Solution"},{"location":"algo/leetcode/string/string-to-integer-atoi/","tags":["Leetcode","Medium","String"],"text":"8. String to Integer (atoi) - Medium Problem Description \u00b6 8. String to Integer (atoi) Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function). The algorithm for myAtoi(string s) is as follows: Read in and ignore any leading whitespace. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. Convert these digits into an integer (i.e. \"123\" -> 123 , \"0032\" -> 32 ). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2). If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1] , then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31 , and integers greater than 2^31 - 1 should be clamped to 2^31 - 1 . Return the integer as the final result. Note: Only the space character ' ' is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits. Solution \u00b6 \u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\uff0c\u6309\u7167\u9898\u76ee\u4e0a\u7684\u610f\u601d\uff0c\u5148\u5ffd\u7565\u7a7a\u683c\uff0c\u518d\u5224\u65ad\u7a7a\u683c\u4e4b\u540e\u7684\u662f\u4e0d\u662f\u52a0\u51cf\u53f7\uff0c\u7136\u540e\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u5b57\u7b26\uff0c\u6761\u4ef6\u662f\u5fc5\u987b\u5728 0 \u5230 9 \u4e4b\u95f4\uff0c\u5426\u5219\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\uff0c\u8fd4\u56de\u7b54\u6848\u3002 \u5728\u5faa\u73af\u4e2d\uff0c\u5c06 Integer.MAX_VALUE / 10 \u4e0e\u6bcf\u6b21\u7b97\u51fa\u6765\u7684\u503c\u6bd4\u8f83\uff0c\u5224\u65ad\u503c\u4f1a\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u5982\u679c\u6709\u6ea2\u51fa\uff0c\u5c31\u6839\u636e\u60c5\u51b5\u8fd4\u56de Integer.MAX_VALUE \u6216 Integer.MIN_VALUE \u3002 Go \u7a0d\u5fae\u6709\u4e00\u4e9b\u7279\u6b8a\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230 int32 \u7684\u6700\u5927\u503c\uff0c\u800c\u9ed8\u8ba4\u7684 int \u7684\u6700\u5927\u503c\u4e3a int64 \u7684\u6700\u5927\u503c\u3002\u6240\u4ee5\u6211\u4eec\u63d0\u524d\u5b9a\u4e49\u597d\u8fd9\u4e9b\u9700\u8981\u7528\u5230\u7684\u503c\u4e3a\u5e38\u91cf\u3002 Java Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int myAtoi ( String s ) { int n = s . length (); if ( n == 0 ) return 0 ; char [] charArr = s . toCharArray (); int index = 0 ; // remove spaces while ( index < n && charArr [ index ] == ' ' ) index ++ ; boolean negative = false ; int ans = 0 ; if ( index < n ) { if ( charArr [ index ] == '-' || charArr [ index ] == '+' ) { negative = charArr [ index ] == '-' ? true : false ; index ++ ; } while ( index < n && charArr [ index ] >= '0' && charArr [ index ] <= '9' ) { int num = charArr [ index ] - '0' ; int next = ans * 10 + num ; if ( Integer . MAX_VALUE / 10 < ans || ( Integer . MAX_VALUE / 10 == ans && Integer . MAX_VALUE % 10 < num )) { return negative ? Integer . MIN_VALUE : Integer . MAX_VALUE ; } ans = next ; index ++ ; } } return negative ? - ans : ans ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const MaxUint = ^ uint32 ( 0 ) const MinUint = 0 const MaxInt = int ( MaxUint >> 1 ) const MinInt = - MaxInt - 1 func myAtoi ( s string ) int { n := len ( s ) idx := 0 for idx < n && s [ idx ] == ' ' { idx ++ } if idx >= n { return 0 } var neg bool = false if s [ idx ] == '+' || s [ idx ] == '-' { if s [ idx ] == '-' { neg = true } idx ++ } ans := 0 for idx < n && s [ idx ] >= '0' && s [ idx ] <= '9' { num := int ( s [ idx ] - '0' ) if MaxInt / 10 < ans || ( MaxInt / 10 == ans && MaxInt % 10 < num ) { if neg { return MinInt } else { return MaxInt } } ans = ans * 10 + num idx ++ } if neg { return - ans } else { return ans } }","title":"8. String to Integer (atoi)"},{"location":"algo/leetcode/string/string-to-integer-atoi/#problem-description","text":"8. String to Integer (atoi) Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function). The algorithm for myAtoi(string s) is as follows: Read in and ignore any leading whitespace. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. Convert these digits into an integer (i.e. \"123\" -> 123 , \"0032\" -> 32 ). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2). If the integer is out of the 32-bit signed integer range [-2^31, 2^31 - 1] , then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31 , and integers greater than 2^31 - 1 should be clamped to 2^31 - 1 . Return the integer as the final result. Note: Only the space character ' ' is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.","title":"Problem Description"},{"location":"algo/leetcode/string/string-to-integer-atoi/#solution","text":"\u7b80\u5355\u7684\u5b57\u7b26\u4e32\u8f6c\u6570\u5b57\uff0c\u6309\u7167\u9898\u76ee\u4e0a\u7684\u610f\u601d\uff0c\u5148\u5ffd\u7565\u7a7a\u683c\uff0c\u518d\u5224\u65ad\u7a7a\u683c\u4e4b\u540e\u7684\u662f\u4e0d\u662f\u52a0\u51cf\u53f7\uff0c\u7136\u540e\u5f00\u59cb\u904d\u5386\u5269\u4e0b\u7684\u5b57\u7b26\uff0c\u6761\u4ef6\u662f\u5fc5\u987b\u5728 0 \u5230 9 \u4e4b\u95f4\uff0c\u5426\u5219\u76f4\u63a5\u8df3\u51fa\u5faa\u73af\uff0c\u8fd4\u56de\u7b54\u6848\u3002 \u5728\u5faa\u73af\u4e2d\uff0c\u5c06 Integer.MAX_VALUE / 10 \u4e0e\u6bcf\u6b21\u7b97\u51fa\u6765\u7684\u503c\u6bd4\u8f83\uff0c\u5224\u65ad\u503c\u4f1a\u4e0d\u4f1a\u6ea2\u51fa\uff0c\u5982\u679c\u6709\u6ea2\u51fa\uff0c\u5c31\u6839\u636e\u60c5\u51b5\u8fd4\u56de Integer.MAX_VALUE \u6216 Integer.MIN_VALUE \u3002 Go \u7a0d\u5fae\u6709\u4e00\u4e9b\u7279\u6b8a\uff0c\u8fd9\u91cc\u6211\u4eec\u9700\u8981\u7528\u5230 int32 \u7684\u6700\u5927\u503c\uff0c\u800c\u9ed8\u8ba4\u7684 int \u7684\u6700\u5927\u503c\u4e3a int64 \u7684\u6700\u5927\u503c\u3002\u6240\u4ee5\u6211\u4eec\u63d0\u524d\u5b9a\u4e49\u597d\u8fd9\u4e9b\u9700\u8981\u7528\u5230\u7684\u503c\u4e3a\u5e38\u91cf\u3002 Java Golang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public int myAtoi ( String s ) { int n = s . length (); if ( n == 0 ) return 0 ; char [] charArr = s . toCharArray (); int index = 0 ; // remove spaces while ( index < n && charArr [ index ] == ' ' ) index ++ ; boolean negative = false ; int ans = 0 ; if ( index < n ) { if ( charArr [ index ] == '-' || charArr [ index ] == '+' ) { negative = charArr [ index ] == '-' ? true : false ; index ++ ; } while ( index < n && charArr [ index ] >= '0' && charArr [ index ] <= '9' ) { int num = charArr [ index ] - '0' ; int next = ans * 10 + num ; if ( Integer . MAX_VALUE / 10 < ans || ( Integer . MAX_VALUE / 10 == ans && Integer . MAX_VALUE % 10 < num )) { return negative ? Integer . MIN_VALUE : Integer . MAX_VALUE ; } ans = next ; index ++ ; } } return negative ? - ans : ans ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 const MaxUint = ^ uint32 ( 0 ) const MinUint = 0 const MaxInt = int ( MaxUint >> 1 ) const MinInt = - MaxInt - 1 func myAtoi ( s string ) int { n := len ( s ) idx := 0 for idx < n && s [ idx ] == ' ' { idx ++ } if idx >= n { return 0 } var neg bool = false if s [ idx ] == '+' || s [ idx ] == '-' { if s [ idx ] == '-' { neg = true } idx ++ } ans := 0 for idx < n && s [ idx ] >= '0' && s [ idx ] <= '9' { num := int ( s [ idx ] - '0' ) if MaxInt / 10 < ans || ( MaxInt / 10 == ans && MaxInt % 10 < num ) { if neg { return MinInt } else { return MaxInt } } ans = ans * 10 + num idx ++ } if neg { return - ans } else { return ans } }","title":"Solution"},{"location":"algo/leetcode/tree/102-binary-tree-level-order-traversal/","tags":["Medium","Level Order Traversal"],"text":"102. Binary Tree Level Order Traversal - Medium Description \u00b6 102. Binary Tree Level Order Traversal Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level). Example 1 : Input : root = [3,9,20,null,null,15,7] Output : [[3],[9,20],[15,7]] \u8fd9\u9053\u9898\u5f88\u7ecf\u5178\u7684\u4e00\u9053\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u5957\u7528BFS\u6a21\u7248\u5c31\u884c\u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> levelOrder ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); List < List < Integer >> ans = new ArrayList <> (); while ( ! q . isEmpty ()) { int size = q . size (); List < Integer > level = new ArrayList <> (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); level . add ( node . val ); if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } ans . add ( level ); } return ans ; } }","title":"102. Binary Tree Level Order Traversal"},{"location":"algo/leetcode/tree/102-binary-tree-level-order-traversal/#description","text":"102. Binary Tree Level Order Traversal Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level). Example 1 : Input : root = [3,9,20,null,null,15,7] Output : [[3],[9,20],[15,7]] \u8fd9\u9053\u9898\u5f88\u7ecf\u5178\u7684\u4e00\u9053\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u5957\u7528BFS\u6a21\u7248\u5c31\u884c\u3002","title":"Description"},{"location":"algo/leetcode/tree/102-binary-tree-level-order-traversal/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> levelOrder ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); List < List < Integer >> ans = new ArrayList <> (); while ( ! q . isEmpty ()) { int size = q . size (); List < Integer > level = new ArrayList <> (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); level . add ( node . val ); if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } ans . add ( level ); } return ans ; } }","title":"Solution"},{"location":"algo/leetcode/tree/103-binary-tree-zigzag-level-order-traversal/","tags":["Medium","Level Order Traversal"],"text":"103. Binary Tree Zigzag Level Order Traversal - Medium Description \u00b6 103. Binary Tree Zigzag Level Order Traversal Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). Example 1 : Input: root = [3,9,20,null,null,15,7] Output: [[3],[20,9],[15,7]] \u8fd8\u662f\u4e00\u6837\u7684\u601d\u8def\uff0c\u5c42\u5e8f\u904d\u5386\uff0c\u52a0\u4e00\u4e2a\u53d8\u91cf\u6765\u63a7\u5236\u65b9\u5411\u5c31\u884c\u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> zigzagLevelOrder ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Deque < TreeNode > q = new LinkedList <> (); List < List < Integer >> ans = new ArrayList <> (); q . offer ( root ); boolean f = true ; while ( ! q . isEmpty ()) { int size = q . size (); LinkedList < Integer > list = new LinkedList (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); if ( f ) { list . addLast ( node . val ); } else { list . addFirst ( node . val ); } if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } f = ! f ; ans . add ( list ); } return ans ; } }","title":"103. Binary Tree Zigzag Level Order Traversal"},{"location":"algo/leetcode/tree/103-binary-tree-zigzag-level-order-traversal/#description","text":"103. Binary Tree Zigzag Level Order Traversal Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between). Example 1 : Input: root = [3,9,20,null,null,15,7] Output: [[3],[20,9],[15,7]] \u8fd8\u662f\u4e00\u6837\u7684\u601d\u8def\uff0c\u5c42\u5e8f\u904d\u5386\uff0c\u52a0\u4e00\u4e2a\u53d8\u91cf\u6765\u63a7\u5236\u65b9\u5411\u5c31\u884c\u3002","title":"Description"},{"location":"algo/leetcode/tree/103-binary-tree-zigzag-level-order-traversal/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> zigzagLevelOrder ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Deque < TreeNode > q = new LinkedList <> (); List < List < Integer >> ans = new ArrayList <> (); q . offer ( root ); boolean f = true ; while ( ! q . isEmpty ()) { int size = q . size (); LinkedList < Integer > list = new LinkedList (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); if ( f ) { list . addLast ( node . val ); } else { list . addFirst ( node . val ); } if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } f = ! f ; ans . add ( list ); } return ans ; } }","title":"Solution"},{"location":"algo/leetcode/tree/107-binary-tree-level-order-traversal-ii/","tags":["Medium","Level Order Traversal"],"text":"107. Binary Tree Level Order Traversal II - Medium 102. Binary Tree Level Order Traversal \u7684 follow up\u3002\u5bf9\u4e8e\u5c42\u5e8f\u904d\u5386\u4e0d\u592a\u4e86\u89e3\u7684\u540c\u5b66\u53ef\u4ee5\u70b9\u51fb\u524d\u9762\u94fe\u63a5\u770b\u770b\u9898\u89e3\u54e6\u3002 Description \u00b6 107. Binary Tree Level Order Traversal II Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root). Example 1 : Input : root = [3,9,20,null,null,15,7] Output : [[15,7],[9,20],[3]] \u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4ece\u540e\u5f80\u524d\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u7528\u5148\u8fdb\u540e\u51fa\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff0c\u6bd4\u5982\u8bf4 Stack \u3002 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> levelOrderBottom ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Stack < List < Integer >> stack = new Stack <> (); Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); while ( ! q . isEmpty ()) { int size = q . size (); List < Integer > l = new ArrayList <> (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); l . add ( node . val ); if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } stack . push ( l ); } List < List < Integer >> ans = new ArrayList <> (); while ( ! stack . isEmpty ()) { ans . add ( stack . pop ()); } return ans ; } }","title":"107. Binary Tree Level Order Traversal II"},{"location":"algo/leetcode/tree/107-binary-tree-level-order-traversal-ii/#description","text":"107. Binary Tree Level Order Traversal II Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root). Example 1 : Input : root = [3,9,20,null,null,15,7] Output : [[15,7],[9,20],[3]] \u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4ece\u540e\u5f80\u524d\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u7528\u5148\u8fdb\u540e\u51fa\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\u5c31\u53ef\u4ee5\u5b9e\u73b0\uff0c\u6bd4\u5982\u8bf4 Stack \u3002","title":"Description"},{"location":"algo/leetcode/tree/107-binary-tree-level-order-traversal-ii/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public List < List < Integer >> levelOrderBottom ( TreeNode root ) { if ( root == null ) return new ArrayList <> (); Stack < List < Integer >> stack = new Stack <> (); Deque < TreeNode > q = new LinkedList <> (); q . offer ( root ); while ( ! q . isEmpty ()) { int size = q . size (); List < Integer > l = new ArrayList <> (); for ( int i = 0 ; i < size ; i ++ ) { TreeNode node = q . poll (); l . add ( node . val ); if ( node . left != null ) q . offer ( node . left ); if ( node . right != null ) q . offer ( node . right ); } stack . push ( l ); } List < List < Integer >> ans = new ArrayList <> (); while ( ! stack . isEmpty ()) { ans . add ( stack . pop ()); } return ans ; } }","title":"Solution"},{"location":"algo/leetcode/tree/701-insert-into-a-binary-search-tree/","tags":["Medium","BST"],"text":"701. Insert into a Binary Search Tree - Medium \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u9898\u76ee\u90fd\u5927\u540c\u5c0f\u5f02\uff0c\u57fa\u672c\u4e0a\u4e00\u4e2a\u6a21\u7248\u5c31\u80fd\u641e\u5b9a\u3002 Description \u00b6 701. Insert into a Binary Search Tree You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion . It is guaranteed that the new value does not exist in the original BST. Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them . \u9898\u610f\u5c31\u662f\u8ba9\u6211\u4eec\u5c06\u4e00\u4e2a\u6570\u63d2\u5165\u5230\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u56e0\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7279\u6027\uff0c\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u4e0a\u6a21\u7248\u3002\u4e00\u822c\u9012\u5f52\u5c31\u80fd\u89e3\u51b3 Solution \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode insertIntoBST ( TreeNode root , int val ) { if ( root == null ) return new TreeNode ( val ); insert ( root , val ); return root ; } private void insert ( TreeNode node , int val ) { if ( node . val < val ) { if ( node . right != null ) { insert ( node . right , val ); } else { node . right = new TreeNode ( val ); } } else { if ( node . left != null ) { insert ( node . left , val ); } else { node . left = new TreeNode ( val ); } } } }","title":"701. Insert into a Binary Search Tree"},{"location":"algo/leetcode/tree/701-insert-into-a-binary-search-tree/#description","text":"701. Insert into a Binary Search Tree You are given the root node of a binary search tree (BST) and a value to insert into the tree. Return the root node of the BST after the insertion . It is guaranteed that the new value does not exist in the original BST. Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them . \u9898\u610f\u5c31\u662f\u8ba9\u6211\u4eec\u5c06\u4e00\u4e2a\u6570\u63d2\u5165\u5230\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\uff0c\u56e0\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7279\u6027\uff0c\u8fd9\u9053\u9898\u5c31\u5f88\u7b80\u5355\u4e86\uff0c\u76f4\u63a5\u4e0a\u6a21\u7248\u3002\u4e00\u822c\u9012\u5f52\u5c31\u80fd\u89e3\u51b3","title":"Description"},{"location":"algo/leetcode/tree/701-insert-into-a-binary-search-tree/#solution","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public TreeNode insertIntoBST ( TreeNode root , int val ) { if ( root == null ) return new TreeNode ( val ); insert ( root , val ); return root ; } private void insert ( TreeNode node , int val ) { if ( node . val < val ) { if ( node . right != null ) { insert ( node . right , val ); } else { node . right = new TreeNode ( val ); } } else { if ( node . left != null ) { insert ( node . left , val ); } else { node . left = new TreeNode ( val ); } } } }","title":"Solution"},{"location":"algo/leetcode/tree/98-validate-binary-search-tree/","tags":["Medium","BST"],"text":"98. Validate Binary Search Tree - Medium Description \u00b6 98. Validate Binary Search Tree Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. Example 1 : Input : root = [2,1,3] Output : true \u8fd9\u9053\u9898\u662f\u8981\u6211\u4eec\u9a8c\u8bc1\u4e00\u68f5\u6811\u662f\u5426\u4e3a \u4e8c\u53c9\u641c\u7d22\u6811 \u3002\u8bf7\u67e5\u770b\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c\u4e00\uff0c\u7136\u540e\u5f88\u5feb\u5c31\u80fd\u60f3\u51fa\u6765\u600e\u4e48\u624d\u80fd\u9a8c\u8bc1\u4e00\u68f5\u6811\u662f\u5426\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u3002 Solution \u00b6 \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u50a8\u5b58\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u503c\uff0c\u56e0\u4e3a\u9700\u8981\u4e0e\u5b50\u8282\u70b9\u6bd4\u8f83\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811 [5,1,4,null,null,3,6] \uff0c\u904d\u5386\u5230\u5143\u7d20 4 \u65f6\uff0c\u9700\u8981\u53bb\u5224\u65ad\u5b83\u7684\u5de6\u5b50\u6811\u8282\u70b9( 3 )\u662f\u5426\u4e5f\u5927\u4e8e\u5b83\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u624d\u80fd\u5b8c\u6574\u7684\u8bc1\u660e\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u5408\u6cd5\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6700\u5927\u503c\u548c\u4e00\u4e2a\u6700\u5c0f\u503c\u6765\u7ea6\u675f\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5982\u679c\u4e0d\u7b26\u5408\uff0c\u90a3\u8bf4\u660e\u4e0d\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isValidBST ( TreeNode root ) { return isValidBST ( root , null , null ); } private boolean isValidBST ( TreeNode root , TreeNode min , TreeNode max ) { if ( root == null ) return true ; if ( min != null && root . val <= min . val ) return false ; if ( max != null && root . val >= max . val ) return false ; return isValidBST ( root . left , min , root ) && isValidBST ( root . right , root , max ); } }","title":"98. Validate Binary Search Tree"},{"location":"algo/leetcode/tree/98-validate-binary-search-tree/#description","text":"98. Validate Binary Search Tree Given the root of a binary tree, determine if it is a valid binary search tree (BST). A valid BST is defined as follows: The left subtree of a node contains only nodes with keys less than the node's key. The right subtree of a node contains only nodes with keys greater than the node's key. Both the left and right subtrees must also be binary search trees. Example 1 : Input : root = [2,1,3] Output : true \u8fd9\u9053\u9898\u662f\u8981\u6211\u4eec\u9a8c\u8bc1\u4e00\u68f5\u6811\u662f\u5426\u4e3a \u4e8c\u53c9\u641c\u7d22\u6811 \u3002\u8bf7\u67e5\u770b\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2c\u4e00\uff0c\u7136\u540e\u5f88\u5feb\u5c31\u80fd\u60f3\u51fa\u6765\u600e\u4e48\u624d\u80fd\u9a8c\u8bc1\u4e00\u68f5\u6811\u662f\u5426\u4e3a\u4e8c\u53c9\u641c\u7d22\u6811\u3002","title":"Description"},{"location":"algo/leetcode/tree/98-validate-binary-search-tree/#solution","text":"\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u50a8\u5b58\u5f53\u524d\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u503c\uff0c\u56e0\u4e3a\u9700\u8981\u4e0e\u5b50\u8282\u70b9\u6bd4\u8f83\u3002\u4f8b\u5982\uff1a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811 [5,1,4,null,null,3,6] \uff0c\u904d\u5386\u5230\u5143\u7d20 4 \u65f6\uff0c\u9700\u8981\u53bb\u5224\u65ad\u5b83\u7684\u5de6\u5b50\u6811\u8282\u70b9( 3 )\u662f\u5426\u4e5f\u5927\u4e8e\u5b83\u7684\u7236\u8282\u70b9\uff0c\u8fd9\u6837\u624d\u80fd\u5b8c\u6574\u7684\u8bc1\u660e\u8fd9\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u662f\u5408\u6cd5\u7684\u3002 \u6240\u4ee5\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6700\u5927\u503c\u548c\u4e00\u4e2a\u6700\u5c0f\u503c\u6765\u7ea6\u675f\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u5404\u4e2a\u8282\u70b9\u7684\u503c\uff0c\u5982\u679c\u4e0d\u7b26\u5408\uff0c\u90a3\u8bf4\u660e\u4e0d\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */ class Solution { public boolean isValidBST ( TreeNode root ) { return isValidBST ( root , null , null ); } private boolean isValidBST ( TreeNode root , TreeNode min , TreeNode max ) { if ( root == null ) return true ; if ( min != null && root . val <= min . val ) return false ; if ( max != null && root . val >= max . val ) return false ; return isValidBST ( root . left , min , root ) && isValidBST ( root . right , root , max ); } }","title":"Solution"},{"location":"bigdata/","tags":["Big Data"],"text":"\u5927\u6570\u636e\u76f8\u5173\u7ec4\u4ef6 \u00b6 Distributed File System: Hadoop, HDFS Distributed Coordinator: Zookeeper Streaming: Spark Streaming, Flink, Kafka Streams Database: Cassandra, HBase, MongoDB, Hive ...","title":"\u7b80\u4ecb"},{"location":"bigdata/#_1","text":"Distributed File System: Hadoop, HDFS Distributed Coordinator: Zookeeper Streaming: Spark Streaming, Flink, Kafka Streams Database: Cassandra, HBase, MongoDB, Hive ...","title":"\u5927\u6570\u636e\u76f8\u5173\u7ec4\u4ef6"},{"location":"bigdata/scala-basics/","tags":["Scala"],"text":"Scala \u540c\u65f6\u62e5\u6709 \u9762\u5411\u5bf9\u8c61 \u548c \u51fd\u6570\u5f0f \u7f16\u7a0b\u7684\u7279\u6027\uff0c\u662f\u4e00\u4e2a high-level \u7f16\u7a0b\u8bed\u8a00\u3002\u5e76\u4e14\u5b83\u80fd\u8fd0\u884c\u5728 JVM \u3001 JavaScript \u548c Native LLVM \u4e0a\u3002\u56e0\u4e3a\u5176\u9ad8\u6027\u80fd\uff0c\u6240\u4ee5\u88ab\u5e7f\u6cdb\u7684\u8fd0\u7528\u4e8e\u5927\u6570\u636e\u5904\u7406\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u3002 \u76ee\u524d Scala \u6709\u4e24\u4e2a\u7248\u672c\uff1a2.13.8 \u548c 3.1.8 \u56e0\u4e3a Scala \u662f\u80fd\u591f\u8fd0\u884c\u5728 JVM \u4e0a\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u65e0\u7f1d\u4f7f\u7528 Java \u7684\u5404\u79cd API\u3002 Scala Ecosystem \u00b6 Scala has a vibrant ecosystem, with libraries and frameworks for every need. The \u201cAwesome Scala\u201d list provides a list of hundreds of open source projects that are available to Scala developers, and the Scaladex provides a searchable index of Scala libraries. Some of the more notable libraries are listed below. Web development \u00b6 The Play Framework followed the Ruby on Rails model to become a lightweight, stateless, developer-friendly, web-friendly architecture for highly-scalable applications Scalatra is a tiny, high-performance, async web framework, inspired by Sinatra Finatra is Scala services built on TwitterServer and Finagle Scala.js is a strongly-typed replacement for JavaScript that provides a safer way to build robust front-end web applications ScalaJs-React lifts Facebook\u2019s React library into Scala.js, and endeavours to make it as type-safe and Scala-friendly as possible Lagom is a microservices framework that helps you decompose your legacy monolith and build, test, and deploy entire systems of Reactive microservices HTTP(S) Libraries \u00b6 Akka-http Finch Http4s Sttp JSON Libraries \u00b6 Argonaut Circe Json4s Play-JSON Serialization \u00b6 ScalaPB Science and data analysis \u00b6 Algebird Spire Squants Big Data \u00b6 Apache Spark Apache Flink AI, Machine Learning \u00b6 BigDL (Distributed Deep Learning Framework for Apache Spark) for Apache Spark TensorFlow Scala Functional Programming & Functional Reactive Programming \u00b6 FP : * Cats * Zio Functional reactive programming (FRP) : * fs2 * monix Build Tools \u00b6 sbt Gradle Mill Hello World \u00b6 In scala, all types inherits from top-level class Any , whose immediate children is AnyVal and AnyRef . Look following code block, def is a keyword to declare a method, the method hello is declared to be a \"main\" method with @main annotation. Unit 1 2 3 4 @main def hello = println ( \"Hello World!) // If your method doesn't return any value(like Java void), you can use Unit for method return type declare world(): Unit = println(\" Hello World ! \" ) Compile and Run: 1 2 3 4 5 # compile Hello.scala scalac Hello.scala # run main method of Hello.scala scala hello Variables and Types \u00b6 Variables \u00b6 There are two types of variables: val : Creates a immutable variable - like final in Java. Good practice: always create a variable with val , unless you have reason to use a mutable variable. var : Creates a mutable variable. Only used for a variable will change over time. Example: 1 2 3 4 5 // immutable val a = 0 // mutable val b = 1 If you try to assign a new value to immutable variable, there will be a compile error. Declaring variable with types \u00b6 Data Type Possible Values Boolean true or false Byte 8-bit signed two\u2019s complement integer (-2^7 to 2^7-1, inclusive): -128 to 127 Short 16-bit signed two\u2019s complement integer (-2^15 to 2^15-1, inclusive): -32,768 to 32,767 Int 32-bit two\u2019s complement integer (-2^31 to 2^31-1, inclusive): -2,147,483,648 to 2,147,483,647 Long 64-bit two\u2019s complement integer (-2^63 to 2^63-1, inclusive): (-2^63 to 2^63-1, inclusive) Float 32-bit IEEE 754 single-precision float: 1.40129846432481707e-45 to 3.40282346638528860e+38 Double 64-bit IEEE 754 double-precision float: 4.94065645841246544e-324 to 1.79769313486231570e+308 Char 16-bit unsigned Unicode character (0 to 2^16-1, inclusive): 0 to 65,535 String a sequence of Char 1 2 3 4 val l : Long = 1 val b : Byte = 1 val s : Short = 1 val f : Float = 1.1 Built-in data types : Byte Int Long Short Double Float Int and Double are the default numeric types, you should create them without explicitly declaring the data type: 1 2 val n = 100 // defaults to Int val d = 1.12 // defaults to Double You can also append L , D , F to numbers to specify their type: 1 2 3 val l = 1 _000L val d = 1.12D val f = 1.2F Big numbers: BigInt BigDecimal 1 2 val a = BigInt ( 1 _234_567_890_987_654_321L ) val b = BigDecimal ( 123_456.789 ) String and Char : 1 2 val s = \"Billy\" val c = 'a' Strings \u00b6 You can use Strings variables in a string formatter: 1 2 3 4 val firstName = \"Torres\" val lastName = \"Ray\" println ( s\"Name: $ firstName $ lastName \" ) Multiline strings \u00b6 1 2 val quote = \"\"\"Hello: World\"\"\" Type Casting \u00b6 1 2 3 4 5 val l : Long = 987654321 val f : Float = l // 9.8765434E8 (some precision is lost in this case) val face : Char = '\u263a' val n : Int = face // 9786 Nothing and Null \u00b6 Nothing is a subtype of all types, bottom type . No value that has the type Nothing . Common use is to signal non-termination, eg. a thrown exception, program exit... Null is also a subtype of all reference types (i.e. any subtypeof AnyRef ). Control Structures \u00b6 if/else \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // scala 3 syntax if { condition1 } then //statement1 else if { condition2 } then // statement2 else // statement3 // scala 2 syntax if ({ condition1 }) { // statement1 } else if ({ condition2 }) { // statement2 } else { // statement3 } Ternary Expression: 1 val x = if a < b then a else b for loops and expression \u00b6 for loops \u00b6 1 2 3 4 5 6 // scala 3 syntax val ints = List ( 1 , 2 , 3 , 4 , 5 ) for i <- ints do println ( i ) // scala 2 syntax for ( i <- ints ) println ( i ) for with guards : 1 2 3 4 5 for i <- ints if i > 2 do println ( i ) for expression \u00b6 Use yield keyword instead of do , you can create for expressions which are used to calculate and yield results. 1 2 3 4 val ints = List ( 1 , 2 , 3 , 4 , 5 ) val doubled = for i <- ints yield i * 2 println ( doubled ) // List(2, 4, 6, 8, 10) You can also write the code like this: 1 2 3 4 val doubled = for i <- ints yield i * 2 // style shown above val doubled = for ( i <- ints ) yield i * 2 val doubled = for ( i <- ints ) yield ( i * 2 ) val doubled = for { i <- ints } yield ( i * 2 ) match expressions \u00b6 match keyword is like Java switch statement: 1 2 3 4 5 6 7 8 9 10 val i = 1 i match case 1 => println ( \"one\" ) case 2 => println ( \"two\" ) case _ => println ( \"others\" ) val result = i match case 1 => println ( \"one\" ) case 2 => println ( \"two\" ) case _ => println ( \"others\" ) try/catch/finally \u00b6 1 2 3 4 5 6 7 try writeTextToFile ( test ) catch case ioe : IOException => println ( \"Got an IOException\" ) case nfe : NumberFormatException => println ( \"Got an NumberFormatException\" ) finally println ( \"Clean up your resources here\" ) while loops \u00b6 1 while x >= 0 do x = f ( x ) OOP Domain Modeling \u00b6 Traits \u00b6 traits is like interface in Java, but it can also contain abstract and concrete methods and fields, and they can have parameters, just like classes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 trait Animal ( name : String ) { def bark (): String def sleep (): Unit = println ( \"Ozzzz......\" ) def eat (): Unit = println ( s\" $ name is eating...\" ) } class Dog ( var name : String ) extends Animal ( name ) { // var means the field name is mutable override def bark (): String = \"Woof!\" } @main def main (): Unit = { val dog : Dog = new Dog ( \"Ermeng\" ) dog . eat () // print \"Ermeng is eating...\" } class can have multiple extends trait , also we can use override to override a method from a extended trait. Classes \u00b6 class in Scala is pretty similar to Java classes. 1 2 3 4 5 6 class Person ( var firstName : String , var lastName : String ): def getFullName (): String = s\" $ firstName $ lastName \" val p : Person = new Person ( \"Torres\" , \" Lei ) println ( p . firstName ) println ( p . getFullName ()) Enums \u00b6 For example, a pizza has three main attributes: 1 2 3 4 5 6 enum CrustSize : case Small , Medium , Large enum CrustType : case Thin , Thick , Regular enum Topping : case Cheese , Pepperoni , BlackOlives , GreenOlives , Onions How to use them: 1 2 3 4 5 6 7 8 9 import CrustSize . * val currentCrustSize = Small currentCrustSize match case Small => println ( \"Small crust size\" ) case Medium => println ( \"Medium crust size\" ) case Large => println ( \"Large crust size\" ) if currentCrustSize == Small then println ( \"Small crust size\" ) Case classes \u00b6 case class is a kind of class (has all functionality of a class ) which the fields in it are immutable. Some additional features: Case class constructor parameters are public val fields by default, so the fields are immutable and accessor methods of each parameter are generated. unapply method is generated in case class (Use in match expressions). A copy method is generated in the class. equals and hashcode methods are generated to implement structural equality. A default toString method is generated. Example: 1 2 3 4 5 6 7 8 9 10 11 12 case class Person ( name : String , vocation : String ) val p = Person ( \"Torres Lei\" , \"Programmer\" ) p // default toString method: Person(Torres Lei,Programmer) p . name = \"Another Name\" // Compile Error val p2 = p . copy ( role = \"Software Engineer\" ) // Person(Torres Lei, Software Engineer) Methods \u00b6 1 2 3 4 5 6 7 def methodName ( param1 : Type1 , param2 : Type2 ): ReturnType = // method body def sum ( a : Int , b : Int ): Int = a + b // also you can remove return type def sum ( a : Int , b : Int ) = a + b Named Parameter and Default Parameter Value : 1 2 3 4 5 6 7 8 def makeConnection ( url : String , timeout : Int = 5000 ): Unit = println ( s\"url = $ url , timeout = $ timeout \" ) // without named parameters makeConnection ( \"http://localhost\" , \"2500\" ) // Named Parameters makeConnection ( url = \"http://localhost\" , timeout = 2000 ) Extension Methods \u00b6 Extension Methods let you add new methods to closed classes. For instance, if you want to add two methods named hello and aloha to String class, decalre them as extension methods: 1 2 3 4 5 extension ( a : Animal ) def sitDown (): Unit = println ( s\"Hi ${ a . getName } \" ) val dog : Dog = Dog ( \"Golden Retriever\" ) dog . sitDown () // print \"Sit Down! Golden Retriever\" First-Class Functions \u00b6 Scala has most features you'd expect in a functional programming language: Lambda Higher-order functions (HOFs) Immutable collections in the standard library Lambda \u00b6 map method for List class: 1 2 3 val l = List(1, 2, 3, 4, 5) val b = l.map(i => i * 2) // List(2, 4, 6, 8, 10) val c = l.map(_ * 2) // List(2, 4, 6, 8, 10) Also has method reference: 1 2 3 4 5 6 def double ( i : Int ): Int = i * 2 val l = List ( 1 , 2 , 3 ) val a = l . map ( i => double ( i )) val b = l . map ( double ) // method reference in Java Immutable collections \u00b6 1 2 3 4 5 val nums = ( 1 to 10 ). toList // List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) val x = nums . filter ( _ > 3 ) . filter ( _ < 7 ) . map ( _ * 10 ) // result: x == List(40, 50, 60) Create methods take function as parameter \u00b6 1 2 3 4 5 6 def sum(a: Int, b: Int): Int = a + b def calculate(f: (Int, Int) => Int, i: Int, j: Int): Int = f(i, j) // sum is a function declared above println(calculate(sum, 4, 7)) // print 11 Object \u00b6 object in Scala creates a singleton object, which means, object defines a class that has exactly one instance. Common Usage : Used to create a collection of utility methods. 1 2 3 4 5 object StringUtils : def isNullOrEmpty ( str : String ) : Boolean => str == null || s.trim.isEmpty val res1 = StringUtils.isNullOrEmpty ( \" \" ) // true val res2 = StringUtils.isNullOrEmptu ( \"aa\" ) // false Companion object. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import scala . math . * class Circle ( radius : Double ) { def area : Double = calcaulateSize ( this . radius ) } object Circle { private def calculateSize ( radius : Double ): Double => Pi * pow ( radius , 2.0 ) } @main def main (): Unit = { val circle = new Circle ( 4.0D ) println ( circle . area ) // 50.26548245743669 } object Circle is companion object, and class Circle is companion class. Implement traits to create modules. 1 2 3 4 5 6 7 8 9 10 11 12 trait AddService : def add ( a : Int , b : Int ): Int = a + b trait MultiplyService : def multiply ( a : Int , b : Int ): Int = a * b object MathService extends AddService , MultiplyService @main def main (): Unit = { println ( MathService . add ( 4 , 5 )) println ( MathService . multiply ( 5 , 6 )) }","title":"Scala \u57fa\u7840\u77e5\u8bc6\u5b66\u4e60\u7b14\u8bb0"},{"location":"bigdata/scala-basics/#scala-ecosystem","text":"Scala has a vibrant ecosystem, with libraries and frameworks for every need. The \u201cAwesome Scala\u201d list provides a list of hundreds of open source projects that are available to Scala developers, and the Scaladex provides a searchable index of Scala libraries. Some of the more notable libraries are listed below.","title":"Scala Ecosystem"},{"location":"bigdata/scala-basics/#web-development","text":"The Play Framework followed the Ruby on Rails model to become a lightweight, stateless, developer-friendly, web-friendly architecture for highly-scalable applications Scalatra is a tiny, high-performance, async web framework, inspired by Sinatra Finatra is Scala services built on TwitterServer and Finagle Scala.js is a strongly-typed replacement for JavaScript that provides a safer way to build robust front-end web applications ScalaJs-React lifts Facebook\u2019s React library into Scala.js, and endeavours to make it as type-safe and Scala-friendly as possible Lagom is a microservices framework that helps you decompose your legacy monolith and build, test, and deploy entire systems of Reactive microservices","title":"Web development"},{"location":"bigdata/scala-basics/#https-libraries","text":"Akka-http Finch Http4s Sttp","title":"HTTP(S) Libraries"},{"location":"bigdata/scala-basics/#json-libraries","text":"Argonaut Circe Json4s Play-JSON","title":"JSON Libraries"},{"location":"bigdata/scala-basics/#serialization","text":"ScalaPB","title":"Serialization"},{"location":"bigdata/scala-basics/#science-and-data-analysis","text":"Algebird Spire Squants","title":"Science and data analysis"},{"location":"bigdata/scala-basics/#big-data","text":"Apache Spark Apache Flink","title":"Big Data"},{"location":"bigdata/scala-basics/#ai-machine-learning","text":"BigDL (Distributed Deep Learning Framework for Apache Spark) for Apache Spark TensorFlow Scala","title":"AI, Machine Learning"},{"location":"bigdata/scala-basics/#functional-programming-functional-reactive-programming","text":"FP : * Cats * Zio Functional reactive programming (FRP) : * fs2 * monix","title":"Functional Programming &amp; Functional Reactive Programming"},{"location":"bigdata/scala-basics/#build-tools","text":"sbt Gradle Mill","title":"Build Tools"},{"location":"bigdata/scala-basics/#hello-world","text":"In scala, all types inherits from top-level class Any , whose immediate children is AnyVal and AnyRef . Look following code block, def is a keyword to declare a method, the method hello is declared to be a \"main\" method with @main annotation. Unit 1 2 3 4 @main def hello = println ( \"Hello World!) // If your method doesn't return any value(like Java void), you can use Unit for method return type declare world(): Unit = println(\" Hello World ! \" ) Compile and Run: 1 2 3 4 5 # compile Hello.scala scalac Hello.scala # run main method of Hello.scala scala hello","title":"Hello World"},{"location":"bigdata/scala-basics/#variables-and-types","text":"","title":"Variables and Types"},{"location":"bigdata/scala-basics/#variables","text":"There are two types of variables: val : Creates a immutable variable - like final in Java. Good practice: always create a variable with val , unless you have reason to use a mutable variable. var : Creates a mutable variable. Only used for a variable will change over time. Example: 1 2 3 4 5 // immutable val a = 0 // mutable val b = 1 If you try to assign a new value to immutable variable, there will be a compile error.","title":"Variables"},{"location":"bigdata/scala-basics/#declaring-variable-with-types","text":"Data Type Possible Values Boolean true or false Byte 8-bit signed two\u2019s complement integer (-2^7 to 2^7-1, inclusive): -128 to 127 Short 16-bit signed two\u2019s complement integer (-2^15 to 2^15-1, inclusive): -32,768 to 32,767 Int 32-bit two\u2019s complement integer (-2^31 to 2^31-1, inclusive): -2,147,483,648 to 2,147,483,647 Long 64-bit two\u2019s complement integer (-2^63 to 2^63-1, inclusive): (-2^63 to 2^63-1, inclusive) Float 32-bit IEEE 754 single-precision float: 1.40129846432481707e-45 to 3.40282346638528860e+38 Double 64-bit IEEE 754 double-precision float: 4.94065645841246544e-324 to 1.79769313486231570e+308 Char 16-bit unsigned Unicode character (0 to 2^16-1, inclusive): 0 to 65,535 String a sequence of Char 1 2 3 4 val l : Long = 1 val b : Byte = 1 val s : Short = 1 val f : Float = 1.1 Built-in data types : Byte Int Long Short Double Float Int and Double are the default numeric types, you should create them without explicitly declaring the data type: 1 2 val n = 100 // defaults to Int val d = 1.12 // defaults to Double You can also append L , D , F to numbers to specify their type: 1 2 3 val l = 1 _000L val d = 1.12D val f = 1.2F Big numbers: BigInt BigDecimal 1 2 val a = BigInt ( 1 _234_567_890_987_654_321L ) val b = BigDecimal ( 123_456.789 ) String and Char : 1 2 val s = \"Billy\" val c = 'a'","title":"Declaring variable with types"},{"location":"bigdata/scala-basics/#strings","text":"You can use Strings variables in a string formatter: 1 2 3 4 val firstName = \"Torres\" val lastName = \"Ray\" println ( s\"Name: $ firstName $ lastName \" )","title":"Strings"},{"location":"bigdata/scala-basics/#multiline-strings","text":"1 2 val quote = \"\"\"Hello: World\"\"\"","title":"Multiline strings"},{"location":"bigdata/scala-basics/#type-casting","text":"1 2 3 4 5 val l : Long = 987654321 val f : Float = l // 9.8765434E8 (some precision is lost in this case) val face : Char = '\u263a' val n : Int = face // 9786","title":"Type Casting"},{"location":"bigdata/scala-basics/#nothing-and-null","text":"Nothing is a subtype of all types, bottom type . No value that has the type Nothing . Common use is to signal non-termination, eg. a thrown exception, program exit... Null is also a subtype of all reference types (i.e. any subtypeof AnyRef ).","title":"Nothing and Null"},{"location":"bigdata/scala-basics/#control-structures","text":"","title":"Control Structures"},{"location":"bigdata/scala-basics/#ifelse","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // scala 3 syntax if { condition1 } then //statement1 else if { condition2 } then // statement2 else // statement3 // scala 2 syntax if ({ condition1 }) { // statement1 } else if ({ condition2 }) { // statement2 } else { // statement3 } Ternary Expression: 1 val x = if a < b then a else b","title":"if/else"},{"location":"bigdata/scala-basics/#for-loops-and-expression","text":"","title":"for loops and expression"},{"location":"bigdata/scala-basics/#for-loops","text":"1 2 3 4 5 6 // scala 3 syntax val ints = List ( 1 , 2 , 3 , 4 , 5 ) for i <- ints do println ( i ) // scala 2 syntax for ( i <- ints ) println ( i ) for with guards : 1 2 3 4 5 for i <- ints if i > 2 do println ( i )","title":"for loops"},{"location":"bigdata/scala-basics/#for-expression","text":"Use yield keyword instead of do , you can create for expressions which are used to calculate and yield results. 1 2 3 4 val ints = List ( 1 , 2 , 3 , 4 , 5 ) val doubled = for i <- ints yield i * 2 println ( doubled ) // List(2, 4, 6, 8, 10) You can also write the code like this: 1 2 3 4 val doubled = for i <- ints yield i * 2 // style shown above val doubled = for ( i <- ints ) yield i * 2 val doubled = for ( i <- ints ) yield ( i * 2 ) val doubled = for { i <- ints } yield ( i * 2 )","title":"for expression"},{"location":"bigdata/scala-basics/#match-expressions","text":"match keyword is like Java switch statement: 1 2 3 4 5 6 7 8 9 10 val i = 1 i match case 1 => println ( \"one\" ) case 2 => println ( \"two\" ) case _ => println ( \"others\" ) val result = i match case 1 => println ( \"one\" ) case 2 => println ( \"two\" ) case _ => println ( \"others\" )","title":"match expressions"},{"location":"bigdata/scala-basics/#trycatchfinally","text":"1 2 3 4 5 6 7 try writeTextToFile ( test ) catch case ioe : IOException => println ( \"Got an IOException\" ) case nfe : NumberFormatException => println ( \"Got an NumberFormatException\" ) finally println ( \"Clean up your resources here\" )","title":"try/catch/finally"},{"location":"bigdata/scala-basics/#while-loops","text":"1 while x >= 0 do x = f ( x )","title":"while loops"},{"location":"bigdata/scala-basics/#oop-domain-modeling","text":"","title":"OOP Domain Modeling"},{"location":"bigdata/scala-basics/#traits","text":"traits is like interface in Java, but it can also contain abstract and concrete methods and fields, and they can have parameters, just like classes. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 trait Animal ( name : String ) { def bark (): String def sleep (): Unit = println ( \"Ozzzz......\" ) def eat (): Unit = println ( s\" $ name is eating...\" ) } class Dog ( var name : String ) extends Animal ( name ) { // var means the field name is mutable override def bark (): String = \"Woof!\" } @main def main (): Unit = { val dog : Dog = new Dog ( \"Ermeng\" ) dog . eat () // print \"Ermeng is eating...\" } class can have multiple extends trait , also we can use override to override a method from a extended trait.","title":"Traits"},{"location":"bigdata/scala-basics/#classes","text":"class in Scala is pretty similar to Java classes. 1 2 3 4 5 6 class Person ( var firstName : String , var lastName : String ): def getFullName (): String = s\" $ firstName $ lastName \" val p : Person = new Person ( \"Torres\" , \" Lei ) println ( p . firstName ) println ( p . getFullName ())","title":"Classes"},{"location":"bigdata/scala-basics/#enums","text":"For example, a pizza has three main attributes: 1 2 3 4 5 6 enum CrustSize : case Small , Medium , Large enum CrustType : case Thin , Thick , Regular enum Topping : case Cheese , Pepperoni , BlackOlives , GreenOlives , Onions How to use them: 1 2 3 4 5 6 7 8 9 import CrustSize . * val currentCrustSize = Small currentCrustSize match case Small => println ( \"Small crust size\" ) case Medium => println ( \"Medium crust size\" ) case Large => println ( \"Large crust size\" ) if currentCrustSize == Small then println ( \"Small crust size\" )","title":"Enums"},{"location":"bigdata/scala-basics/#case-classes","text":"case class is a kind of class (has all functionality of a class ) which the fields in it are immutable. Some additional features: Case class constructor parameters are public val fields by default, so the fields are immutable and accessor methods of each parameter are generated. unapply method is generated in case class (Use in match expressions). A copy method is generated in the class. equals and hashcode methods are generated to implement structural equality. A default toString method is generated. Example: 1 2 3 4 5 6 7 8 9 10 11 12 case class Person ( name : String , vocation : String ) val p = Person ( \"Torres Lei\" , \"Programmer\" ) p // default toString method: Person(Torres Lei,Programmer) p . name = \"Another Name\" // Compile Error val p2 = p . copy ( role = \"Software Engineer\" ) // Person(Torres Lei, Software Engineer)","title":"Case classes"},{"location":"bigdata/scala-basics/#methods","text":"1 2 3 4 5 6 7 def methodName ( param1 : Type1 , param2 : Type2 ): ReturnType = // method body def sum ( a : Int , b : Int ): Int = a + b // also you can remove return type def sum ( a : Int , b : Int ) = a + b Named Parameter and Default Parameter Value : 1 2 3 4 5 6 7 8 def makeConnection ( url : String , timeout : Int = 5000 ): Unit = println ( s\"url = $ url , timeout = $ timeout \" ) // without named parameters makeConnection ( \"http://localhost\" , \"2500\" ) // Named Parameters makeConnection ( url = \"http://localhost\" , timeout = 2000 )","title":"Methods"},{"location":"bigdata/scala-basics/#extension-methods","text":"Extension Methods let you add new methods to closed classes. For instance, if you want to add two methods named hello and aloha to String class, decalre them as extension methods: 1 2 3 4 5 extension ( a : Animal ) def sitDown (): Unit = println ( s\"Hi ${ a . getName } \" ) val dog : Dog = Dog ( \"Golden Retriever\" ) dog . sitDown () // print \"Sit Down! Golden Retriever\"","title":"Extension Methods"},{"location":"bigdata/scala-basics/#first-class-functions","text":"Scala has most features you'd expect in a functional programming language: Lambda Higher-order functions (HOFs) Immutable collections in the standard library","title":"First-Class Functions"},{"location":"bigdata/scala-basics/#lambda","text":"map method for List class: 1 2 3 val l = List(1, 2, 3, 4, 5) val b = l.map(i => i * 2) // List(2, 4, 6, 8, 10) val c = l.map(_ * 2) // List(2, 4, 6, 8, 10) Also has method reference: 1 2 3 4 5 6 def double ( i : Int ): Int = i * 2 val l = List ( 1 , 2 , 3 ) val a = l . map ( i => double ( i )) val b = l . map ( double ) // method reference in Java","title":"Lambda"},{"location":"bigdata/scala-basics/#immutable-collections","text":"1 2 3 4 5 val nums = ( 1 to 10 ). toList // List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) val x = nums . filter ( _ > 3 ) . filter ( _ < 7 ) . map ( _ * 10 ) // result: x == List(40, 50, 60)","title":"Immutable collections"},{"location":"bigdata/scala-basics/#create-methods-take-function-as-parameter","text":"1 2 3 4 5 6 def sum(a: Int, b: Int): Int = a + b def calculate(f: (Int, Int) => Int, i: Int, j: Int): Int = f(i, j) // sum is a function declared above println(calculate(sum, 4, 7)) // print 11","title":"Create methods take function as parameter"},{"location":"bigdata/scala-basics/#object","text":"object in Scala creates a singleton object, which means, object defines a class that has exactly one instance. Common Usage : Used to create a collection of utility methods. 1 2 3 4 5 object StringUtils : def isNullOrEmpty ( str : String ) : Boolean => str == null || s.trim.isEmpty val res1 = StringUtils.isNullOrEmpty ( \" \" ) // true val res2 = StringUtils.isNullOrEmptu ( \"aa\" ) // false Companion object. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import scala . math . * class Circle ( radius : Double ) { def area : Double = calcaulateSize ( this . radius ) } object Circle { private def calculateSize ( radius : Double ): Double => Pi * pow ( radius , 2.0 ) } @main def main (): Unit = { val circle = new Circle ( 4.0D ) println ( circle . area ) // 50.26548245743669 } object Circle is companion object, and class Circle is companion class. Implement traits to create modules. 1 2 3 4 5 6 7 8 9 10 11 12 trait AddService : def add ( a : Int , b : Int ): Int = a + b trait MultiplyService : def multiply ( a : Int , b : Int ): Int = a * b object MathService extends AddService , MultiplyService @main def main (): Unit = { println ( MathService . add ( 4 , 5 )) println ( MathService . multiply ( 5 , 6 )) }","title":"Object"},{"location":"cloud/","text":"","title":"\u4e91\u539f\u751f\u7b80\u4ecb"},{"location":"cloud/golang-basics/","tags":["golang"],"text":"Hello Golang \u00b6 Golang \u662f\u7531 Google \u5f00\u53d1\u5e76\u5f00\u6e90\u51fa\u6765\u7684\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0cKubernetes \u5c31\u662f\u7531 Go \u4e3b\u8981\u5f00\u53d1\u7684\uff0c\u7531\u6b64\u53ef\u89c1 Go \u5728\u4e91\u539f\u751f\u5f00\u53d1\u4e2d\u7684\u91cd\u8981\u5730\u4f4d\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd Golang \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4f8b\u5982\u5404\u79cd\u8bed\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u4e00\u4e9b Tips\u3002 \u58f0\u660e\u548c\u8d4b\u503c \u00b6 Go \u4e2d\u58f0\u660e\u53d8\u91cf\u548c\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u65b9\u6cd5\u548c JavaScript \u6bd4\u8f83\u76f8\u4f3c\u3002\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // var \u662f\u58f0\u660e\u53d8\u91cf\u7684\u5173\u952e\u5b57\uff0c\u5982\u679c\u53ea\u58f0\u660e\u53d8\u91cf\u800c\u4e0d\u7ed9\u5b83\u8d4b\u503c // \u5219\u8be5\u53d8\u91cf\u4f1a\u88ab\u8d4b\u503c\u4e3a\u8be5\u7c7b\u578b\u7684\u96f6\u503c\uff08zero value\uff09 var num int // := \u662f\u58f0\u660e\u5e76\u8d4b\u503c\u7684\u64cd\u4f5c\u7b26 // \u5176\u5de5\u4f5c\u6d41\u7a0b\u4e3a\uff1a // 1. \u58f0\u660e\u4e00\u4e2a\u540d\u4e3a num \u7684\u53d8\u91cf // 2. \u5c06 10 \u8d4b\u503c\u7ed9\u53d8\u91cf num num := 10 \u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u96f6\u503c\u4e0d\u76f8\u540c\uff0c\u6bd4\u5982\u8bf4 int \u7684\u96f6\u503c\u4e3a 0\uff0c\u6d6e\u70b9\u7c7b\u578b\u7684\u96f6\u503c\u4e3a 0.0\uff0c\u800c string \u7684\u96f6\u503c\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff1a\"\"... \u5982 struct \u6216\u8005\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u96f6\u503c\u4e3a nil \u3002 \u57fa\u7840\u6570\u636e\u7c7b\u578b \u00b6 Go \u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b\u548c\u5176\u4ed6\u7684\u7f16\u7a0b\u8bed\u8a00\u76f8\u4f3c\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b Go \u4e2d\u7684\u6574\u578b\u3001\u5b57\u7b26\u4e32\u3001\u6d6e\u70b9\u578b\u3001\u5e03\u5c14\u578b\u7b49\uff1a \u6574\u578b \u00b6 \u6709\u7b26\u53f7\u6574\u578b \uff1a \u7c7b\u578b \u5927\u5c0f \u8303\u56f4 int8 8 bits -128 to 127 int16 16 bits -215 to 215 -1 int32 32 bits -231 to 231 -1 int64 64 bits -263 to 263 -1 int \u53d6\u51b3\u4e8e\u5e73\u53f0 \u53d6\u51b3\u4e8e\u5e73\u53f0 int \u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u5e73\u53f0\uff0c\u572832\u4f4d\u7cfb\u7edf\u4e2d\u5b83\u662f32\u4f4d\u7684\uff0c\u800c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u5b83\u662f64\u4f4d\u3002 \u65e0\u7b26\u53f7\u6574\u578b \uff1a \u7c7b\u578b \u5927\u5c0f \u8303\u56f4 uint8 8 bits 0 to 255 uint16 16 bits 0 to 216 -1 uint32 32 bits 0 to 232 -1 uint64 64 bits 0 to 264 -1 uint \u53d6\u51b3\u4e8e\u5e73\u53f0 \u53d6\u51b3\u4e8e\u5e73\u53f0 uint \u548c int \u7684\u5927\u5c0f\u4e00\u6837\u53d6\u51b3\u4e8e\u6240\u5728\u7684\u5e73\u53f0\u3002 \u63d0\u793a\uff1a\u5f53\u4f60\u4f7f\u7528 integer \u7c7b\u578b\u7684\u503c\u65f6\uff0c\u9664\u975e\u4f60\u6709\u66f4\u597d\u7684\u539f\u56e0\u53bb\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u578b\u6216\u8005\u5e26\u4f4d\u6570\u7684\u6574\u578b\u7c7b\u578b\uff0c\u5426\u5219\u8bf7\u4f7f\u7528 int . Golang \u4e2d\u8fd8\u6709\u4e24\u4e2a\u989d\u5916\u7684\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6574\u578b\uff1a \u7c7b\u578b \u8868\u793a\u4e3a byte uint8 rune int32 \u5728 Go \u4e2d\uff0c rune \u548c byte \u662f\u7528\u6765\u533a\u5206\u5b57\u7b26\u548c\u6574\u578b\u7c7b\u578b\u7684\u3002Go \u4e2d\u6ca1\u6709 char \u7c7b\u578b\uff0c\u5b83\u7528 rune \u548c byte \u6765\u8868\u793a\u5b57\u7b26\uff08\u4f46\u662f\u5b83\u4eec\u672c\u8d28\u4e0a\u90fd\u662f\u6574\u6570\u7c7b\u578b\uff09\uff1a 1 2 var firstLetter = 'A' // Type inferred as `rune` (Default type for character values) var lastLetter byte = 'Z' \u800c byte \u53ef\u4ee5\u8f6c\u6362\u6210 ASCII \u7801\u4e2d\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5982 firstLetter \u53ef\u4ee5\u8f6c\u6362\u6210 65\u3002 rune \u53d8\u91cf\u80fd\u8f6c\u6362\u4e3a Unicode \u4e2d\u5bf9\u5e94\u7684\u7f16\u7801\u3002 1 2 3 4 5 6 7 8 9 package main import \"fmt\" func main () { var myByte byte = 'a' var myRune rune = '\u2665' fmt . Printf ( \"%c = %d and %c = %U\\n\" , myByte , myByte , myRune , myRune ) } 1 2 # Output a = 97 and \u2665 = U + 2665 \u53ef\u4ee5\u770b\u5230 a \u88ab\u8f6c\u6210\u4e86 97\uff0cUnicode \u503c '\u2665' \u88ab\u8f6c\u6362\u6210\u4e86\u5bf9\u5e94\u7684 Unicode \u7801\uff1a U+2665 \u3002 U \u4ee3\u8868 Unicode\uff0c\u540e\u9762\u7684\u6570\u5b57\u5219\u662f16\u8fdb\u5236\u7684\u6574\u6570\u3002 \u6d6e\u70b9\u578b \u00b6 \u6d6e\u70b9\u7c7b\u578b\u7684\u6570\u5b57\u5305\u62ec\u4e24\u79cd\uff1a float32 \uff1a\u5728\u5185\u5b58\u4e2d\u5360\u7528 32 bits\uff0c\u4ee5\u5355\u7cbe\u5ea6\u6d6e\u70b9\u683c\u5f0f\u5b58\u50a8\u503c\u3002 float64 \uff1a\u5728\u5185\u5b58\u4e2d\u5360\u7528 64 bits\uff0c\u4ee5\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u683c\u5f0f\u5b58\u50a8\u503c\u3002 \u96c6\u5408\u7c7b\u578b \u00b6 \u6570\u7ec4 \u00b6 \u5728 Go \u4e2d\uff0c\u6570\u7ec4\u662f \u56fa\u5b9a\u957f\u5ea6 \u7684\u6570\u636e\u7c7b\u578b\uff0c\u5305\u542b\u76f8\u540c\u7c7b\u578b\u5143\u7d20\u7684 \u8fde\u7eed\u5185\u5b58\u5757 \u3002\u5b9a\u4e49\u6570\u7ec4\u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 // \u58f0\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u4e3a0\uff08\u53c2\u8003\u4e0a\u9762\u8bf4\u5230\u7684\u96f6\u503c\uff09 var arr [ 5 ] int // \u58f0\u660e\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4 arr := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } // \u58f0\u660e\u4e00\u4e2aint\u6570\u7ec4\uff0cGo\u4f1a\u57fa\u4e8e\u521d\u59cb\u5316\u5143\u7d20\u7684\u4e2a\u6570\u6765\u51b3\u5b9a\u5176\u957f\u5ea6 arr := [ ... ] int { 1 , 2 , 3 } // \u58f0\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684int\u6570\u7ec4\uff0c\u4f46\u662f\u53ea\u521d\u59cb\u5316\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 arr := [ 5 ] int { 1 : 20 , 3 : 40 } \u6ce8\u610f \uff1a \u6570\u7ec4\u53ea\u8981\u88ab\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u65e0\u6cd5\u518d\u66f4\u6539\u5176\u957f\u5ea6\u548c\u7c7b\u578b\u4e86\u3002 \u5728 functions \u4e4b\u95f4\u4f20\u9012\u6570\u7ec4\u662f\u975e\u5e38\u6602\u8d35\u7684\uff0c\u5982\u679c\u662f\u5728\u9700\u8981\u4f20\u9012\u6570\u7ec4\uff0c\u53ef\u4ee5\u8003\u8651\u4f20\u9012\u5b83\u7684\u6307\u9488\u3002 \u58f0\u660e\u4e00\u4e2a\u4e00\u767e\u4e07\u4e2a\u5143\u7d20\u7684 int \u6570\u7ec4\uff0c\u572864\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u4f1a\u5360\u7528 8MB \u5185\u5b58\u3002 \u800c\u5728 function \u4e4b\u95f4\u4f20\u9012\u65f6\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21 function\uff0c\u90fd\u4f1a\u5728\u6808\u4e2d\u5206\u914d\u4e00\u4e2a 8MB \u7684\u7a7a\u95f4\u7ed9\u8fd9\u4e2a\u6570\u7ec4\u3002 \u800c\u4f20\u9012\u8fd9\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u5219\u4f1a\u66f4\u9ad8\u6548\uff0c\u6307\u9488\u5bf9\u8c61\u53ea\u4f1a\u5360\u75288\u4e2a\u5b57\u8282\u7a7a\u95f4\u3002 Slice \u00b6 Map \u00b6","title":"Golang\u57fa\u7840\u77e5\u8bc6"},{"location":"cloud/golang-basics/#hello-golang","text":"Golang \u662f\u7531 Google \u5f00\u53d1\u5e76\u5f00\u6e90\u51fa\u6765\u7684\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\uff0cKubernetes \u5c31\u662f\u7531 Go \u4e3b\u8981\u5f00\u53d1\u7684\uff0c\u7531\u6b64\u53ef\u89c1 Go \u5728\u4e91\u539f\u751f\u5f00\u53d1\u4e2d\u7684\u91cd\u8981\u5730\u4f4d\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4e3b\u8981\u4ecb\u7ecd Golang \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u4f8b\u5982\u5404\u79cd\u8bed\u6cd5\uff0c\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u53ca\u4e00\u4e9b Tips\u3002","title":"Hello Golang"},{"location":"cloud/golang-basics/#_1","text":"Go \u4e2d\u58f0\u660e\u53d8\u91cf\u548c\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u65b9\u6cd5\u548c JavaScript \u6bd4\u8f83\u76f8\u4f3c\u3002\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 // var \u662f\u58f0\u660e\u53d8\u91cf\u7684\u5173\u952e\u5b57\uff0c\u5982\u679c\u53ea\u58f0\u660e\u53d8\u91cf\u800c\u4e0d\u7ed9\u5b83\u8d4b\u503c // \u5219\u8be5\u53d8\u91cf\u4f1a\u88ab\u8d4b\u503c\u4e3a\u8be5\u7c7b\u578b\u7684\u96f6\u503c\uff08zero value\uff09 var num int // := \u662f\u58f0\u660e\u5e76\u8d4b\u503c\u7684\u64cd\u4f5c\u7b26 // \u5176\u5de5\u4f5c\u6d41\u7a0b\u4e3a\uff1a // 1. \u58f0\u660e\u4e00\u4e2a\u540d\u4e3a num \u7684\u53d8\u91cf // 2. \u5c06 10 \u8d4b\u503c\u7ed9\u53d8\u91cf num num := 10 \u4f46\u662f\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6bcf\u4e2a\u7c7b\u578b\u7684\u96f6\u503c\u4e0d\u76f8\u540c\uff0c\u6bd4\u5982\u8bf4 int \u7684\u96f6\u503c\u4e3a 0\uff0c\u6d6e\u70b9\u7c7b\u578b\u7684\u96f6\u503c\u4e3a 0.0\uff0c\u800c string \u7684\u96f6\u503c\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff1a\"\"... \u5982 struct \u6216\u8005\u6307\u9488\u7c7b\u578b\u7684\u53d8\u91cf\uff0c\u96f6\u503c\u4e3a nil \u3002","title":"\u58f0\u660e\u548c\u8d4b\u503c"},{"location":"cloud/golang-basics/#_2","text":"Go \u7684\u57fa\u7840\u6570\u636e\u7c7b\u578b\u548c\u5176\u4ed6\u7684\u7f16\u7a0b\u8bed\u8a00\u76f8\u4f3c\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u4ecb\u7ecd\u4e00\u4e0b Go \u4e2d\u7684\u6574\u578b\u3001\u5b57\u7b26\u4e32\u3001\u6d6e\u70b9\u578b\u3001\u5e03\u5c14\u578b\u7b49\uff1a","title":"\u57fa\u7840\u6570\u636e\u7c7b\u578b"},{"location":"cloud/golang-basics/#_3","text":"\u6709\u7b26\u53f7\u6574\u578b \uff1a \u7c7b\u578b \u5927\u5c0f \u8303\u56f4 int8 8 bits -128 to 127 int16 16 bits -215 to 215 -1 int32 32 bits -231 to 231 -1 int64 64 bits -263 to 263 -1 int \u53d6\u51b3\u4e8e\u5e73\u53f0 \u53d6\u51b3\u4e8e\u5e73\u53f0 int \u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u5e73\u53f0\uff0c\u572832\u4f4d\u7cfb\u7edf\u4e2d\u5b83\u662f32\u4f4d\u7684\uff0c\u800c\u572864\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u5b83\u662f64\u4f4d\u3002 \u65e0\u7b26\u53f7\u6574\u578b \uff1a \u7c7b\u578b \u5927\u5c0f \u8303\u56f4 uint8 8 bits 0 to 255 uint16 16 bits 0 to 216 -1 uint32 32 bits 0 to 232 -1 uint64 64 bits 0 to 264 -1 uint \u53d6\u51b3\u4e8e\u5e73\u53f0 \u53d6\u51b3\u4e8e\u5e73\u53f0 uint \u548c int \u7684\u5927\u5c0f\u4e00\u6837\u53d6\u51b3\u4e8e\u6240\u5728\u7684\u5e73\u53f0\u3002 \u63d0\u793a\uff1a\u5f53\u4f60\u4f7f\u7528 integer \u7c7b\u578b\u7684\u503c\u65f6\uff0c\u9664\u975e\u4f60\u6709\u66f4\u597d\u7684\u539f\u56e0\u53bb\u4f7f\u7528\u65e0\u7b26\u53f7\u6574\u578b\u6216\u8005\u5e26\u4f4d\u6570\u7684\u6574\u578b\u7c7b\u578b\uff0c\u5426\u5219\u8bf7\u4f7f\u7528 int . Golang \u4e2d\u8fd8\u6709\u4e24\u4e2a\u989d\u5916\u7684\u7c7b\u578b\u53ef\u4ee5\u8868\u793a\u6574\u578b\uff1a \u7c7b\u578b \u8868\u793a\u4e3a byte uint8 rune int32 \u5728 Go \u4e2d\uff0c rune \u548c byte \u662f\u7528\u6765\u533a\u5206\u5b57\u7b26\u548c\u6574\u578b\u7c7b\u578b\u7684\u3002Go \u4e2d\u6ca1\u6709 char \u7c7b\u578b\uff0c\u5b83\u7528 rune \u548c byte \u6765\u8868\u793a\u5b57\u7b26\uff08\u4f46\u662f\u5b83\u4eec\u672c\u8d28\u4e0a\u90fd\u662f\u6574\u6570\u7c7b\u578b\uff09\uff1a 1 2 var firstLetter = 'A' // Type inferred as `rune` (Default type for character values) var lastLetter byte = 'Z' \u800c byte \u53ef\u4ee5\u8f6c\u6362\u6210 ASCII \u7801\u4e2d\u5bf9\u5e94\u7684\u6570\u5b57\uff0c\u5982 firstLetter \u53ef\u4ee5\u8f6c\u6362\u6210 65\u3002 rune \u53d8\u91cf\u80fd\u8f6c\u6362\u4e3a Unicode \u4e2d\u5bf9\u5e94\u7684\u7f16\u7801\u3002 1 2 3 4 5 6 7 8 9 package main import \"fmt\" func main () { var myByte byte = 'a' var myRune rune = '\u2665' fmt . Printf ( \"%c = %d and %c = %U\\n\" , myByte , myByte , myRune , myRune ) } 1 2 # Output a = 97 and \u2665 = U + 2665 \u53ef\u4ee5\u770b\u5230 a \u88ab\u8f6c\u6210\u4e86 97\uff0cUnicode \u503c '\u2665' \u88ab\u8f6c\u6362\u6210\u4e86\u5bf9\u5e94\u7684 Unicode \u7801\uff1a U+2665 \u3002 U \u4ee3\u8868 Unicode\uff0c\u540e\u9762\u7684\u6570\u5b57\u5219\u662f16\u8fdb\u5236\u7684\u6574\u6570\u3002","title":"\u6574\u578b"},{"location":"cloud/golang-basics/#_4","text":"\u6d6e\u70b9\u7c7b\u578b\u7684\u6570\u5b57\u5305\u62ec\u4e24\u79cd\uff1a float32 \uff1a\u5728\u5185\u5b58\u4e2d\u5360\u7528 32 bits\uff0c\u4ee5\u5355\u7cbe\u5ea6\u6d6e\u70b9\u683c\u5f0f\u5b58\u50a8\u503c\u3002 float64 \uff1a\u5728\u5185\u5b58\u4e2d\u5360\u7528 64 bits\uff0c\u4ee5\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u683c\u5f0f\u5b58\u50a8\u503c\u3002","title":"\u6d6e\u70b9\u578b"},{"location":"cloud/golang-basics/#_5","text":"","title":"\u96c6\u5408\u7c7b\u578b"},{"location":"cloud/golang-basics/#_6","text":"\u5728 Go \u4e2d\uff0c\u6570\u7ec4\u662f \u56fa\u5b9a\u957f\u5ea6 \u7684\u6570\u636e\u7c7b\u578b\uff0c\u5305\u542b\u76f8\u540c\u7c7b\u578b\u5143\u7d20\u7684 \u8fde\u7eed\u5185\u5b58\u5757 \u3002\u5b9a\u4e49\u6570\u7ec4\u7684\u4ee3\u7801\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 9 10 11 // \u58f0\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u6bcf\u4e2a\u5143\u7d20\u4e3a0\uff08\u53c2\u8003\u4e0a\u9762\u8bf4\u5230\u7684\u96f6\u503c\uff09 var arr [ 5 ] int // \u58f0\u660e\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684\u6570\u7ec4 arr := [ 5 ] int { 1 , 2 , 3 , 4 , 5 } // \u58f0\u660e\u4e00\u4e2aint\u6570\u7ec4\uff0cGo\u4f1a\u57fa\u4e8e\u521d\u59cb\u5316\u5143\u7d20\u7684\u4e2a\u6570\u6765\u51b3\u5b9a\u5176\u957f\u5ea6 arr := [ ... ] int { 1 , 2 , 3 } // \u58f0\u660e\u4e00\u4e2a\u957f\u5ea6\u4e3a5\u7684int\u6570\u7ec4\uff0c\u4f46\u662f\u53ea\u521d\u59cb\u5316\u6307\u5b9a\u4f4d\u7f6e\u7684\u5143\u7d20 arr := [ 5 ] int { 1 : 20 , 3 : 40 } \u6ce8\u610f \uff1a \u6570\u7ec4\u53ea\u8981\u88ab\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u65e0\u6cd5\u518d\u66f4\u6539\u5176\u957f\u5ea6\u548c\u7c7b\u578b\u4e86\u3002 \u5728 functions \u4e4b\u95f4\u4f20\u9012\u6570\u7ec4\u662f\u975e\u5e38\u6602\u8d35\u7684\uff0c\u5982\u679c\u662f\u5728\u9700\u8981\u4f20\u9012\u6570\u7ec4\uff0c\u53ef\u4ee5\u8003\u8651\u4f20\u9012\u5b83\u7684\u6307\u9488\u3002 \u58f0\u660e\u4e00\u4e2a\u4e00\u767e\u4e07\u4e2a\u5143\u7d20\u7684 int \u6570\u7ec4\uff0c\u572864\u4f4d\u64cd\u4f5c\u7cfb\u7edf\u4e0a\u4f1a\u5360\u7528 8MB \u5185\u5b58\u3002 \u800c\u5728 function \u4e4b\u95f4\u4f20\u9012\u65f6\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21 function\uff0c\u90fd\u4f1a\u5728\u6808\u4e2d\u5206\u914d\u4e00\u4e2a 8MB \u7684\u7a7a\u95f4\u7ed9\u8fd9\u4e2a\u6570\u7ec4\u3002 \u800c\u4f20\u9012\u8fd9\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u5219\u4f1a\u66f4\u9ad8\u6548\uff0c\u6307\u9488\u5bf9\u8c61\u53ea\u4f1a\u5360\u75288\u4e2a\u5b57\u8282\u7a7a\u95f4\u3002","title":"\u6570\u7ec4"},{"location":"cloud/golang-basics/#slice","text":"","title":"Slice"},{"location":"cloud/golang-basics/#map","text":"","title":"Map"},{"location":"cloud/kubernetes-installation-on-centos/","tags":["kubernetes"],"text":"Prerequisite \u00b6 CentOS 7 \u914d\u7f6e\u597d\u4e86\u9759\u6001IP \u7f51\u7edc\u8fde\u63a5 Installation Script \u00b6 \u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u60f3\u8981\u5728\u670d\u52a1\u5668\u4e0a\u914d\u7f6e Kubernetes \u8282\u70b9\u90fd\u8981\u81ea\u5df1\u624b\u52a8\u6267\u884c\u5f88\u591a\u547d\u4ee4\u5b89\u88c5\u4e1c\u897f\uff0c\u6211\u505a\u4e86\u4e00\u4e2a Shell \u811a\u672c\uff0c\u8fd9\u4e2a\u53ea\u9488\u5bf9 CentOS\u3002\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u987a\u4fbf\u5b66\u4e00\u5b66 Linux Shell\u3002 \u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7 \u6587\u7ae0 \uff0c\u8fd9\u91cc\u53ea\u662f\u52a0\u4e86\u4e00\u4e9b\u903b\u8f91\u6765\u5224\u65ad\u4e00\u4e9b\u547d\u4ee4\u6709\u6ca1\u6709\u5fc5\u8981\u6267\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #!/bin/sh # Check if there is already kubeadm command here # if kubeadm exists, there may be already installed Kubernetes if command kubeadm & > /dev/null then echo \"[WARN] Kubernetes may be already installed. Please check again...\" exit fi # br_mod = $( lsmod | grep 'br_netfilter' ) echo \"Current mod for br_netfilter: $br_mod \" if [[ ! $br_mod = ~ \"br_netfilter\" ]] ; then echo \"[WARN] There is no br_netfilter mod on this machine!\" sudo modprobe br_netfilter fi echo \"[INFO] br_netfilter mod loaded successfully!\" lsmod | grep br_netfilter # sudo tee /etc/sysctl.d/kubernetes.conf <<EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system # Install docker if there is not docker installed if ! command -v docker & > /dev/null then # you can refer this article of Docker Installation: https://docs.docker.com/engine/install/centos/ echo \"[WARN] Docker is not installed, now we are going to install docker for Kubernetes!\" # Remove docker first just in case sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine # Install yum-utils echo \"[INFO] Install yum-utils...\" sudo yum install -y yum-utils echo \"[INFO] Add repo for docker-ce...\" sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo echo \"[INFO] Starting installing Docker...\" sudo yum install -y docker-ce docker-ce-cli- containerd.io echo \"[INFO] Docker installed successfully. Starting docker...\" sudo systemctl start docker sudo systemctl enable docker echo \"[INFO] Docker started...\" sudo docker version else echo \"[INFO] Docker already exists...No need to install it.\" sudo systemctl start docker sudo docker version fi if ! command -v kubeadm & > /dev/null then # There's no kubernetes components installed echo \"[INFO] Add Kubernetes repository into local yum repositories...\" cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF echo \"[INFO] Kubernetes repo successfully added...\" else # Kubernetes related components may be already installed echo \"[WARN] Kubernetes related application or components may be already installed.\" exit fi echo \"[INFO] Start installing Kubernetes components: kubelet, kubeadm, kubectl\" sudo yum install -y kubelet kubeadm kubectl --disableexcludes = kubernetes sudo systemctl enable --now kubelet # After installing kubernetes, we have some steps to do # Set SELinux in permissive mode (effectively disabling it) echo \"[INFO] Set SELinux in permissive mode...\" sudo setenforce 0 sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config # Disable swap echo \"[INFO] Disable Swap...\" sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab sudo swapoff -a # Enable necessary port echo \"[INFO] Start enable some necessary ports for Kubernetes...\" sudo firewall-cmd --add-port ={ 6443 ,2379-2380,30000-32767,10250,10251,10252,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload # append new domain name to hosts file echo \"[INFO] Start writing new domain name for kubernetes, please ensure your input is accurate and correct.\" fileToAppend = \"/etc/hosts\" echo \"If you input a wrong IP or Domain Name, please update it in $fileToAppend manually\" read -p \"Please input ip address of your machine(e.g. 192.168.2.10): \" ipAddr read -p \"Please input the domain name(e.g. 'k8s-master01 k8s-master01.torres.com'): \" domainName ipAddrDomain = \" $ipAddr $domainName \" echo \"You are adding \\\" $ipAddrDomain \\\" as a new line into $fileToAppend .\" echo $ipAddrDomain >> $fileToAppend # Verify the installation, pull images from gcr.io echo \"[INFO] Start pulling relevant images about Kubernetes from gcr.io!\" sudo kubeadm config images pull echo \"Kubernetes installed successfully!!!!!!!!!!!!!!!\" Shell \u811a\u672c\u5df2\u7ecf\u5b8c\u6210\uff0c\u4f60\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e2a\u811a\u672c\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u5c3d\u7ba1\u8054\u7cfb\u6211\u3002","title":"\u5728CentOS\u4e0a\u5b89\u88c5K8S"},{"location":"cloud/kubernetes-installation-on-centos/#prerequisite","text":"CentOS 7 \u914d\u7f6e\u597d\u4e86\u9759\u6001IP \u7f51\u7edc\u8fde\u63a5","title":"Prerequisite"},{"location":"cloud/kubernetes-installation-on-centos/#installation-script","text":"\u4e3a\u4e86\u907f\u514d\u6bcf\u6b21\u60f3\u8981\u5728\u670d\u52a1\u5668\u4e0a\u914d\u7f6e Kubernetes \u8282\u70b9\u90fd\u8981\u81ea\u5df1\u624b\u52a8\u6267\u884c\u5f88\u591a\u547d\u4ee4\u5b89\u88c5\u4e1c\u897f\uff0c\u6211\u505a\u4e86\u4e00\u4e2a Shell \u811a\u672c\uff0c\u8fd9\u4e2a\u53ea\u9488\u5bf9 CentOS\u3002\u53ef\u4ee5\u53c2\u8003\u4e00\u4e0b\uff0c\u4e5f\u53ef\u4ee5\u987a\u4fbf\u5b66\u4e00\u5b66 Linux Shell\u3002 \u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u61c2\u7684\uff0c\u53ef\u4ee5\u53c2\u8003\u8fd9\u7bc7 \u6587\u7ae0 \uff0c\u8fd9\u91cc\u53ea\u662f\u52a0\u4e86\u4e00\u4e9b\u903b\u8f91\u6765\u5224\u65ad\u4e00\u4e9b\u547d\u4ee4\u6709\u6ca1\u6709\u5fc5\u8981\u6267\u884c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 #!/bin/sh # Check if there is already kubeadm command here # if kubeadm exists, there may be already installed Kubernetes if command kubeadm & > /dev/null then echo \"[WARN] Kubernetes may be already installed. Please check again...\" exit fi # br_mod = $( lsmod | grep 'br_netfilter' ) echo \"Current mod for br_netfilter: $br_mod \" if [[ ! $br_mod = ~ \"br_netfilter\" ]] ; then echo \"[WARN] There is no br_netfilter mod on this machine!\" sudo modprobe br_netfilter fi echo \"[INFO] br_netfilter mod loaded successfully!\" lsmod | grep br_netfilter # sudo tee /etc/sysctl.d/kubernetes.conf <<EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system # Install docker if there is not docker installed if ! command -v docker & > /dev/null then # you can refer this article of Docker Installation: https://docs.docker.com/engine/install/centos/ echo \"[WARN] Docker is not installed, now we are going to install docker for Kubernetes!\" # Remove docker first just in case sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine # Install yum-utils echo \"[INFO] Install yum-utils...\" sudo yum install -y yum-utils echo \"[INFO] Add repo for docker-ce...\" sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo echo \"[INFO] Starting installing Docker...\" sudo yum install -y docker-ce docker-ce-cli- containerd.io echo \"[INFO] Docker installed successfully. Starting docker...\" sudo systemctl start docker sudo systemctl enable docker echo \"[INFO] Docker started...\" sudo docker version else echo \"[INFO] Docker already exists...No need to install it.\" sudo systemctl start docker sudo docker version fi if ! command -v kubeadm & > /dev/null then # There's no kubernetes components installed echo \"[INFO] Add Kubernetes repository into local yum repositories...\" cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF echo \"[INFO] Kubernetes repo successfully added...\" else # Kubernetes related components may be already installed echo \"[WARN] Kubernetes related application or components may be already installed.\" exit fi echo \"[INFO] Start installing Kubernetes components: kubelet, kubeadm, kubectl\" sudo yum install -y kubelet kubeadm kubectl --disableexcludes = kubernetes sudo systemctl enable --now kubelet # After installing kubernetes, we have some steps to do # Set SELinux in permissive mode (effectively disabling it) echo \"[INFO] Set SELinux in permissive mode...\" sudo setenforce 0 sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config # Disable swap echo \"[INFO] Disable Swap...\" sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab sudo swapoff -a # Enable necessary port echo \"[INFO] Start enable some necessary ports for Kubernetes...\" sudo firewall-cmd --add-port ={ 6443 ,2379-2380,30000-32767,10250,10251,10252,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload # append new domain name to hosts file echo \"[INFO] Start writing new domain name for kubernetes, please ensure your input is accurate and correct.\" fileToAppend = \"/etc/hosts\" echo \"If you input a wrong IP or Domain Name, please update it in $fileToAppend manually\" read -p \"Please input ip address of your machine(e.g. 192.168.2.10): \" ipAddr read -p \"Please input the domain name(e.g. 'k8s-master01 k8s-master01.torres.com'): \" domainName ipAddrDomain = \" $ipAddr $domainName \" echo \"You are adding \\\" $ipAddrDomain \\\" as a new line into $fileToAppend .\" echo $ipAddrDomain >> $fileToAppend # Verify the installation, pull images from gcr.io echo \"[INFO] Start pulling relevant images about Kubernetes from gcr.io!\" sudo kubeadm config images pull echo \"Kubernetes installed successfully!!!!!!!!!!!!!!!\" Shell \u811a\u672c\u5df2\u7ecf\u5b8c\u6210\uff0c\u4f60\u4eec\u53ef\u4ee5\u6d4b\u8bd5\u4e00\u4e0b\u8fd9\u4e2a\u811a\u672c\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u5c3d\u7ba1\u8054\u7cfb\u6211\u3002","title":"Installation Script"},{"location":"cloud/kubernetes-java-commands/","tags":["kubernetes","jvm"],"text":"Basic Commands \u00b6 1 2 3 4 5 6 7 8 9 10 # List All Pods kubectl -n <namespace> get pods # List All Services kubectl -n <namespace> get services # Log in to pod kubectl -n <namespace> exec -it <pod-name> -c <container-name> -- sh # Updating... JVM Operaions \u00b6 Heap Dump \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 # \u83b7\u53d6Java\u8fdb\u7a0b\u7684PID ps -ef | grep java # Output # 8 root 1h31 java -Djava.security.egd=file:/dev/./urandom -Dcom.sun.management.jmxremote.rmi.port=5000 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=5000 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=localhost -Xms4g -Xmx4g -Xss512k -XX:+UseG1GC -Xlog:gc*:/ecsg-rsn-bff/gc.log:time,tags:filesize=2048k -jar ./app.jar --spring.profiles.active=perf # PID \u5c31\u662f8 # \u83b7\u53d6heapdump # jcmd <pid> GC.heap_dump -all <file name> jcm 8 GC.heap_dump -all heap.hprof # Compress the heapdump file otherewise heapdump could be very large tar -czvf heapdump.tar.gz heap.hprof \u4eceK8S\u7684pod\u4e2d\u628aheapdump\u6587\u4ef6\u590d\u5236\u51fa\u6765\uff1a 1 2 # kubectl cp <namespace>/<pod_name>:<path_to_file> <local_file_location> kubectl cp ecsg-rsn-bff/rsn-bff-perf-pre-8c7554f5c-4hklv:/ecsg-rsn-bff/heap.hprof /Users/torres.lei/Documents/ECSG/RSN/heap-20220121-1800.hprof File Descriptor \u00b6 \u6253\u5f00\u7684File Descriptor\u6570\u91cf\uff1a 1 lsof -u root | wc -l \u67e5\u770bPID\u5b9e\u9645\u7684File Descriptor\uff1a 1 2 # lsof - p <PID> | wc -l lsof - p 8 | wc -l","title":"Kubernetes\u4e2dJava\u5e94\u7528\u76f8\u5173\u64cd\u4f5c"},{"location":"cloud/kubernetes-java-commands/#basic-commands","text":"1 2 3 4 5 6 7 8 9 10 # List All Pods kubectl -n <namespace> get pods # List All Services kubectl -n <namespace> get services # Log in to pod kubectl -n <namespace> exec -it <pod-name> -c <container-name> -- sh # Updating...","title":"Basic Commands"},{"location":"cloud/kubernetes-java-commands/#jvm-operaions","text":"","title":"JVM Operaions"},{"location":"cloud/kubernetes-java-commands/#heap-dump","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 # \u83b7\u53d6Java\u8fdb\u7a0b\u7684PID ps -ef | grep java # Output # 8 root 1h31 java -Djava.security.egd=file:/dev/./urandom -Dcom.sun.management.jmxremote.rmi.port=5000 -Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.port=5000 -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=localhost -Xms4g -Xmx4g -Xss512k -XX:+UseG1GC -Xlog:gc*:/ecsg-rsn-bff/gc.log:time,tags:filesize=2048k -jar ./app.jar --spring.profiles.active=perf # PID \u5c31\u662f8 # \u83b7\u53d6heapdump # jcmd <pid> GC.heap_dump -all <file name> jcm 8 GC.heap_dump -all heap.hprof # Compress the heapdump file otherewise heapdump could be very large tar -czvf heapdump.tar.gz heap.hprof \u4eceK8S\u7684pod\u4e2d\u628aheapdump\u6587\u4ef6\u590d\u5236\u51fa\u6765\uff1a 1 2 # kubectl cp <namespace>/<pod_name>:<path_to_file> <local_file_location> kubectl cp ecsg-rsn-bff/rsn-bff-perf-pre-8c7554f5c-4hklv:/ecsg-rsn-bff/heap.hprof /Users/torres.lei/Documents/ECSG/RSN/heap-20220121-1800.hprof","title":"Heap Dump"},{"location":"cloud/kubernetes-java-commands/#file-descriptor","text":"\u6253\u5f00\u7684File Descriptor\u6570\u91cf\uff1a 1 lsof -u root | wc -l \u67e5\u770bPID\u5b9e\u9645\u7684File Descriptor\uff1a 1 2 # lsof - p <PID> | wc -l lsof - p 8 | wc -l","title":"File Descriptor"},{"location":"cloud/kubernetes-on-centos/","tags":["kubernetes"],"text":"\u524d\u63d0\u6761\u4ef6 \u00b6 \u4e00\u4e2a Linux \u4e3b\u673a\u3002Kubernetes \u9879\u76ee\u4e3a\u57fa\u4e8e Debian \u548c Red Hat \u7684 Linux \u53d1\u884c\u7248\u63d0\u4f9b\u4e86\u901a\u7528\u7684\u8bf4\u660e\u3002 \u6bcf\u4e2a\u673a\u5668\u81f3\u5c11 2GB \u7684\u5185\u5b58\u3002 \u81f3\u5c11 2 \u4e2a CPU \u96c6\u7fa4\u4e2d\u6240\u6709\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u8fde\u63a5\uff0c\u516c\u7f51\u6216\u5185\u7f51\u90fd\u53ef\u4ee5\u3002 \u6bcf\u4e2a\u8282\u70b9\u7531\u552f\u4e00\u7684\u4e3b\u673a\u540d\uff0cMAC \u5730\u5740\u3002 \u6307\u5b9a\u7684\u7aef\u53e3\u5728\u673a\u5668\u4e0a\u662f\u5f00\u653e\u7684\u3002\u70b9\u51fb \u8fd9\u91cc \u67e5\u770b\u5177\u4f53\u4fe1\u606f\u3002 \u7981\u7528 Swap\u3002\u4e3a\u4e86\u4f7f kubectl \u6b63\u5e38\u5de5\u4f5c\uff0c\u5fc5\u987b\u7981\u7528 swap\u3002 \u8ba9 iptables \u80fd\u53d1\u73b0\u6865\u63a5\u7f51\u7edc\u7684\u6d41\u91cf \u00b6 \u786e\u4fdd br_netfilter \u6a21\u5757\u88ab\u88c5\u8f7d\u4e86\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b8c\u6210\uff1a 1 2 3 4 lsmod | grep br_netfilter # br_netfilter 22256 0 # bridge 151336 2 br_netfilter,ebtable_broute sudo modprobe br_netfilter \u4e3a\u4e86\u8ba9 Linux \u8282\u70b9\u7684 iptables \u80fd\u6b63\u786e\u7684\u89c2\u6d4b\u5230\u6865\u63a5\u6d41\u91cf\uff0c\u9700\u8981\u4fdd\u8bc1 net.bridge.bridge-nf-call-iptables \u88ab\u8bbe\u7f6e\u4e3a1\uff1a 1 2 3 4 5 6 7 sudo tee /etc/sysctl.d/kubernetes.conf <<EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system \u68c0\u67e5\u9700\u8981\u7684\u7aef\u53e3 \u00b6 \u5b89\u88c5 Docker \u00b6 \u53c2\u8003\uff1a Install Docker Engine on CentOS \u5b89\u88c5 Kubernetes \u00b6 \u51c6\u5907 Kubernetes \u670d\u52a1\u5668 \u00b6 \u670d\u52a1\u5668\u7c7b\u578b \u4e3b\u673a\u540d \u5177\u4f53\u4fe1\u606f Master 192.168.2.60 2 CPUs, 2GB Ram Worker 192.168.2.61 2 CPUs, 2GB Ram Worker 192.168.2.62 2 CPUs, 2GB Ram \u5b89\u88c5 kubelet \u548c kubeadm \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF sudo yum install -y kubelet kubeadm kubectl --disableexcludes = kubernetes sudo systemctl enable --now kubelet \u7981\u7528 SELinux \u548c Swap \u00b6 1 2 3 4 5 6 7 # Set SELinux in permissive mode (effectively disabling it) sudo setenforce 0 sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config # Disable swap sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab sudo swapoff -a \u914d\u7f6e\u9632\u706b\u5899 \u00b6 \u542f\u7528 Master \u8282\u70b9\u7aef\u53e3 : 1 2 3 sudo firewall-cmd --add-port ={ 6443 ,2379-2380,10250,10251,10252,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload \u542f\u7528 Worker \u8282\u70b9\u7aef\u53e3 : 1 2 3 sudo firewall-cmd --add-port ={ 10250 ,30000-32767,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload \u9a8c\u8bc1\u5b89\u88c5\u662f\u5426\u6210\u529f \u00b6 \u4e3a\u4e86\u9a8c\u8bc1\u5b89\u88c5\u662f\u5426\u6210\u529f\uff0c\u6211\u4eec\u51c6\u5907\u7528 kubeadm \u521b\u5efa\u4e00\u4e2a cluster\u3002 \u521d\u59cb\u5316 Kubernetes Control Plane (K8s \u63a7\u5236\u5e73\u9762) \u00b6 \u9996\u5148\uff0c\u5411 /etc/hosts \u4e2d\u6dfb\u52a0\u4e0b\u9762\u7684\u4e3b\u673a\u540d\uff1a 192.168.2.60 k8s-master01 k8s-master01.torres.com \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u521d\u59cb\u5316 master \u8282\u70b9\u7684 control plane\uff1a 1 2 3 4 5 # (Optional) You can run this commands to verify the connection with gcr.io sudo kubeadm config images pull # Init Control plane sudo kubeadm init --control-plane-endpoint = k8s-master01.torres.com --node-name = k8s-master01 --upload-certs \u7136\u540e\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u7684\u65e5\u5fd7\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 [ init ] Using Kubernetes version: v1.21.1 [ preflight ] Running pre-flight checks [ WARNING Firewalld ] : firewalld is active, please ensure ports [ 6443 10250 ] are open or your cluster may not function correctly [ WARNING IsDockerSystemdCheck ] : detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\" . Please follow the guide at https://kubernetes.io/docs/setup/cri/ [ preflight ] Pulling images required for setting up a Kubernetes cluster [ preflight ] This might take a minute or two, depending on the speed of your internet connection [ preflight ] You can also perform this action in beforehand using 'kubeadm config images pull' [ certs ] Using certificateDir folder \"/etc/kubernetes/pki\" [ certs ] Generating \"ca\" certificate and key [ certs ] Generating \"apiserver\" certificate and key [ certs ] apiserver serving cert is signed for DNS names [ k8s-master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local localhost.localdomain ] and IPs [ 10 .96.0.1 192 .168.2.60 ] [ certs ] Generating \"apiserver-kubelet-client\" certificate and key [ certs ] Generating \"front-proxy-ca\" certificate and key [ certs ] Generating \"front-proxy-client\" certificate and key [ certs ] Generating \"etcd/ca\" certificate and key [ certs ] Generating \"etcd/server\" certificate and key [ certs ] etcd/server serving cert is signed for DNS names [ localhost localhost.localdomain ] and IPs [ 192 .168.2.60 127 .0.0.1 ::1 ] [ certs ] Generating \"etcd/peer\" certificate and key [ certs ] etcd/peer serving cert is signed for DNS names [ localhost localhost.localdomain ] and IPs [ 192 .168.2.60 127 .0.0.1 ::1 ] [ certs ] Generating \"etcd/healthcheck-client\" certificate and key [ certs ] Generating \"apiserver-etcd-client\" certificate and key [ certs ] Generating \"sa\" key and public key [ kubeconfig ] Using kubeconfig folder \"/etc/kubernetes\" [ kubeconfig ] Writing \"admin.conf\" kubeconfig file [ kubeconfig ] Writing \"kubelet.conf\" kubeconfig file [ kubeconfig ] Writing \"controller-manager.conf\" kubeconfig file [ kubeconfig ] Writing \"scheduler.conf\" kubeconfig file [ kubelet-start ] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\" [ kubelet-start ] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\" [ kubelet-start ] Starting the kubelet [ control-plane ] Using manifest folder \"/etc/kubernetes/manifests\" [ control-plane ] Creating static Pod manifest for \"kube-apiserver\" [ control-plane ] Creating static Pod manifest for \"kube-controller-manager\" [ control-plane ] Creating static Pod manifest for \"kube-scheduler\" [ etcd ] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\" [ wait-control-plane ] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\" . This can take up to 4m0s [ apiclient ] All control plane components are healthy after 13 .004835 seconds [ upload-config ] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace [ kubelet ] Creating a ConfigMap \"kubelet-config-1.21\" in namespace kube-system with the configuration for the kubelets in the cluster [ upload-certs ] Storing the certificates in Secret \"kubeadm-certs\" in the \"kube-system\" Namespace [ upload-certs ] Using certificate key: b8cb86fb2bd01029d07cd1c67a6ae9ca358655595cef1cc7bec5253b64a81037 [ mark-control-plane ] Marking the node localhost.localdomain as control-plane by adding the labels: [ node-role.kubernetes.io/master ( deprecated ) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers ] [ mark-control-plane ] Marking the node localhost.localdomain as control-plane by adding the taints [ node-role.kubernetes.io/master:NoSchedule ] [ bootstrap-token ] Using token: tm2wqn.66pko8ldffracpfs [ bootstrap-token ] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles [ bootstrap-token ] configured RBAC rules to allow Node Bootstrap tokens to get nodes [ bootstrap-token ] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials [ bootstrap-token ] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token [ bootstrap-token ] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster [ bootstrap-token ] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace [ kubelet-finalize ] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key [ addons ] Applied essential addon: CoreDNS [ addons ] Applied essential addon: kube-proxy Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME /.kube sudo cp -i /etc/kubernetes/admin.conf $HOME /.kube/config sudo chown $( id -u ) : $( id -g ) $HOME /.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG = /etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ You can now join any number of the control-plane node running the following command on each as root: kubeadm join k8s-master01:6443 --token tm2wqn.66pko8ldffracpfs \\ --discovery-token-ca-cert-hash sha256:470585a5c3c4706d86d06b23f1960a953960db666798266e528e6faf69981d2e \\ --control-plane --certificate-key b8cb86fb2bd01029d07cd1c67a6ae9ca358655595cef1cc7bec5253b64a81037 Please note that the certificate-key gives access to cluster sensitive data, keep it secret! As a safeguard, uploaded-certs will be deleted in two hours ; If necessary, you can use \"kubeadm init phase upload-certs --upload-certs\" to reload certs afterward. Then you can join any number of worker nodes by running the following on each as root: kubeadm join k8s-master01:6443 --token tm2wqn.66pko8ldffracpfs \\ --discovery-token-ca-cert-hash sha256:470585a5c3c4706d86d06b23f1960a953960db666798266e528e6faf69981d2e \u6211\u4eec\u9700\u8981\u6267\u884c\u65e5\u5fd7\u4e0a\u7684\u547d\u4ee4\u6765\u542f\u7528cluster\uff1a 1 2 3 mkdir -p $HOME /.kube sudo cp -i /etc/kubernetes/admin.conf $HOME /.kube/config sudo chown $( id -u ) : $( id -g ) $HOME /.kube/config \u9a8c\u8bc1 \u00b6 \u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u6765\u9a8c\u8bc1\u96c6\u7fa4\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\uff1a 1 2 3 4 5 6 kubectl cluster-info Kubernetes control plane is running at https://k8s-master01:6443 CoreDNS is running at https://k8s-master01:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use 'kubectl cluster-info dump' . \u5982\u679c\u4f60\u8fd8\u60f3\u770b\u6709\u54ea\u4e9b\u8282\u70b9\uff1a 1 2 3 4 kubectl get nodes NAME STATUS ROLES AGE VERSION localhost.localdomain NotReady control-plane,master 3m15s v1.21.1","title":"Kubernetes on CentOS"},{"location":"cloud/kubernetes-on-centos/#_1","text":"\u4e00\u4e2a Linux \u4e3b\u673a\u3002Kubernetes \u9879\u76ee\u4e3a\u57fa\u4e8e Debian \u548c Red Hat \u7684 Linux \u53d1\u884c\u7248\u63d0\u4f9b\u4e86\u901a\u7528\u7684\u8bf4\u660e\u3002 \u6bcf\u4e2a\u673a\u5668\u81f3\u5c11 2GB \u7684\u5185\u5b58\u3002 \u81f3\u5c11 2 \u4e2a CPU \u96c6\u7fa4\u4e2d\u6240\u6709\u673a\u5668\u4e4b\u95f4\u7684\u7f51\u7edc\u8fde\u63a5\uff0c\u516c\u7f51\u6216\u5185\u7f51\u90fd\u53ef\u4ee5\u3002 \u6bcf\u4e2a\u8282\u70b9\u7531\u552f\u4e00\u7684\u4e3b\u673a\u540d\uff0cMAC \u5730\u5740\u3002 \u6307\u5b9a\u7684\u7aef\u53e3\u5728\u673a\u5668\u4e0a\u662f\u5f00\u653e\u7684\u3002\u70b9\u51fb \u8fd9\u91cc \u67e5\u770b\u5177\u4f53\u4fe1\u606f\u3002 \u7981\u7528 Swap\u3002\u4e3a\u4e86\u4f7f kubectl \u6b63\u5e38\u5de5\u4f5c\uff0c\u5fc5\u987b\u7981\u7528 swap\u3002","title":"\u524d\u63d0\u6761\u4ef6"},{"location":"cloud/kubernetes-on-centos/#iptables","text":"\u786e\u4fdd br_netfilter \u6a21\u5757\u88ab\u88c5\u8f7d\u4e86\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u6765\u5b8c\u6210\uff1a 1 2 3 4 lsmod | grep br_netfilter # br_netfilter 22256 0 # bridge 151336 2 br_netfilter,ebtable_broute sudo modprobe br_netfilter \u4e3a\u4e86\u8ba9 Linux \u8282\u70b9\u7684 iptables \u80fd\u6b63\u786e\u7684\u89c2\u6d4b\u5230\u6865\u63a5\u6d41\u91cf\uff0c\u9700\u8981\u4fdd\u8bc1 net.bridge.bridge-nf-call-iptables \u88ab\u8bbe\u7f6e\u4e3a1\uff1a 1 2 3 4 5 6 7 sudo tee /etc/sysctl.d/kubernetes.conf <<EOF net.bridge.bridge-nf-call-ip6tables = 1 net.bridge.bridge-nf-call-iptables = 1 net.ipv4.ip_forward = 1 EOF sudo sysctl --system","title":"\u8ba9 iptables \u80fd\u53d1\u73b0\u6865\u63a5\u7f51\u7edc\u7684\u6d41\u91cf"},{"location":"cloud/kubernetes-on-centos/#_2","text":"","title":"\u68c0\u67e5\u9700\u8981\u7684\u7aef\u53e3"},{"location":"cloud/kubernetes-on-centos/#docker","text":"\u53c2\u8003\uff1a Install Docker Engine on CentOS","title":"\u5b89\u88c5 Docker"},{"location":"cloud/kubernetes-on-centos/#kubernetes","text":"","title":"\u5b89\u88c5 Kubernetes"},{"location":"cloud/kubernetes-on-centos/#kubernetes_1","text":"\u670d\u52a1\u5668\u7c7b\u578b \u4e3b\u673a\u540d \u5177\u4f53\u4fe1\u606f Master 192.168.2.60 2 CPUs, 2GB Ram Worker 192.168.2.61 2 CPUs, 2GB Ram Worker 192.168.2.62 2 CPUs, 2GB Ram","title":"\u51c6\u5907 Kubernetes \u670d\u52a1\u5668"},{"location":"cloud/kubernetes-on-centos/#kubelet-kubeadm","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo [kubernetes] name=Kubernetes baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\$basearch enabled=1 gpgcheck=1 repo_gpgcheck=1 gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg exclude=kubelet kubeadm kubectl EOF sudo yum install -y kubelet kubeadm kubectl --disableexcludes = kubernetes sudo systemctl enable --now kubelet","title":"\u5b89\u88c5 kubelet \u548c kubeadm"},{"location":"cloud/kubernetes-on-centos/#selinux-swap","text":"1 2 3 4 5 6 7 # Set SELinux in permissive mode (effectively disabling it) sudo setenforce 0 sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config # Disable swap sudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab sudo swapoff -a","title":"\u7981\u7528 SELinux \u548c Swap"},{"location":"cloud/kubernetes-on-centos/#_3","text":"\u542f\u7528 Master \u8282\u70b9\u7aef\u53e3 : 1 2 3 sudo firewall-cmd --add-port ={ 6443 ,2379-2380,10250,10251,10252,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload \u542f\u7528 Worker \u8282\u70b9\u7aef\u53e3 : 1 2 3 sudo firewall-cmd --add-port ={ 10250 ,30000-32767,5473,179,5473 } /tcp --permanent sudo firewall-cmd --add-port ={ 4789 ,8285,8472 } /udp --permanent sudo firewall-cmd --reload","title":"\u914d\u7f6e\u9632\u706b\u5899"},{"location":"cloud/kubernetes-on-centos/#_4","text":"\u4e3a\u4e86\u9a8c\u8bc1\u5b89\u88c5\u662f\u5426\u6210\u529f\uff0c\u6211\u4eec\u51c6\u5907\u7528 kubeadm \u521b\u5efa\u4e00\u4e2a cluster\u3002","title":"\u9a8c\u8bc1\u5b89\u88c5\u662f\u5426\u6210\u529f"},{"location":"cloud/kubernetes-on-centos/#kubernetes-control-plane-k8s","text":"\u9996\u5148\uff0c\u5411 /etc/hosts \u4e2d\u6dfb\u52a0\u4e0b\u9762\u7684\u4e3b\u673a\u540d\uff1a 192.168.2.60 k8s-master01 k8s-master01.torres.com \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u521d\u59cb\u5316 master \u8282\u70b9\u7684 control plane\uff1a 1 2 3 4 5 # (Optional) You can run this commands to verify the connection with gcr.io sudo kubeadm config images pull # Init Control plane sudo kubeadm init --control-plane-endpoint = k8s-master01.torres.com --node-name = k8s-master01 --upload-certs \u7136\u540e\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u7684\u65e5\u5fd7\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 [ init ] Using Kubernetes version: v1.21.1 [ preflight ] Running pre-flight checks [ WARNING Firewalld ] : firewalld is active, please ensure ports [ 6443 10250 ] are open or your cluster may not function correctly [ WARNING IsDockerSystemdCheck ] : detected \"cgroupfs\" as the Docker cgroup driver. The recommended driver is \"systemd\" . Please follow the guide at https://kubernetes.io/docs/setup/cri/ [ preflight ] Pulling images required for setting up a Kubernetes cluster [ preflight ] This might take a minute or two, depending on the speed of your internet connection [ preflight ] You can also perform this action in beforehand using 'kubeadm config images pull' [ certs ] Using certificateDir folder \"/etc/kubernetes/pki\" [ certs ] Generating \"ca\" certificate and key [ certs ] Generating \"apiserver\" certificate and key [ certs ] apiserver serving cert is signed for DNS names [ k8s-master01 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local localhost.localdomain ] and IPs [ 10 .96.0.1 192 .168.2.60 ] [ certs ] Generating \"apiserver-kubelet-client\" certificate and key [ certs ] Generating \"front-proxy-ca\" certificate and key [ certs ] Generating \"front-proxy-client\" certificate and key [ certs ] Generating \"etcd/ca\" certificate and key [ certs ] Generating \"etcd/server\" certificate and key [ certs ] etcd/server serving cert is signed for DNS names [ localhost localhost.localdomain ] and IPs [ 192 .168.2.60 127 .0.0.1 ::1 ] [ certs ] Generating \"etcd/peer\" certificate and key [ certs ] etcd/peer serving cert is signed for DNS names [ localhost localhost.localdomain ] and IPs [ 192 .168.2.60 127 .0.0.1 ::1 ] [ certs ] Generating \"etcd/healthcheck-client\" certificate and key [ certs ] Generating \"apiserver-etcd-client\" certificate and key [ certs ] Generating \"sa\" key and public key [ kubeconfig ] Using kubeconfig folder \"/etc/kubernetes\" [ kubeconfig ] Writing \"admin.conf\" kubeconfig file [ kubeconfig ] Writing \"kubelet.conf\" kubeconfig file [ kubeconfig ] Writing \"controller-manager.conf\" kubeconfig file [ kubeconfig ] Writing \"scheduler.conf\" kubeconfig file [ kubelet-start ] Writing kubelet environment file with flags to file \"/var/lib/kubelet/kubeadm-flags.env\" [ kubelet-start ] Writing kubelet configuration to file \"/var/lib/kubelet/config.yaml\" [ kubelet-start ] Starting the kubelet [ control-plane ] Using manifest folder \"/etc/kubernetes/manifests\" [ control-plane ] Creating static Pod manifest for \"kube-apiserver\" [ control-plane ] Creating static Pod manifest for \"kube-controller-manager\" [ control-plane ] Creating static Pod manifest for \"kube-scheduler\" [ etcd ] Creating static Pod manifest for local etcd in \"/etc/kubernetes/manifests\" [ wait-control-plane ] Waiting for the kubelet to boot up the control plane as static Pods from directory \"/etc/kubernetes/manifests\" . This can take up to 4m0s [ apiclient ] All control plane components are healthy after 13 .004835 seconds [ upload-config ] Storing the configuration used in ConfigMap \"kubeadm-config\" in the \"kube-system\" Namespace [ kubelet ] Creating a ConfigMap \"kubelet-config-1.21\" in namespace kube-system with the configuration for the kubelets in the cluster [ upload-certs ] Storing the certificates in Secret \"kubeadm-certs\" in the \"kube-system\" Namespace [ upload-certs ] Using certificate key: b8cb86fb2bd01029d07cd1c67a6ae9ca358655595cef1cc7bec5253b64a81037 [ mark-control-plane ] Marking the node localhost.localdomain as control-plane by adding the labels: [ node-role.kubernetes.io/master ( deprecated ) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers ] [ mark-control-plane ] Marking the node localhost.localdomain as control-plane by adding the taints [ node-role.kubernetes.io/master:NoSchedule ] [ bootstrap-token ] Using token: tm2wqn.66pko8ldffracpfs [ bootstrap-token ] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles [ bootstrap-token ] configured RBAC rules to allow Node Bootstrap tokens to get nodes [ bootstrap-token ] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials [ bootstrap-token ] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token [ bootstrap-token ] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster [ bootstrap-token ] Creating the \"cluster-info\" ConfigMap in the \"kube-public\" namespace [ kubelet-finalize ] Updating \"/etc/kubernetes/kubelet.conf\" to point to a rotatable kubelet client certificate and key [ addons ] Applied essential addon: CoreDNS [ addons ] Applied essential addon: kube-proxy Your Kubernetes control-plane has initialized successfully! To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME /.kube sudo cp -i /etc/kubernetes/admin.conf $HOME /.kube/config sudo chown $( id -u ) : $( id -g ) $HOME /.kube/config Alternatively, if you are the root user, you can run: export KUBECONFIG = /etc/kubernetes/admin.conf You should now deploy a pod network to the cluster. Run \"kubectl apply -f [podnetwork].yaml\" with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/ You can now join any number of the control-plane node running the following command on each as root: kubeadm join k8s-master01:6443 --token tm2wqn.66pko8ldffracpfs \\ --discovery-token-ca-cert-hash sha256:470585a5c3c4706d86d06b23f1960a953960db666798266e528e6faf69981d2e \\ --control-plane --certificate-key b8cb86fb2bd01029d07cd1c67a6ae9ca358655595cef1cc7bec5253b64a81037 Please note that the certificate-key gives access to cluster sensitive data, keep it secret! As a safeguard, uploaded-certs will be deleted in two hours ; If necessary, you can use \"kubeadm init phase upload-certs --upload-certs\" to reload certs afterward. Then you can join any number of worker nodes by running the following on each as root: kubeadm join k8s-master01:6443 --token tm2wqn.66pko8ldffracpfs \\ --discovery-token-ca-cert-hash sha256:470585a5c3c4706d86d06b23f1960a953960db666798266e528e6faf69981d2e \u6211\u4eec\u9700\u8981\u6267\u884c\u65e5\u5fd7\u4e0a\u7684\u547d\u4ee4\u6765\u542f\u7528cluster\uff1a 1 2 3 mkdir -p $HOME /.kube sudo cp -i /etc/kubernetes/admin.conf $HOME /.kube/config sudo chown $( id -u ) : $( id -g ) $HOME /.kube/config","title":"\u521d\u59cb\u5316 Kubernetes Control Plane (K8s \u63a7\u5236\u5e73\u9762)"},{"location":"cloud/kubernetes-on-centos/#_5","text":"\u8fd0\u884c\u4ee5\u4e0b\u6307\u4ee4\u6765\u9a8c\u8bc1\u96c6\u7fa4\u662f\u5426\u521d\u59cb\u5316\u6210\u529f\uff1a 1 2 3 4 5 6 kubectl cluster-info Kubernetes control plane is running at https://k8s-master01:6443 CoreDNS is running at https://k8s-master01:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy To further debug and diagnose cluster problems, use 'kubectl cluster-info dump' . \u5982\u679c\u4f60\u8fd8\u60f3\u770b\u6709\u54ea\u4e9b\u8282\u70b9\uff1a 1 2 3 4 kubectl get nodes NAME STATUS ROLES AGE VERSION localhost.localdomain NotReady control-plane,master 3m15s v1.21.1","title":"\u9a8c\u8bc1"},{"location":"java/","text":"Java\u662f\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u8ba1\u7b97\u673a\u7f16\u7a0b\u8bed\u8a00\uff0c\u62e5\u6709\u8de8\u5e73\u53f0\u3001\u9762\u5411\u5bf9\u8c61\u3001\u6cdb\u578b\u7f16\u7a0b\u7684\u7279\u6027\uff0c\u5e7f\u6cdb\u5e94\u7528\u4e8e\u4f01\u4e1a\u7ea7Web\u5e94\u7528\u5f00\u53d1\u548c\u79fb\u52a8\u5e94\u7528\u5f00\u53d1\u3002 \u76ee\u524dJava\u88ab\u5e7f\u6cdb\u7684\u5e94\u7528\u4e8e\u5927\u578b\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\uff0c\u672c\u7cfb\u5217\u6587\u7ae0\u4e3b\u8981\u8bb2\u8ff0Java\u76f8\u5173\u6280\u672f\u7684\u5404\u79cd\u5e94\u7528\u548c\u539f\u7406\u3002 Java\u5783\u573e\u6536\u96c6\u5668 Synchronized\u5b66\u4e60\u7b14\u8bb0 Volatile\u5b66\u4e60\u7b14\u8bb0 JVM \u5185\u5b58\u533a\u57df\u5b66\u4e60\u7b14\u8bb0 Spring Cloud Ribbon\u6e90\u7801\u89e3\u6790","title":"Java\u7b80\u4ecb"},{"location":"java/garbage-collector/","tags":["jvm","gc"],"text":"\u5173\u4e8e Java \u56de\u6536\u7684\u6587\u7ae0\u5927\u540c\u5c0f\u5f02\uff0c\u6211\u5c06\u6211\u67e5\u9605\u7684\u5404\u79cd\u8d44\u6599\u6574\u5408\u4e86\u4e00\u4e0b\uff0c\u53d6\u6587\u7ae0\u4e2d\u5199\u7684\u597d\u7684\u90e8\u5206\u4ee5\u53ca\u81ea\u6211\u603b\u7ed3\uff0c\u5199\u51fa\u8fd9\u7bc7\u6587\u7ae0\u3002 Java \u5806\u7a7a\u95f4\u7684\u57fa\u672c\u7ed3\u6784 \u00b6 \u4e0a\u56fe\u7684 Eden \u533a\u548c Survivor From \u533a\u3001Survivor To \u533a\u90fd\u5c5e\u4e8e\u65b0\u751f\u4ee3\uff0cTenured \u533a\u5c5e\u4e8e\u8001\u5e74\u4ee3\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u5bf9\u8c61\u9996\u5148\u4f1a\u5728 Eden \u533a\u57df\u5206\u914d\uff0c\u5728\u7b2c\u4e00\u6b21\u65b0\u751f\u4ee3\u5783\u573e\u56de\u6536\uff08Minor GC\uff09\u540e\uff0c\u5982\u679c\u5bf9\u8c61\u8fd8\u5b58\u6d3b\uff0c\u5219\u8be5\u5bf9\u8c61\u4f1a\u8fdb\u5165 Survivor To \u533a\uff0c\u5e76\u4e14\u5e74\u9f84\u4f1a\u52a01\uff08\u7b2c\u4e00\u6b21\u4ece Eden \u5230 Survivor \u533a\u65f6\u5e74\u9f84\u662f1\uff09\uff0c\u5f53\u5e74\u9f84\u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff08\u9ed8\u8ba4\u4e3a 15 \u5c81\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u5fc5\u987b\u5230\u8fbe 15 \u5c81\u624d\u4f1a\u8fdb\u5165\u8001\u5e74\u4ee3\u533a\uff09\uff0c\u5bf9\u8c61\u4f1a\u88ab\u664b\u5347\u5230\u8001\u5e74\u4ee3\u4e2d\uff0c\u5bf9\u8c61\u664b\u5347\u5230\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u9600\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 -XX:MaxTenuringThreshold \u6765\u63a7\u5236\u3002\u7ecf\u8fc7\u8fd9\u6b21 GC \u4e4b\u540e\uff0cEden \u533a \u548c From \u533a\u5df2\u7ecf\u88ab\u6e05\u7a7a\uff0c\u8fd9\u65f6\u5019\uff0cFrom \u548c To \u4f1a\u4ea4\u6362\u4ed6\u4eec\u7684\u89d2\u8272\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u65f6\u65b0\u7684 Survivor To \u533a\u5c31\u662f GC \u4e4b\u524d\u7684 Survivor From \u533a\uff0c\u65b0\u7684 Survivor From \u533a\u5c31\u662f GC \u4e4b\u524d\u7684 Survivor To \u533a\u3002Minor GC \u4f1a\u4e00\u76f4\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230 Survivor To \u533a\u88ab\u586b\u6ee1\uff0cTo \u533a\u88ab\u586b\u6ee1\u4e4b\u540e\uff0c\u4f1a\u5c06\u6240\u6709\u5bf9\u8c61\u79fb\u52a8\u5230\u8001\u5e74\u4ee3\u4e2d\u3002 \u5806\u5185\u5b58\u5e38\u89c1\u7684\u5206\u914d\u7b56\u7565\uff1a \u5bf9\u8c61\u4f18\u5148\u5206\u914d\u5728 Eden \u533a \u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3 \u957f\u671f\u5b58\u6d3b\u7684\u5bf9\u8c61\u5c06\u8fdb\u5165\u8001\u5e74\u4ee3 Java \u5783\u573e\u6536\u96c6\u7b97\u6cd5 \u00b6 \u6807\u8bb0 - \u6e05\u9664\u7b97\u6cd5 \u00b6 \u8be5\u7b97\u6cd5\u9996\u5148\u6807\u8bb0\u51fa\u9700\u8981\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u5728\u6807\u8bb0\u5b8c\u6210\u540e\u7edf\u4e00\u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u3002\u8be5\u7b97\u6cd5\u662f\u5783\u573e\u56de\u6536\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u540e\u7eed\u7684\u7b97\u6cd5\u90fd\u662f\u5bf9\u5176\u4e0d\u8db3\u8fdb\u884c\u6539\u8fdb\u5f97\u5230\u7684\u3002\u5b83\u4f1a\u5e26\u6765\u4e24\u4e2a\u5f88\u660e\u663e\u7684\u95ee\u9898\uff1a \u6548\u7387\u95ee\u9898 \u7a7a\u95f4\u6d6a\u8d39\u95ee\u9898\uff08\u6807\u8bb0\u6e05\u9664\u540e\u4f1a\u4ea7\u751f\u5927\u91cf\u4e0d\u8fde\u7eed\u7684\u788e\u7247\uff0c\u5bfc\u81f4\u5927\u91cf\u7a7a\u95f4\u65e0\u6cd5\u4f7f\u7528\uff09 \u590d\u5236\u7b97\u6cd5 \u00b6 \u5c06\u5806\u5185\u5b58\u5206\u4e3a\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\uff0c\u6bcf\u6b21\u53ea\u4f7f\u7528\u4e00\u5757\u3002\u8fd9\u5757\u5185\u5b58\u4f7f\u7528\u5b8c\u540e\uff0c\u5c06\u8fd8\u5b58\u6d3b\u7684\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u628a\u4f7f\u7528\u7684\u7a7a\u95f4\u4e00\u6b21\u5168\u90e8\u6e05\u7406\uff0c\u8fd9\u6837\u6bcf\u6b21\u56de\u6536\u90fd\u53ea\u5bf9\u5185\u5b58\u7684\u4e00\u534a\u8fdb\u884c\u56de\u6536\u3002 \u8fd9\u6837\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u95ee\u9898\uff0c\u5c31\u597d\u6bd4\u6211\u4eec\u4e70\u4e86200\u5e73\u7684\u623f\u5b50\uff0c\u5374\u53ea\u80fd\u4f7f\u7528100\u5e73\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u4f7f\u7528\u7a7a\u95f4\u7684\u7f29\u5c0f\u3002 \u6807\u8bb0 - \u6574\u7406\u7b97\u6cd5 \u00b6 \u9488\u5bf9\u8001\u5e74\u4ee3\u7279\u70b9\u7279\u51fa\u7684\u4e00\u79cd\u6807\u8bb0\u7b97\u6cd5\uff0c\u8fc7\u7a0b\u4e0e\u201c\u6807\u8bb0 - \u6e05\u9664\u201d\u7b97\u6cd5\u4e00\u6837\uff0c\u4f46\u662f\u6807\u8bb0\u4e4b\u540e\u4e0d\u662f\u76f4\u63a5\u5bf9\u53ef\u56de\u6536\u5bf9\u8c61\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u8ba9\u6240\u6709\u5b58\u6d3b\u5bf9\u8c61\u5411\u4e00\u7aef\u79fb\u52a8\uff0c\u7136\u540e\u6e05\u7406\u6389\u5b58\u6d3b\u5bf9\u8c61\u7aef\u8fb9\u754c\u4ee5\u5916\u7684\u5185\u5b58\u3002 \u5206\u4ee3\u6536\u96c6\u7b97\u6cd5 \u00b6 Question \u95ee\u9898\uff1aHotSpot \u4e3a\u4ec0\u4e48\u8981\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff1f \u6839\u636e\u5bf9\u8c61\u5b58\u6d3b\u5468\u671f\u7684\u4e0d\u540c\u5c06\u5185\u5b58\u5206\u4e3a\u51e0\u5757\uff08\u4e00\u822c\u5c06 Java \u5806\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u5404\u5e74\u4ee3\u7684\u7279\u70b9\u6765\u9009\u62e9\u5408\u9002\u7684\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u3002 \u6bd4\u5982\u5728\u65b0\u751f\u4ee3\u4e2d\uff0c\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u90fd\u4f1a\u6709\u5927\u91cf\u7684\u5bf9\u8c61\u6b7b\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u590d\u5236\u7b97\u6cd5\uff0c\u53ea\u9700\u8981\u4ed8\u51fa\u5c11\u91cf\u5bf9\u8c61\u7684\u590d\u5236\u6210\u672c\u5219\u53ef\u4ee5\u5b8c\u6210\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u3002\u800c\u8001\u5e74\u4ee3\u4e2d\u5bf9\u8c61\u7684\u5b58\u6d3b\u51e0\u7387\u90fd\u662f\u6bd4\u8f83\u9ad8\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u95f4\u5bf9\u5b83\u8fdb\u884c\u5206\u914d\u62c5\u4fdd\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u9009\u62e9 \u201c\u6807\u8bb0 - \u6e05\u9664\u201d \u6216\u8005 \u201c\u6807\u8bb0 - \u6574\u7406\u201d \u7b97\u6cd5\u8fdb\u884c\u5783\u573e\u6536\u96c6\u3002 \u5783\u573e\u6536\u96c6\u5668 \u00b6 \u56fe\u7247\u6765\u6e90\uff1a \u8bfb\u4e66\u7b14\u8bb0\u2014\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a1 \u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668 - Serial \u00b6 \u4e32\u884c\u6536\u96c6\u5668\u4e3b\u8981\u6709\u4e24\u4e2a\u7279\u70b9\uff1a1\u3001\u4f7f\u7528\u5355\u7ebf\u7a0b\u8fdb\u884c\u5783\u573e\u56de\u6536\uff1b2\u3001\u72ec\u5360\u5f0f\u7684\u5783\u573e\u56de\u6536\u3002 \u5728\u4e32\u884c\u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\uff0cJava \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u7ebf\u7a0b\u90fd\u9700\u8981\u6682\u505c\uff0c\u7b49\u5f85\u5783\u573e\u56de\u6536\u5b8c\u6210\uff0c\u8fd9\u6837\u5c31\u4f1a\u9020\u6210\u8f83\u5dee\u7684\u7528\u6237\u4f53\u9a8c\u3002\u4f46\u662f\u4e32\u884c\u6536\u96c6\u5668\u4ecd\u7136\u662f\u4e00\u4e2a\u6210\u719f\u7684\u3001\u7ecf\u8fc7\u957f\u65f6\u95f4\u751f\u4ea7\u73af\u5883\u8003\u9a8c\u7684\u6781\u4e3a\u9ad8\u6548\u7684\u6536\u96c6\u5668\u3002 \u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u91c7\u7528 \u590d\u5236\u7b97\u6cd5 \uff0c\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355\uff0c\u5e76\u4e14\u6ca1\u6709\u7ebf\u7a0b\u5207\u6362\u7684\u5f00\u9500\u3002\u5728 HotSpot \u865a\u62df\u673a\u4e2d\uff0c\u4f7f\u7528 -XX:+UseSerialGC \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u548c\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u3002\u5f53 JVM \u5728 Client \u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u3002\u4e00\u6b21\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u7684\u5de5\u4f5c\u8f93\u51fa\u65e5\u5fd7\u7c7b\u4f3c\u4e8e\u4e0b\uff08\u4f7f\u7528 -XX:PrintGCDetails \u5f00\u5173\uff09\uff1a 1 2 3 4 [ GC [ DefNew : 3468 K -> 150 K ( 9216 K ), 0.0028638 secs ][ Tenured : 1562 K -> 1712 K ( 10240 K ), 0.0084220 secs ] 3468 K -> 1712 K ( 19456 K ), [ Perm : 377 K -> 377 K ( 12288 K ) ] , 0.0113816 secs ] [ Times : user = 0.02 sys = 0.00 , real = 0.01 secs ] \u5b83\u663e\u793a\u4e86\u5783\u573e\u56de\u6536\u4e4b\u524d\u65b0\u751f\u4ee3\u7684\u5360\u7528\u5185\u5b58\u548c\u5783\u573e\u56de\u6536\u540e\u7684\u5360\u7528\u5185\u5b58\uff0c\u4ee5\u53ca\u5783\u573e\u56de\u6536\u7684\u65f6\u95f4\u3002 \u65b0\u751f\u4ee3\u5e76\u884c\u6536\u96c6\u5668 - ParNew \u00b6 \u5b83\u662f\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u7684\u591a\u7ebf\u7a0b\u7248\u672c\uff0c\u5783\u573e\u56de\u6536\u65f6\u4e5f\u4f1a\u6682\u505c Java \u5e94\u7528\u7a0b\u5e8f\u7684\u7ebf\u7a0b\u3002\u5b83\u9664\u4e86\u4f7f\u7528\u591a\u7ebf\u7a0b\u5904\u7406\u5783\u573e\u56de\u6536\u5916\uff0c\u5176\u4ed6\u7684\u529f\u80fd\u4e0e Serial \u6536\u96c6\u5668\u4e00\u6837\u3002\u5728\u5355 CPU \u7684\u73af\u5883\u4e0b\uff0cParNew \u6536\u96c6\u5668\u7684\u8868\u73b0\u4e0d\u4f1a\u6bd4 Serial \u66f4\u4f18\u79c0\u3002 Parallel Scavenge \u6536\u96c6\u5668 \u00b6 Parallel Scavenge \u6536\u96c6\u5668\u4e5f\u662f\u4f7f\u7528\u590d\u5236\u7b97\u6cd5\u7684\u591a\u7ebf\u7a0b\u5783\u573e\u6536\u96c6\u5668\uff0c\u5b83\u770b\u4e0a\u53bb\u51e0\u4e4e\u548c ParNer \u4e00\u6a21\u4e00\u6837\u3002 \u4f46\u662f Parallel Scavenge \u6536\u96c6\u5668\u7684\u5173\u6ce8\u70b9\u662f\u541e\u5410\u91cf\uff08\u9ad8\u6548\u7387\u7684\u5229\u7528 CPU\uff09\uff0c\u541e\u5410\u91cf\u5c31\u662f CPU \u4e2d\u7528\u4e8e\u8fd0\u884c\u7528\u6237\u4ee3\u7801\u7684\u65f6\u95f4\u4e0e CPU \u603b\u6d88\u8017\u65f6\u95f4\u7684\u6bd4\u503c\u3002\u800c CMS \u7b49\u5783\u573e\u6536\u96c6\u5668\u5173\u6ce8\u7684\u66f4\u591a\u7684\u662f\u7528\u6237\u7ebf\u7a0b\u7684\u505c\u987f\u65f6\u95f4\uff0c\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c\u3002 Parallel Scavenge \u6536\u96c6\u5668\u63d0\u4f9b\u4e86\u5f88\u591a\u53c2\u6570\u4f9b\u7528\u6237\u627e\u5230\u6700\u9002\u5408\u7684\u505c\u987f\u65f6\u95f4\u6216\u6700\u5927\u7684\u541e\u5410\u91cf\u3002 1 2 -XX:UseParallelGC // \u4f7f\u7528 Parrallel \u6536\u96c6\u5668\uff08\u65b0\u751f\u4ee3\uff09\uff0c\u8001\u5e74\u4ee3\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668 -XX:UseParallelOldGC // \u4f7f\u7528 Parallel \u6536\u96c6\u5668\uff0c\u8001\u5e74\u4ee3\u5e76\u884c \u6b64\u6536\u96c6\u5668\u4e2d\uff0c\u65b0\u751f\u4ee3\u91c7\u7528\u590d\u5236\u7b97\u6cd5\uff0c\u8001\u5e74\u4ee3\u91c7\u7528\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5 \u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668 - Serial Old \u00b6 \u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u662f Serial \u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u540c\u6837\u662f\u5355\u7ebf\u7a0b\uff0c\u4f46\u662f\u5b83\u4f7f\u7528 \u6807\u8bb0-\u6574\u7406\u7b97\u6cd5 \u3002\u4ed6\u4e5f\u662f\u4e00\u4e2a\u4e32\u884c\u7684\u3001\u72ec\u5360\u5f0f\u7684\u5783\u573e\u56de\u6536\u5668\u3002\u7531\u4e8e\u8001\u5e74\u4ee3\u5783\u573e\u56de\u6536\u901a\u5e38\u4f1a\u4f7f\u7528\u6bd4\u65b0\u751f\u4ee3\u5783\u573e\u56de\u6536\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u5728\u5806\u7a7a\u95f4\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u65e6\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u542f\u52a8\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f88\u53ef\u80fd\u4f1a\u56e0\u6b64\u505c\u987f\u51e0\u79d2\u751a\u81f3\u66f4\u957f\u65f6\u95f4\u3002\u4f46\u662fSerial Old \u6536\u96c6\u5668\u53ef\u4ee5\u548c\u591a\u79cd\u65b0\u751f\u4ee3\u6536\u96c6\u5668\u914d\u5408\u4f7f\u7528\uff0c\u800c\u4e14\u53ef\u4ee5\u4f5c\u4e3a CMS \u6536\u96c6\u5668\u7684\u5907\u7528\u6536\u96c6\u5668\u3002\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 -XX:+UseSerialGC \u5c06\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668\uff0c\u4f7f\u7528 -XX:UseParallelOldGC \u8bbe\u7f6e\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u5e76\u884c\u6536\u96c6\u5668\u3002 Parallel Old \u6536\u96c6\u5668 \u00b6 Parallel Scavenge \u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\u3002 \u8be5\u6536\u96c6\u5668\u91c7\u7528\u201d\u6807\u8bb0-\u6574\u7406\u201c\u7b97\u6cd5\u3002\u6ce8\u91cd\u541e\u5410\u91cf\u4ee5\u53ca CPU \u8d44\u6e90\u7684\u573a\u5408\uff0c\u90fd\u53ef\u4ee5\u4f18\u5148\u8003\u8651 Parallel Scavenge \u548c Parallel Old \u6536\u96c6\u5668\u3002 CMS \u6536\u96c6\u5668 \u00b6 CMS (Concurrent Mark Sweep) \u6536\u96c6\u5668\u662f\u4e00\u79cd\u4ee5 \u83b7\u53d6\u6700\u77ed\u56de\u6536\u505c\u987f\u65f6\u95f4 \u4e3a\u76ee\u6807\u7684\u6536\u96c6\u5668\uff0c\u5b83\u975e\u5e38\u7b26\u5408\u7f51\u7ad9\u6216\u8005 B/S \u7cfb\u7edf\u7684\u670d\u52a1\u7aef\u4e0a\u7684 Java \u5e94\u7528\u7b49\u91cd\u89c6\u54cd\u5e94\u901f\u5ea6\u7684\u573a\u666f\u3002\u4ece\u540d\u5b57\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u662f\u57fa\u4e8e \u201c\u6807\u8bb0-\u6e05\u9664\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002 CMS \u6536\u96c6\u5668\u7684\u6574\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u4e3a\u4ee5\u4e0b 4 \u4e2a\u6b65\u9aa4\uff1a \u521d\u59cb\u6807\u8bb0 \uff1a\u6682\u505c\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\uff0c\u6807\u8bb0 GC Roots \u80fd\u76f4\u63a5\u5173\u8054\u7684\u5bf9\u8c61\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u5e76\u53d1\u6807\u8bb0 \uff1a\u540c\u65f6\u5f00\u542f GC \u7ebf\u7a0b\u548c\u7528\u6237\u7ebf\u7a0b\uff0c\u7528\u95ed\u5305\u7ed3\u6784\u53bb\u8bb0\u5f55\u53ef\u8fbe\u5bf9\u8c61\u3002\u4f46\u662f\u8fd9\u4e2a\u9636\u6bb5\u7ed3\u675f\u540e\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u95ed\u5305\u5305\u542b\u6240\u6709\u7684\u53ef\u8fbe\u5bf9\u8c61\uff0c\u56e0\u4e3a\u7528\u6237\u7ebf\u7a0b\u53ef\u80fd\u540c\u65f6\u4f1a\u66f4\u65b0\u5f15\u7528\u57df\uff0c\u6240\u4ee5 GC \u7ebf\u7a0b\u65e0\u6cd5\u4fdd\u8bc1\u53ef\u8fbe\u6027\u5206\u6790\u7684\u5b9e\u65f6\u6027\u3002\u6240\u4ee5\u8fd9\u4e2a\u9636\u6bb5\u5c31\u662f GC Roots Tracing \u8fc7\u7a0b\uff0c\u8bb0\u5f55\u53d1\u751f\u5f15\u7528\u66f4\u65b0\u7684\u5730\u65b9\u3002 \u91cd\u65b0\u6807\u8bb0 \uff1a\u4fee\u6b63\u5e76\u53d1\u6807\u8bb0\u671f\u95f4\u53d1\u751f\u5f15\u7528\u53d8\u5316\u7684\u90a3\u4e00\u90e8\u5206\u5bf9\u8c61\u3002\u8fd9\u4e00\u9636\u6bb5\u7684\u505c\u987f\u65f6\u95f4\u4f1a\u6bd4\u521d\u59cb\u6807\u8bb0\u9636\u6bb5\u7684\u65f6\u95f4\u7a0d\u957f\uff0c\u4f46\u8fdc\u8fdc\u6bd4\u5e76\u53d1\u6807\u8bb0\u7684\u65f6\u95f4\u77ed\u3002 \u5e76\u53d1\u6e05\u9664 \uff1a\u5f00\u542f\u7528\u6237\u7ebf\u7a0b\uff0c\u540c\u65f6 GC \u7ebf\u7a0b\u5bf9\u672a\u6807\u8bb0\u7684\u533a\u57df\u8fdb\u884c\u6e05\u9664\u3002 \u4f18\u70b9\uff1a\u5e76\u53d1\uff0c\u4f4e\u505c\u987f \u7f3a\u70b9\uff1a 1\u3001\u5f53\u6b21\u6536\u96c6\u65e0\u6cd5\u5904\u7406\u5e76\u53d1\u6807\u8bb0\u65f6\u7528\u6237\u7ebf\u7a0b\u4ea7\u751f\u7684\u65b0\u7684\u5783\u573e\u3002 2\u3001\u56e0\u4e3a\u4f7f\u7528 \u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u5f88\u591a\u5185\u5b58\u7a7a\u95f4\u788e\u7247\uff0c\u5bfc\u81f4\u5f53\u524d\u5806\u4e2d\u8001\u5e74\u4ee3\u7a7a\u95f4\u6709\u5269\u4f59\uff0c\u4f46\u662f\u65e0\u6cd5\u627e\u5230\u8db3\u591f\u5927\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u5206\u914d\u5f53\u524d\u5bf9\u8c61\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u89e6\u53d1\u4e00\u6b21 Full GC\u3002 CMS \u5783\u573e\u6536\u96c6\u5668\u7684\u4f18\u5316 \u00b6 -XX:ParallelCMSThreads \uff1a\u624b\u52a8\u8bbe\u7f6e CMS \u7684\u7ebf\u7a0b\u6570\u91cf\u3002CMS \u9ed8\u8ba4\u542f\u52a8\u7684\u7ebf\u7a0b\u662f (ParallelGCThreads+3)/4) \uff0c\u5176\u4e2d ParallelGCThreads \u662f\u65b0\u751f\u4ee3\u5e76\u884c\u6536\u96c6\u5668\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 -XX:CMSInitiatingOccupancyFraction \uff1aCMS \u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u9600\u503c\uff08\u5f53\u524d\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\u9600\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a 68\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\u8fbe\u5230 68% \u65f6\uff0c\u4f1a\u6267\u884c\u4e00\u6b21 CMS \u56de\u6536\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5185\u5185\u5b58\u589e\u957f\u5f88\u5feb\uff0c\u5728 CMS \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5\uff08\u7528\u6237\u7ebf\u7a0b\u4f1a\u5e76\u884c\u6267\u884c\uff09\uff0c\u5c31\u4f1a\u5bfc\u81f4 CMS \u56de\u6536\u5931\u8d25\uff0cJVM \u5c06\u542f\u52a8\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002\u8fd9\u6837\u4f1a\u9020\u6210\u7ebf\u7a0b\u7684\u505c\u987f\uff0c\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5c06 -XX:CMSInitiatingOccupancyFraction \u8c03\u5c0f\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u589e\u957f\u7f13\u6162\u7684\u8bdd\uff0c\u53ef\u4ee5\u9002\u5f53\u8c03\u5927\u8fd9\u4e2a\u9600\u503c\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u964d\u4f4e CMS \u7684\u89e6\u53d1\u9891\u7387 -XX:+UseCMSCompactAtFullCollection \uff1a\u56e0\u4e3a CMS \u91c7\u7528 \u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\uff0c\u4f1a\u9020\u6210\u5927\u91cf\u5185\u5b58\u788e\u7247\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u5206\u914d\u8f83\u5927\u7684\u5bf9\u8c61\uff0c\u800c\u89e6\u53d1 Full GC\uff0c\u8fd9\u5f88\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u3002 \u8bbe\u7f6e\u6b64\u53c2\u6570\u53ef\u4ee5\u4f7f CMS \u5728\u5783\u573e\u6536\u96c6\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u788e\u7247\u6574\u7406\uff08\u5185\u5b58\u788e\u7247\u6574\u7406\u4e0d\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff09\u3002\u53ef\u4ee5\u4f7f\u7528 -XX:CMSFullGCsBeforeCompaction \u53c2\u6570\u6765\u8bbe\u5b9a\u8fdb\u884c\u591a\u5c11\u6b21 CMS \u56de\u6536\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u538b\u7f29\u3002 G1 \u6536\u96c6\u5668 \u00b6 G1 GC \u662f JDK 7 \u7684\u65b0\u7279\u6027\u4e4b\u4e00 \uff0c\u5b83\u7684\u76ee\u6807\u662f\u4f5c\u4e3a\u4e00\u6b3e\u670d\u52a1\u5668\u7684\u5783\u573e\u6536\u96c6\u5668\u3002\u6240\u4ee5\u5b83\u5728\u541e\u5410\u91cf\u548c\u505c\u987f\u63a7\u5236\u4e0a\uff0c\u90fd\u8981\u4f18\u4e8e CMS\u3002 \u4ee5\u4e0b\u5f15\u7528\u81ea JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668 G1 (Garbage First) \u7684\u5404\u4ee3\u5b58\u50a8\u5730\u5740\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u6bcf\u4e00\u4ee3\u90fd\u4f7f\u7528\u4e86 n \u4e2a\u4e0d\u8fde\u7eed\u7684\u5927\u5c0f\u76f8\u540c\u7684 region\uff0c \u6bcf\u4e2a region \u5360\u6709\u4e00\u5757\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002 G1 \u8ddf\u8e2a\u5404\u4e2a Region \u91cc\u9762\u7684\u5783\u573e\u5806\u79ef\u7684\u4ef7\u503c\u5927\u5c0f\uff08\u56de\u6536\u6240\u83b7\u5f97\u7684\u7a7a\u95f4\u5927\u5c0f\u4ee5\u53ca\u56de\u6536\u6240\u9700\u65f6\u95f4\u7684\u7ecf\u9a8c\u503c\uff09\uff0c\u5728\u540e\u53f0\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u5217\u8868\uff0c\u6bcf\u6b21\u6839\u636e\u5141\u8bb8\u7684\u6536\u96c6\u65f6\u95f4\uff0c\u4f18\u5148\u56de\u6536\u4ef7\u503c\u6700\u5927\u7684 Region\u3002 \u907f\u514d\u5168\u5806\u626b\u63cf \u00b6 \u591a\u4e2a Region \u4e4b\u524d\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u6709\u5f15\u7528\u5173\u7cfb\uff0c\u5728\u505a\u53ef\u8fbe\u6027\u5206\u6790\u65f6\u9700\u8981\u626b\u63cf\u6574\u4e2a\u5806\u624d\u80fd\u4fdd\u8bc1\u51c6\u786e\u6027\uff0c\u8fd9\u663e\u7136\u964d\u4f4e\u4e86 GC \u6548\u7387\u3002 \u4e3a\u907f\u514d\u5168\u5806\u626b\u63cf\uff0c\u865a\u62df\u673a\u4e3a G1 \u4e2d\u6bcf\u4e2a Region \u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684 Remembered Set\u3002\u865a\u62df\u673a\u53d1\u73b0\u7a0b\u5e8f\u5728\u5bf9Reference\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2aWrite Barrier \u6682\u65f6\u4e2d\u65ad\u5199\u64cd\u4f5c\uff0c\u68c0\u67e5 Reference \u5f15\u7528\u7684\u5bf9\u8c61\u662f\u5426\u5904\u4e8e\u4e0d\u540c\u7684 Region \u4e4b\u4e2d\uff08\u5728\u5206\u4ee3\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u68c0\u67e5\u662f\u5426\u8001\u5e74\u4ee3\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u4e86\u65b0\u751f\u4ee3\u4e2d\u7684\u5bf9\u8c61\uff09\uff0c\u5982\u679c\u662f\uff0c\u4fbf\u901a\u8fc7 CardTable \u628a\u76f8\u5173\u5f15\u7528\u4fe1\u606f\u8bb0\u5f55\u5230\u88ab\u5f15\u7528\u5bf9\u8c61\u6240\u5c5e\u7684Region\u7684 Remembered Set \u4e4b\u4e2d \u3002\u5f53\u8fdb\u884c\u5185\u5b58\u56de\u6536\u65f6\uff0c\u5728GC\u6839\u8282\u70b9\u7684\u679a\u4e3e\u8303\u56f4\u4e2d\u52a0\u5165 Remembered Set \u5373\u53ef\u4fdd\u8bc1\u4e0d\u5bf9\u5168\u5806\u626b\u63cf\u4e5f\u4e0d\u4f1a\u6709\u9057\u6f0f\u3002 G1 \u7684\u8fd0\u4f5c\u6b65\u9aa4 \u00b6 \u521d\u59cb\u6807\u8bb0\uff08Initial Marking\uff09 \u5e76\u53d1\u6807\u8bb0\uff08Concurrent Marking\uff09 \u6700\u7ec8\u6807\u8bb0\uff08Final Marking\uff09 \u7b5b\u9009\u56de\u6536\uff08Live Data Counting and Evacuation\uff09 \u7279\u70b9 \u00b6 \u7a7a\u95f4\u6574\u5408\uff1a\u6574\u4f53\u6765\u770b\u662f\u57fa\u4e8e\u201c\u6807\u8bb0 - \u6574\u7406\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\u6536\u96c6\u5668\uff0c\u4ece\u5c40\u90e8\uff08\u4e24\u4e2a Region \u4e4b\u95f4\uff09\u4e0a\u6765\u770b\u662f\u57fa\u4e8e\u201c\u590d\u5236\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u8fd9\u610f\u5473\u7740\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u4ea7\u751f\u5185\u5b58\u7a7a\u95f4\u788e\u7247\u3002 \u53ef\u9884\u6d4b\u7684\u505c\u987f\uff1a\u80fd\u8ba9\u4f7f\u7528\u8005\u660e\u786e\u6307\u5b9a\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a M \u6beb\u79d2\u7684\u65f6\u95f4\u7247\u6bb5\u5185\uff0c\u6d88\u8017\u5728 GC \u4e0a\u7684\u65f6\u95f4\u4e0d\u5f97\u8d85\u8fc7 N \u6beb\u79d2\u3002 \u4ee5\u4e0a\u5f15\u7528\u81ea JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668 GC \u76f8\u5173\u53c2\u6570\u8bbe\u7f6e \u00b6 \u53ef\u4ee5\u9002\u5f53\u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\u5bf9 GC \u8fdb\u884c\u8c03\u4f18\u3002 1\u3001\u8f93\u51fa GC \u65e5\u5fd7 1 2 - XX : + PrintGCDetails // \u8f93\u51fa GC \u65e5\u5fd7 - XX : + DisableExplicitGC // \u7981\u7528\u663e\u793a GC 2\u3001\u4e32\u884c GC \u76f8\u5173\u8bbe\u7f6e 1 2 3 4 - XX : + UseSerialGC // \u6307\u5b9a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668\uff08Client\u6a21\u5f0f\u9ed8\u8ba4\u503c\uff09 - XX : + SurvivorRatio // \u8bbe\u7f6e eden \u533a\u5927\u5c0f\u548c survivor \u533a\u5927\u5c0f\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a8 - XX : + PretenureSizeThreshold // \u8bbe\u7f6e\u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3\u7684\u9608\u503c\u3002\u5f53\u5bf9\u8c61\u7684\u5927\u5c0f\u8d85\u8fc7\u8fd9\u4e2a\u503c\u65f6\uff0c\u5c06\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u5206\u914d\u3002 - XX : MaxTenuringThreshold // \u8bbe\u7f6e\u5bf9\u8c61\u8fdb\u5165\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u7684\u6700\u5927\u503c\u3002\u6bcf\u4e00\u6b21 Minor GC \u540e\uff0c\u5bf9\u8c61\u5e74\u9f84\u5c31\u52a0 1\u3002\u4efb\u4f55\u5927\u4e8e\u8fd9\u4e2a\u5e74\u9f84\u7684\u5bf9\u8c61\uff0c\u4e00\u5b9a\u4f1a\u8fdb\u5165\u8001\u5e74\u4ee3\u3002 3\u3001\u5e76\u884c GC \u53c2\u6570\u8bbe\u7f6e 1 2 3 4 5 6 7 - XX : + UseParNewGC // \u4f7f\u7528 ParNew + Serial Old \u7ec4\u5408\u8fdb\u884c\u5783\u573e\u56de\u6536\uff08\u4e0d\u63a8\u8350\uff09 - XX : + UseParallelGC // \u4f7f\u7528 Parallel Scavenge \u548c Serial Old \u7ec4\u5408\u8fdb\u884c\u56de\u6536 - XX : + UseParallelOldGC // Parallel Scavenge + Parallel Old \u6536\u96c6\u7ec4\u5408\u8fdb\u884c\u5783\u573e\u56de\u6536 - XX : ParallelGCThreads //\u5e76\u884c\u6536\u96c6\u5668\u5de5\u4f5c\u65f6\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u5728 CPU \u6570\u91cf\u5c0f\u4e8e8\u4e2a\u65f6\uff0cParallelGCThreads\u7b49\u4e8e CPU \u6570\u91cf\uff1b\u5982\u679c\u5927\u4e8e8\u4e2a\uff0cParalellGCThreads \u7684\u503c\u7b49\u4e8e 3+[5*CPU_Count]/8]\uff1b - XX : + MaxGCPauseMills // \u8bbe\u7f6e\u6700\u5927\u5783\u573e\u6536\u96c6\u505c\u987f\u65f6\u95f4 - XX : + GCTimeRatio // \u8bbe\u7f6e\u541e\u5410\u91cf\u5927\u5c0f\uff080 - 100\u4e4b\u95f4\u7684\u6574\u6570\uff09\u5783\u573e\u6536\u96c6\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7 1/(1+n) - XX : + UseAdaptiveSizePolicy // \u6253\u5f00\u81ea\u9002\u5e94 GC \u7b56\u7565 4\u3001CMS \u6536\u96c6\u5668\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e 1 2 3 4 5 6 7 8 9 10 - XX : + UseConcMarkSweepGC // \u65b0\u751f\u4ee3\u4f7f\u7528\u5e76\u884c\u6536\u96c6\u5668\uff0c\u8001\u5e74\u4ee3\u4f7f\u7528 CMS + \u4e32\u884c\u6536\u96c6\u5668 - XX : ParallelCMSThreads // \u624b\u52a8\u8bbe\u5b9a CMS \u7684\u7ebf\u7a0b\u6570\u91cf - XX : CMSInitiatingOccupancyFraction // CMS \u56de\u6536\u89e6\u53d1\u9600\u503c\uff08\u5f53\u524d\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\uff09\u9ed8\u8ba4\u4e3a68\uff0868%\uff09 - XX : + UseCMSCompactAtFullCollection // CMS \u5783\u573e\u56de\u6536\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u788e\u7247\u6574\u7406 - XX : CMSFullGCsBeforeCompaction // \u591a\u5c11\u6b21 CMS \u5783\u573e\u56de\u6536\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u6574\u7406\uff08\u538b\u7f29\uff09 - XX : + CMSClassUnloadingEnabled // \u5141\u8bb8\u5bf9\u7c7b\u5143\u6570\u636e\u8fdb\u884c\u56de\u6536 - XX : + CMSParallelRemarkEndable // \u542f\u7528\u5e76\u884c\u91cd\u6807\u8bb0 - XX : CMSInitatingPermOccupancyFraction // \u5f53\u6c38\u4e45\u533a\u5360\u7528\u7387\u8fbe\u5230\u8fd9\u4e00\u767e\u5206\u6bd4\u540e\uff0c\u542f\u52a8 CMS \u56de\u6536\uff08\u9700\u8981\u5f00\u542f - XX:+CMSClassUnloadingEnabled\uff09 - XX : UseCMSInitatingOccupancyOnly // \u53ea\u6709\u5230\u8fbe\u9600\u503c\u7684\u65f6\u5019\uff0c\u624d\u8fdb\u884c CMS \u56de\u6536 - XX : + CMSIncrementalMode // \u4f7f\u7528\u589e\u91cf\u6a21\u5f0f\uff0c\u9002\u7528\u4e8e\u5355 CPU 5\u3001G1 \u6536\u96c6\u5668\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e\u53c2\u6570 1 2 3 4 - XX : + UseG1GC // \u4f7f\u7528 G1 \u6536\u96c6\u5668 - XX : + UnlockExperimentalVMOptions // \u5141\u8bb8\u4f7f\u7528\u5b9e\u9a8c\u6027\u53c2\u6570 - XX : + MaxGCPauseMills // \u8bbe\u7f6e\u5783\u573e\u6536\u96c6\u6700\u5927\u505c\u987f\u65f6\u95f4 - XX : + GCPauseIntervalMills // \u8bbe\u7f6e\u505c\u987f\u95f4\u9694\u65f6\u95f4 \u57fa\u4e8e\u5bf9 JVM \u5783\u573e\u56de\u6536\u5668\u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e86\u89e3\uff0c\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u627e\u51fa\u9002\u5408\u81ea\u5df1\u7684\u6700\u4f18\u4f18\u5316\u65b9\u6848\u3002 \u5bf9\u4e8e\u51e0\u4e2a\u95ee\u9898\u7684\u89e3\u7b54 \u00b6 \u5bf9\u8c61\u6b7b\u4ea1\u7684\u5224\u65ad \u00b6 \u5806\u4e2d\u51e0\u4e4e\u5b58\u653e\u7740\u6240\u6709\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u6240\u4ee5\u8981\u4e86\u89e3\u5783\u573e\u56de\u6536\u5668\uff0c\u9996\u5148\u8981\u5b66\u4f1a\u5224\u65ad\u54ea\u4e9b\u5bf9\u8c61\u5df2\u7ecf\u6b7b\u4ea1\uff08\u4e0d\u80fd\u518d\u4f7f\u7528\uff09\u3002 JVM \u6709\u4e24\u79cd\u65b9\u6cd5\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u6b7b\u4ea1\uff1a \u5f15\u7528\u8ba1\u6570\u6cd5 \u7ed9\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5730\u65b9\u5f15\u7528\u5b83\uff0c\u8ba1\u6570\u5668\u5c31\u52a01\uff0c\u5f15\u7528\u5931\u6548\u65f6\uff0c\u8ba1\u6570\u5668\u51cf1\u3002\u8ba1\u6570\u5668\u503c\u4e3a0\u7684\u5bf9\u8c61\u5c31\u662f\u4e0d\u80fd\u518d\u4f7f\u7528\u7684\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5b9e\u73b0\u7b80\u5355\uff0c\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u76ee\u524d\u4e3b\u6d41\u7684\u865a\u62df\u673a\u6ca1\u6709\u518d\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u89e3\u51b3\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u5f15\u7528\u7684\u7684\u95ee\u9898\u3002 \u53ef\u8fbe\u6027\u5206\u6790\u6cd5 \u6b64\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5c31\u662f\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79f0\u4e3a \u201cGC Roots\u201d \u7684\u5bf9\u8c61\u4f5c\u4e3a\u8d77\u70b9\uff0c\u4ece\u8fd9\u4e9b\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u641c\u7d22\uff0c\u501f\u70b9\u5a11\u8d70\u8fc7\u7684\u8def\u5f84\u53eb\u505a\u5f15\u7528\u94fe\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5230 GC Roots \u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u94fe\u76f8\u8fde\u7684\u8bdd\uff0c\u5c31\u8bf4\u660e\u6b64\u5bf9\u8c61\u662f\u4e0d\u53ef\u7528\u7684\u3002 Minor GC \u548c Full GC \u7684\u533a\u522b \u00b6 \u65b0\u751f\u4ee3 GC\uff08Minor GC\uff09\uff1a\u53d1\u751f\u5728\u65b0\u751f\u4ee3\u7684\u5783\u573e\u6536\u96c6\u64cd\u4f5c\uff0cMinor GC \u975e\u5e38\u9891\u7e41\uff0c\u4e14\u4e00\u822c\u901f\u5ea6\u4e5f\u6bd4\u8f83\u5feb\u3002 Major GC / Full GC\uff1a\u53d1\u751f\u5728\u8001\u5e74\u4ee3\u7684 GC\uff0c\u901f\u5ea6\u4e00\u822c\u6bd4 Minor GC \u616210\u500d\u4ee5\u4e0a\u3002 \u5176\u4ed6\u95ee\u9898 \u00b6 Java \u56db\u79cd\u5f15\u7528\u7c7b\u578b \uff5e \u5f3a\u5f15\u7528\uff0c\u8f6f\u5f15\u7528\uff0c\u5f31\u5f15\u7528\uff0c\u865a\u5f15\u7528\uff08\u865a\u5f15\u7528\u4e0e\u8f6f\u5f15\u7528\u548c\u5f31\u5f15\u7528\u7684\u533a\u522b\uff0c\u4f7f\u7528\u8f6f\u5f15\u7528\u7684\u597d\u5904\uff09 \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5e38\u91cf\u662f\u5e9f\u5f03\u5e38\u91cf \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u65e0\u7528\u7684\u7c7b \u603b\u7ed3 \u00b6 \u6765\u6e90\u4e8e JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668 \u6536\u96c6\u5668 \u4e32\u884c\u3001\u5e76\u884cor\u5e76\u53d1 \u65b0\u751f\u4ee3/\u8001\u5e74\u4ee3 \u7b97\u6cd5 \u76ee\u6807 \u9002\u7528\u573a\u666f Serial \u4e32\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u5355CPU\u73af\u5883\u4e0b\u7684Client\u6a21\u5f0f Serial Old \u4e32\u884c \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6574\u7406 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u5355CPU\u73af\u5883\u4e0b\u7684Client\u6a21\u5f0f\u3001CMS\u7684\u540e\u5907\u9884\u6848 ParNew \u5e76\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u591aCPU\u73af\u5883\u65f6\u5728Server\u6a21\u5f0f\u4e0b\u4e0eCMS\u914d\u5408 Parallel Scavenge \u5e76\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u541e\u5410\u91cf\u4f18\u5148 \u5728\u540e\u53f0\u8fd0\u7b97\u800c\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1 Parallel Old \u5e76\u884c \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6574\u7406 \u541e\u5410\u91cf\u4f18\u5148 \u5728\u540e\u53f0\u8fd0\u7b97\u800c\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1 CMS \u5e76\u53d1 \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6e05\u9664 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u96c6\u4e2d\u5728\u4e92\u8054\u7f51\u7ad9\u6216B/S\u7cfb\u7edf\u670d\u52a1\u7aef\u4e0a\u7684Java\u5e94\u7528 G1 \u5e76\u53d1 both \u6807\u8bb0-\u6574\u7406+\u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u9762\u5411\u670d\u52a1\u7aef\u5e94\u7528 [\u53c2\u8003\u94fe\u63a5] Java Garbage Collection Basics JVM Garbage Collectors Java Garbage Collection Algorithms SnailClimb JavaGuide - Java\u5783\u573e\u56de\u6536 JVM \u5783\u573e\u56de\u6536\u5668\u5de5\u4f5c\u539f\u7406\u53ca\u4f7f\u7528\u5b9e\u4f8b\u4ecb\u7ecd JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668","title":"Java \u5783\u573e\u6536\u96c6\u5668"},{"location":"java/garbage-collector/#java","text":"\u4e0a\u56fe\u7684 Eden \u533a\u548c Survivor From \u533a\u3001Survivor To \u533a\u90fd\u5c5e\u4e8e\u65b0\u751f\u4ee3\uff0cTenured \u533a\u5c5e\u4e8e\u8001\u5e74\u4ee3\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\uff0c\u5bf9\u8c61\u9996\u5148\u4f1a\u5728 Eden \u533a\u57df\u5206\u914d\uff0c\u5728\u7b2c\u4e00\u6b21\u65b0\u751f\u4ee3\u5783\u573e\u56de\u6536\uff08Minor GC\uff09\u540e\uff0c\u5982\u679c\u5bf9\u8c61\u8fd8\u5b58\u6d3b\uff0c\u5219\u8be5\u5bf9\u8c61\u4f1a\u8fdb\u5165 Survivor To \u533a\uff0c\u5e76\u4e14\u5e74\u9f84\u4f1a\u52a01\uff08\u7b2c\u4e00\u6b21\u4ece Eden \u5230 Survivor \u533a\u65f6\u5e74\u9f84\u662f1\uff09\uff0c\u5f53\u5e74\u9f84\u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u65f6\uff08\u9ed8\u8ba4\u4e3a 15 \u5c81\uff0c\u4f46\u662f\u4e0d\u4e00\u5b9a\u5fc5\u987b\u5230\u8fbe 15 \u5c81\u624d\u4f1a\u8fdb\u5165\u8001\u5e74\u4ee3\u533a\uff09\uff0c\u5bf9\u8c61\u4f1a\u88ab\u664b\u5347\u5230\u8001\u5e74\u4ee3\u4e2d\uff0c\u5bf9\u8c61\u664b\u5347\u5230\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u9600\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u53c2\u6570 -XX:MaxTenuringThreshold \u6765\u63a7\u5236\u3002\u7ecf\u8fc7\u8fd9\u6b21 GC \u4e4b\u540e\uff0cEden \u533a \u548c From \u533a\u5df2\u7ecf\u88ab\u6e05\u7a7a\uff0c\u8fd9\u65f6\u5019\uff0cFrom \u548c To \u4f1a\u4ea4\u6362\u4ed6\u4eec\u7684\u89d2\u8272\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u65f6\u65b0\u7684 Survivor To \u533a\u5c31\u662f GC \u4e4b\u524d\u7684 Survivor From \u533a\uff0c\u65b0\u7684 Survivor From \u533a\u5c31\u662f GC \u4e4b\u524d\u7684 Survivor To \u533a\u3002Minor GC \u4f1a\u4e00\u76f4\u91cd\u590d\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u76f4\u5230 Survivor To \u533a\u88ab\u586b\u6ee1\uff0cTo \u533a\u88ab\u586b\u6ee1\u4e4b\u540e\uff0c\u4f1a\u5c06\u6240\u6709\u5bf9\u8c61\u79fb\u52a8\u5230\u8001\u5e74\u4ee3\u4e2d\u3002 \u5806\u5185\u5b58\u5e38\u89c1\u7684\u5206\u914d\u7b56\u7565\uff1a \u5bf9\u8c61\u4f18\u5148\u5206\u914d\u5728 Eden \u533a \u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3 \u957f\u671f\u5b58\u6d3b\u7684\u5bf9\u8c61\u5c06\u8fdb\u5165\u8001\u5e74\u4ee3","title":"Java \u5806\u7a7a\u95f4\u7684\u57fa\u672c\u7ed3\u6784"},{"location":"java/garbage-collector/#java_1","text":"","title":"Java \u5783\u573e\u6536\u96c6\u7b97\u6cd5"},{"location":"java/garbage-collector/#-","text":"\u8be5\u7b97\u6cd5\u9996\u5148\u6807\u8bb0\u51fa\u9700\u8981\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u5728\u6807\u8bb0\u5b8c\u6210\u540e\u7edf\u4e00\u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\u3002\u8be5\u7b97\u6cd5\u662f\u5783\u573e\u56de\u6536\u6700\u57fa\u7840\u7684\u7b97\u6cd5\uff0c\u540e\u7eed\u7684\u7b97\u6cd5\u90fd\u662f\u5bf9\u5176\u4e0d\u8db3\u8fdb\u884c\u6539\u8fdb\u5f97\u5230\u7684\u3002\u5b83\u4f1a\u5e26\u6765\u4e24\u4e2a\u5f88\u660e\u663e\u7684\u95ee\u9898\uff1a \u6548\u7387\u95ee\u9898 \u7a7a\u95f4\u6d6a\u8d39\u95ee\u9898\uff08\u6807\u8bb0\u6e05\u9664\u540e\u4f1a\u4ea7\u751f\u5927\u91cf\u4e0d\u8fde\u7eed\u7684\u788e\u7247\uff0c\u5bfc\u81f4\u5927\u91cf\u7a7a\u95f4\u65e0\u6cd5\u4f7f\u7528\uff09","title":"\u6807\u8bb0 - \u6e05\u9664\u7b97\u6cd5"},{"location":"java/garbage-collector/#_1","text":"\u5c06\u5806\u5185\u5b58\u5206\u4e3a\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757\uff0c\u6bcf\u6b21\u53ea\u4f7f\u7528\u4e00\u5757\u3002\u8fd9\u5757\u5185\u5b58\u4f7f\u7528\u5b8c\u540e\uff0c\u5c06\u8fd8\u5b58\u6d3b\u7684\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u5757\u5185\u5b58\u4e2d\uff0c\u7136\u540e\u628a\u4f7f\u7528\u7684\u7a7a\u95f4\u4e00\u6b21\u5168\u90e8\u6e05\u7406\uff0c\u8fd9\u6837\u6bcf\u6b21\u56de\u6536\u90fd\u53ea\u5bf9\u5185\u5b58\u7684\u4e00\u534a\u8fdb\u884c\u56de\u6536\u3002 \u8fd9\u6837\u4e5f\u4f1a\u6709\u4e00\u5b9a\u7684\u95ee\u9898\uff0c\u5c31\u597d\u6bd4\u6211\u4eec\u4e70\u4e86200\u5e73\u7684\u623f\u5b50\uff0c\u5374\u53ea\u80fd\u4f7f\u7528100\u5e73\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u4f7f\u7528\u7a7a\u95f4\u7684\u7f29\u5c0f\u3002","title":"\u590d\u5236\u7b97\u6cd5"},{"location":"java/garbage-collector/#-_1","text":"\u9488\u5bf9\u8001\u5e74\u4ee3\u7279\u70b9\u7279\u51fa\u7684\u4e00\u79cd\u6807\u8bb0\u7b97\u6cd5\uff0c\u8fc7\u7a0b\u4e0e\u201c\u6807\u8bb0 - \u6e05\u9664\u201d\u7b97\u6cd5\u4e00\u6837\uff0c\u4f46\u662f\u6807\u8bb0\u4e4b\u540e\u4e0d\u662f\u76f4\u63a5\u5bf9\u53ef\u56de\u6536\u5bf9\u8c61\u8fdb\u884c\u56de\u6536\uff0c\u800c\u662f\u8ba9\u6240\u6709\u5b58\u6d3b\u5bf9\u8c61\u5411\u4e00\u7aef\u79fb\u52a8\uff0c\u7136\u540e\u6e05\u7406\u6389\u5b58\u6d3b\u5bf9\u8c61\u7aef\u8fb9\u754c\u4ee5\u5916\u7684\u5185\u5b58\u3002","title":"\u6807\u8bb0 - \u6574\u7406\u7b97\u6cd5"},{"location":"java/garbage-collector/#_2","text":"Question \u95ee\u9898\uff1aHotSpot \u4e3a\u4ec0\u4e48\u8981\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff1f \u6839\u636e\u5bf9\u8c61\u5b58\u6d3b\u5468\u671f\u7684\u4e0d\u540c\u5c06\u5185\u5b58\u5206\u4e3a\u51e0\u5757\uff08\u4e00\u822c\u5c06 Java \u5806\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff09\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u6839\u636e\u5404\u5e74\u4ee3\u7684\u7279\u70b9\u6765\u9009\u62e9\u5408\u9002\u7684\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u3002 \u6bd4\u5982\u5728\u65b0\u751f\u4ee3\u4e2d\uff0c\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u90fd\u4f1a\u6709\u5927\u91cf\u7684\u5bf9\u8c61\u6b7b\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u590d\u5236\u7b97\u6cd5\uff0c\u53ea\u9700\u8981\u4ed8\u51fa\u5c11\u91cf\u5bf9\u8c61\u7684\u590d\u5236\u6210\u672c\u5219\u53ef\u4ee5\u5b8c\u6210\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u3002\u800c\u8001\u5e74\u4ee3\u4e2d\u5bf9\u8c61\u7684\u5b58\u6d3b\u51e0\u7387\u90fd\u662f\u6bd4\u8f83\u9ad8\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u95f4\u5bf9\u5b83\u8fdb\u884c\u5206\u914d\u62c5\u4fdd\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u9009\u62e9 \u201c\u6807\u8bb0 - \u6e05\u9664\u201d \u6216\u8005 \u201c\u6807\u8bb0 - \u6574\u7406\u201d \u7b97\u6cd5\u8fdb\u884c\u5783\u573e\u6536\u96c6\u3002","title":"\u5206\u4ee3\u6536\u96c6\u7b97\u6cd5"},{"location":"java/garbage-collector/#_3","text":"\u56fe\u7247\u6765\u6e90\uff1a \u8bfb\u4e66\u7b14\u8bb0\u2014\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a1","title":"\u5783\u573e\u6536\u96c6\u5668"},{"location":"java/garbage-collector/#-serial","text":"\u4e32\u884c\u6536\u96c6\u5668\u4e3b\u8981\u6709\u4e24\u4e2a\u7279\u70b9\uff1a1\u3001\u4f7f\u7528\u5355\u7ebf\u7a0b\u8fdb\u884c\u5783\u573e\u56de\u6536\uff1b2\u3001\u72ec\u5360\u5f0f\u7684\u5783\u573e\u56de\u6536\u3002 \u5728\u4e32\u884c\u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\uff0cJava \u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u7ebf\u7a0b\u90fd\u9700\u8981\u6682\u505c\uff0c\u7b49\u5f85\u5783\u573e\u56de\u6536\u5b8c\u6210\uff0c\u8fd9\u6837\u5c31\u4f1a\u9020\u6210\u8f83\u5dee\u7684\u7528\u6237\u4f53\u9a8c\u3002\u4f46\u662f\u4e32\u884c\u6536\u96c6\u5668\u4ecd\u7136\u662f\u4e00\u4e2a\u6210\u719f\u7684\u3001\u7ecf\u8fc7\u957f\u65f6\u95f4\u751f\u4ea7\u73af\u5883\u8003\u9a8c\u7684\u6781\u4e3a\u9ad8\u6548\u7684\u6536\u96c6\u5668\u3002 \u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u91c7\u7528 \u590d\u5236\u7b97\u6cd5 \uff0c\u5b9e\u73b0\u76f8\u5bf9\u7b80\u5355\uff0c\u5e76\u4e14\u6ca1\u6709\u7ebf\u7a0b\u5207\u6362\u7684\u5f00\u9500\u3002\u5728 HotSpot \u865a\u62df\u673a\u4e2d\uff0c\u4f7f\u7528 -XX:+UseSerialGC \u53c2\u6570\u53ef\u4ee5\u6307\u5b9a\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u548c\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u3002\u5f53 JVM \u5728 Client \u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u3002\u4e00\u6b21\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u7684\u5de5\u4f5c\u8f93\u51fa\u65e5\u5fd7\u7c7b\u4f3c\u4e8e\u4e0b\uff08\u4f7f\u7528 -XX:PrintGCDetails \u5f00\u5173\uff09\uff1a 1 2 3 4 [ GC [ DefNew : 3468 K -> 150 K ( 9216 K ), 0.0028638 secs ][ Tenured : 1562 K -> 1712 K ( 10240 K ), 0.0084220 secs ] 3468 K -> 1712 K ( 19456 K ), [ Perm : 377 K -> 377 K ( 12288 K ) ] , 0.0113816 secs ] [ Times : user = 0.02 sys = 0.00 , real = 0.01 secs ] \u5b83\u663e\u793a\u4e86\u5783\u573e\u56de\u6536\u4e4b\u524d\u65b0\u751f\u4ee3\u7684\u5360\u7528\u5185\u5b58\u548c\u5783\u573e\u56de\u6536\u540e\u7684\u5360\u7528\u5185\u5b58\uff0c\u4ee5\u53ca\u5783\u573e\u56de\u6536\u7684\u65f6\u95f4\u3002","title":"\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668 - Serial"},{"location":"java/garbage-collector/#-parnew","text":"\u5b83\u662f\u65b0\u751f\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u7684\u591a\u7ebf\u7a0b\u7248\u672c\uff0c\u5783\u573e\u56de\u6536\u65f6\u4e5f\u4f1a\u6682\u505c Java \u5e94\u7528\u7a0b\u5e8f\u7684\u7ebf\u7a0b\u3002\u5b83\u9664\u4e86\u4f7f\u7528\u591a\u7ebf\u7a0b\u5904\u7406\u5783\u573e\u56de\u6536\u5916\uff0c\u5176\u4ed6\u7684\u529f\u80fd\u4e0e Serial \u6536\u96c6\u5668\u4e00\u6837\u3002\u5728\u5355 CPU \u7684\u73af\u5883\u4e0b\uff0cParNew \u6536\u96c6\u5668\u7684\u8868\u73b0\u4e0d\u4f1a\u6bd4 Serial \u66f4\u4f18\u79c0\u3002","title":"\u65b0\u751f\u4ee3\u5e76\u884c\u6536\u96c6\u5668 - ParNew"},{"location":"java/garbage-collector/#parallel-scavenge","text":"Parallel Scavenge \u6536\u96c6\u5668\u4e5f\u662f\u4f7f\u7528\u590d\u5236\u7b97\u6cd5\u7684\u591a\u7ebf\u7a0b\u5783\u573e\u6536\u96c6\u5668\uff0c\u5b83\u770b\u4e0a\u53bb\u51e0\u4e4e\u548c ParNer \u4e00\u6a21\u4e00\u6837\u3002 \u4f46\u662f Parallel Scavenge \u6536\u96c6\u5668\u7684\u5173\u6ce8\u70b9\u662f\u541e\u5410\u91cf\uff08\u9ad8\u6548\u7387\u7684\u5229\u7528 CPU\uff09\uff0c\u541e\u5410\u91cf\u5c31\u662f CPU \u4e2d\u7528\u4e8e\u8fd0\u884c\u7528\u6237\u4ee3\u7801\u7684\u65f6\u95f4\u4e0e CPU \u603b\u6d88\u8017\u65f6\u95f4\u7684\u6bd4\u503c\u3002\u800c CMS \u7b49\u5783\u573e\u6536\u96c6\u5668\u5173\u6ce8\u7684\u66f4\u591a\u7684\u662f\u7528\u6237\u7ebf\u7a0b\u7684\u505c\u987f\u65f6\u95f4\uff0c\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c\u3002 Parallel Scavenge \u6536\u96c6\u5668\u63d0\u4f9b\u4e86\u5f88\u591a\u53c2\u6570\u4f9b\u7528\u6237\u627e\u5230\u6700\u9002\u5408\u7684\u505c\u987f\u65f6\u95f4\u6216\u6700\u5927\u7684\u541e\u5410\u91cf\u3002 1 2 -XX:UseParallelGC // \u4f7f\u7528 Parrallel \u6536\u96c6\u5668\uff08\u65b0\u751f\u4ee3\uff09\uff0c\u8001\u5e74\u4ee3\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668 -XX:UseParallelOldGC // \u4f7f\u7528 Parallel \u6536\u96c6\u5668\uff0c\u8001\u5e74\u4ee3\u5e76\u884c \u6b64\u6536\u96c6\u5668\u4e2d\uff0c\u65b0\u751f\u4ee3\u91c7\u7528\u590d\u5236\u7b97\u6cd5\uff0c\u8001\u5e74\u4ee3\u91c7\u7528\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5","title":"Parallel Scavenge \u6536\u96c6\u5668"},{"location":"java/garbage-collector/#-serial-old","text":"\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u662f Serial \u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u540c\u6837\u662f\u5355\u7ebf\u7a0b\uff0c\u4f46\u662f\u5b83\u4f7f\u7528 \u6807\u8bb0-\u6574\u7406\u7b97\u6cd5 \u3002\u4ed6\u4e5f\u662f\u4e00\u4e2a\u4e32\u884c\u7684\u3001\u72ec\u5360\u5f0f\u7684\u5783\u573e\u56de\u6536\u5668\u3002\u7531\u4e8e\u8001\u5e74\u4ee3\u5783\u573e\u56de\u6536\u901a\u5e38\u4f1a\u4f7f\u7528\u6bd4\u65b0\u751f\u4ee3\u5783\u573e\u56de\u6536\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u56e0\u6b64\uff0c\u5728\u5806\u7a7a\u95f4\u8f83\u5927\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u4e00\u65e6\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u542f\u52a8\uff0c\u5e94\u7528\u7a0b\u5e8f\u5f88\u53ef\u80fd\u4f1a\u56e0\u6b64\u505c\u987f\u51e0\u79d2\u751a\u81f3\u66f4\u957f\u65f6\u95f4\u3002\u4f46\u662fSerial Old \u6536\u96c6\u5668\u53ef\u4ee5\u548c\u591a\u79cd\u65b0\u751f\u4ee3\u6536\u96c6\u5668\u914d\u5408\u4f7f\u7528\uff0c\u800c\u4e14\u53ef\u4ee5\u4f5c\u4e3a CMS \u6536\u96c6\u5668\u7684\u5907\u7528\u6536\u96c6\u5668\u3002\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 -XX:+UseSerialGC \u5c06\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668\uff0c\u4f7f\u7528 -XX:UseParallelOldGC \u8bbe\u7f6e\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u5e76\u884c\u6536\u96c6\u5668\u3002","title":"\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668 - Serial Old"},{"location":"java/garbage-collector/#parallel-old","text":"Parallel Scavenge \u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\u3002 \u8be5\u6536\u96c6\u5668\u91c7\u7528\u201d\u6807\u8bb0-\u6574\u7406\u201c\u7b97\u6cd5\u3002\u6ce8\u91cd\u541e\u5410\u91cf\u4ee5\u53ca CPU \u8d44\u6e90\u7684\u573a\u5408\uff0c\u90fd\u53ef\u4ee5\u4f18\u5148\u8003\u8651 Parallel Scavenge \u548c Parallel Old \u6536\u96c6\u5668\u3002","title":"Parallel Old \u6536\u96c6\u5668"},{"location":"java/garbage-collector/#cms","text":"CMS (Concurrent Mark Sweep) \u6536\u96c6\u5668\u662f\u4e00\u79cd\u4ee5 \u83b7\u53d6\u6700\u77ed\u56de\u6536\u505c\u987f\u65f6\u95f4 \u4e3a\u76ee\u6807\u7684\u6536\u96c6\u5668\uff0c\u5b83\u975e\u5e38\u7b26\u5408\u7f51\u7ad9\u6216\u8005 B/S \u7cfb\u7edf\u7684\u670d\u52a1\u7aef\u4e0a\u7684 Java \u5e94\u7528\u7b49\u91cd\u89c6\u54cd\u5e94\u901f\u5ea6\u7684\u573a\u666f\u3002\u4ece\u540d\u5b57\u4e0a\u53ef\u4ee5\u770b\u51fa\uff0c\u5b83\u662f\u57fa\u4e8e \u201c\u6807\u8bb0-\u6e05\u9664\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\u3002 CMS \u6536\u96c6\u5668\u7684\u6574\u4e2a\u5de5\u4f5c\u6d41\u7a0b\u4e3a\u4ee5\u4e0b 4 \u4e2a\u6b65\u9aa4\uff1a \u521d\u59cb\u6807\u8bb0 \uff1a\u6682\u505c\u6240\u6709\u5176\u4ed6\u7ebf\u7a0b\uff0c\u6807\u8bb0 GC Roots \u80fd\u76f4\u63a5\u5173\u8054\u7684\u5bf9\u8c61\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u5e76\u53d1\u6807\u8bb0 \uff1a\u540c\u65f6\u5f00\u542f GC \u7ebf\u7a0b\u548c\u7528\u6237\u7ebf\u7a0b\uff0c\u7528\u95ed\u5305\u7ed3\u6784\u53bb\u8bb0\u5f55\u53ef\u8fbe\u5bf9\u8c61\u3002\u4f46\u662f\u8fd9\u4e2a\u9636\u6bb5\u7ed3\u675f\u540e\uff0c\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u8fd9\u4e2a\u95ed\u5305\u5305\u542b\u6240\u6709\u7684\u53ef\u8fbe\u5bf9\u8c61\uff0c\u56e0\u4e3a\u7528\u6237\u7ebf\u7a0b\u53ef\u80fd\u540c\u65f6\u4f1a\u66f4\u65b0\u5f15\u7528\u57df\uff0c\u6240\u4ee5 GC \u7ebf\u7a0b\u65e0\u6cd5\u4fdd\u8bc1\u53ef\u8fbe\u6027\u5206\u6790\u7684\u5b9e\u65f6\u6027\u3002\u6240\u4ee5\u8fd9\u4e2a\u9636\u6bb5\u5c31\u662f GC Roots Tracing \u8fc7\u7a0b\uff0c\u8bb0\u5f55\u53d1\u751f\u5f15\u7528\u66f4\u65b0\u7684\u5730\u65b9\u3002 \u91cd\u65b0\u6807\u8bb0 \uff1a\u4fee\u6b63\u5e76\u53d1\u6807\u8bb0\u671f\u95f4\u53d1\u751f\u5f15\u7528\u53d8\u5316\u7684\u90a3\u4e00\u90e8\u5206\u5bf9\u8c61\u3002\u8fd9\u4e00\u9636\u6bb5\u7684\u505c\u987f\u65f6\u95f4\u4f1a\u6bd4\u521d\u59cb\u6807\u8bb0\u9636\u6bb5\u7684\u65f6\u95f4\u7a0d\u957f\uff0c\u4f46\u8fdc\u8fdc\u6bd4\u5e76\u53d1\u6807\u8bb0\u7684\u65f6\u95f4\u77ed\u3002 \u5e76\u53d1\u6e05\u9664 \uff1a\u5f00\u542f\u7528\u6237\u7ebf\u7a0b\uff0c\u540c\u65f6 GC \u7ebf\u7a0b\u5bf9\u672a\u6807\u8bb0\u7684\u533a\u57df\u8fdb\u884c\u6e05\u9664\u3002 \u4f18\u70b9\uff1a\u5e76\u53d1\uff0c\u4f4e\u505c\u987f \u7f3a\u70b9\uff1a 1\u3001\u5f53\u6b21\u6536\u96c6\u65e0\u6cd5\u5904\u7406\u5e76\u53d1\u6807\u8bb0\u65f6\u7528\u6237\u7ebf\u7a0b\u4ea7\u751f\u7684\u65b0\u7684\u5783\u573e\u3002 2\u3001\u56e0\u4e3a\u4f7f\u7528 \u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u5f88\u591a\u5185\u5b58\u7a7a\u95f4\u788e\u7247\uff0c\u5bfc\u81f4\u5f53\u524d\u5806\u4e2d\u8001\u5e74\u4ee3\u7a7a\u95f4\u6709\u5269\u4f59\uff0c\u4f46\u662f\u65e0\u6cd5\u627e\u5230\u8db3\u591f\u5927\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u5206\u914d\u5f53\u524d\u5bf9\u8c61\uff0c\u8fd9\u6837\u4f1a\u63d0\u524d\u89e6\u53d1\u4e00\u6b21 Full GC\u3002","title":"CMS \u6536\u96c6\u5668"},{"location":"java/garbage-collector/#cms_1","text":"-XX:ParallelCMSThreads \uff1a\u624b\u52a8\u8bbe\u7f6e CMS \u7684\u7ebf\u7a0b\u6570\u91cf\u3002CMS \u9ed8\u8ba4\u542f\u52a8\u7684\u7ebf\u7a0b\u662f (ParallelGCThreads+3)/4) \uff0c\u5176\u4e2d ParallelGCThreads \u662f\u65b0\u751f\u4ee3\u5e76\u884c\u6536\u96c6\u5668\u7684\u7ebf\u7a0b\u6570\u91cf\u3002 -XX:CMSInitiatingOccupancyFraction \uff1aCMS \u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u7684\u9600\u503c\uff08\u5f53\u524d\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\u9600\u503c\uff09\uff0c\u9ed8\u8ba4\u4e3a 68\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\u8fbe\u5230 68% \u65f6\uff0c\u4f1a\u6267\u884c\u4e00\u6b21 CMS \u56de\u6536\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5185\u5185\u5b58\u589e\u957f\u5f88\u5feb\uff0c\u5728 CMS \u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u5185\u5b58\u4e0d\u8db3\u7684\u60c5\u51b5\uff08\u7528\u6237\u7ebf\u7a0b\u4f1a\u5e76\u884c\u6267\u884c\uff09\uff0c\u5c31\u4f1a\u5bfc\u81f4 CMS \u56de\u6536\u5931\u8d25\uff0cJVM \u5c06\u542f\u52a8\u8001\u5e74\u4ee3\u4e32\u884c\u6536\u96c6\u5668\u8fdb\u884c\u5783\u573e\u56de\u6536\u3002\u8fd9\u6837\u4f1a\u9020\u6210\u7ebf\u7a0b\u7684\u505c\u987f\uff0c\u5f71\u54cd\u7528\u6237\u4f53\u9a8c\uff0c\u8fd9\u65f6\u53ef\u4ee5\u5c06 -XX:CMSInitiatingOccupancyFraction \u8c03\u5c0f\u3002\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u589e\u957f\u7f13\u6162\u7684\u8bdd\uff0c\u53ef\u4ee5\u9002\u5f53\u8c03\u5927\u8fd9\u4e2a\u9600\u503c\uff0c\u53ef\u4ee5\u6709\u6548\u7684\u964d\u4f4e CMS \u7684\u89e6\u53d1\u9891\u7387 -XX:+UseCMSCompactAtFullCollection \uff1a\u56e0\u4e3a CMS \u91c7\u7528 \u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\uff0c\u4f1a\u9020\u6210\u5927\u91cf\u5185\u5b58\u788e\u7247\uff0c\u8fd9\u6837\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u5206\u914d\u8f83\u5927\u7684\u5bf9\u8c61\uff0c\u800c\u89e6\u53d1 Full GC\uff0c\u8fd9\u5f88\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u3002 \u8bbe\u7f6e\u6b64\u53c2\u6570\u53ef\u4ee5\u4f7f CMS \u5728\u5783\u573e\u6536\u96c6\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u788e\u7247\u6574\u7406\uff08\u5185\u5b58\u788e\u7247\u6574\u7406\u4e0d\u662f\u5e76\u53d1\u8fdb\u884c\u7684\uff09\u3002\u53ef\u4ee5\u4f7f\u7528 -XX:CMSFullGCsBeforeCompaction \u53c2\u6570\u6765\u8bbe\u5b9a\u8fdb\u884c\u591a\u5c11\u6b21 CMS \u56de\u6536\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u538b\u7f29\u3002","title":"CMS \u5783\u573e\u6536\u96c6\u5668\u7684\u4f18\u5316"},{"location":"java/garbage-collector/#g1","text":"G1 GC \u662f JDK 7 \u7684\u65b0\u7279\u6027\u4e4b\u4e00 \uff0c\u5b83\u7684\u76ee\u6807\u662f\u4f5c\u4e3a\u4e00\u6b3e\u670d\u52a1\u5668\u7684\u5783\u573e\u6536\u96c6\u5668\u3002\u6240\u4ee5\u5b83\u5728\u541e\u5410\u91cf\u548c\u505c\u987f\u63a7\u5236\u4e0a\uff0c\u90fd\u8981\u4f18\u4e8e CMS\u3002 \u4ee5\u4e0b\u5f15\u7528\u81ea JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668 G1 (Garbage First) \u7684\u5404\u4ee3\u5b58\u50a8\u5730\u5740\u662f\u4e0d\u8fde\u7eed\u7684\uff0c\u6bcf\u4e00\u4ee3\u90fd\u4f7f\u7528\u4e86 n \u4e2a\u4e0d\u8fde\u7eed\u7684\u5927\u5c0f\u76f8\u540c\u7684 region\uff0c \u6bcf\u4e2a region \u5360\u6709\u4e00\u5757\u8fde\u7eed\u7684\u865a\u62df\u5185\u5b58\u5730\u5740\u3002 G1 \u8ddf\u8e2a\u5404\u4e2a Region \u91cc\u9762\u7684\u5783\u573e\u5806\u79ef\u7684\u4ef7\u503c\u5927\u5c0f\uff08\u56de\u6536\u6240\u83b7\u5f97\u7684\u7a7a\u95f4\u5927\u5c0f\u4ee5\u53ca\u56de\u6536\u6240\u9700\u65f6\u95f4\u7684\u7ecf\u9a8c\u503c\uff09\uff0c\u5728\u540e\u53f0\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u5217\u8868\uff0c\u6bcf\u6b21\u6839\u636e\u5141\u8bb8\u7684\u6536\u96c6\u65f6\u95f4\uff0c\u4f18\u5148\u56de\u6536\u4ef7\u503c\u6700\u5927\u7684 Region\u3002","title":"G1 \u6536\u96c6\u5668"},{"location":"java/garbage-collector/#_4","text":"\u591a\u4e2a Region \u4e4b\u524d\u7684\u5bf9\u8c61\u53ef\u80fd\u4f1a\u6709\u5f15\u7528\u5173\u7cfb\uff0c\u5728\u505a\u53ef\u8fbe\u6027\u5206\u6790\u65f6\u9700\u8981\u626b\u63cf\u6574\u4e2a\u5806\u624d\u80fd\u4fdd\u8bc1\u51c6\u786e\u6027\uff0c\u8fd9\u663e\u7136\u964d\u4f4e\u4e86 GC \u6548\u7387\u3002 \u4e3a\u907f\u514d\u5168\u5806\u626b\u63cf\uff0c\u865a\u62df\u673a\u4e3a G1 \u4e2d\u6bcf\u4e2a Region \u7ef4\u62a4\u4e86\u4e00\u4e2a\u4e0e\u4e4b\u5bf9\u5e94\u7684 Remembered Set\u3002\u865a\u62df\u673a\u53d1\u73b0\u7a0b\u5e8f\u5728\u5bf9Reference\u7c7b\u578b\u7684\u6570\u636e\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u4f1a\u4ea7\u751f\u4e00\u4e2aWrite Barrier \u6682\u65f6\u4e2d\u65ad\u5199\u64cd\u4f5c\uff0c\u68c0\u67e5 Reference \u5f15\u7528\u7684\u5bf9\u8c61\u662f\u5426\u5904\u4e8e\u4e0d\u540c\u7684 Region \u4e4b\u4e2d\uff08\u5728\u5206\u4ee3\u7684\u4f8b\u5b50\u4e2d\u5c31\u662f\u68c0\u67e5\u662f\u5426\u8001\u5e74\u4ee3\u4e2d\u7684\u5bf9\u8c61\u5f15\u7528\u4e86\u65b0\u751f\u4ee3\u4e2d\u7684\u5bf9\u8c61\uff09\uff0c\u5982\u679c\u662f\uff0c\u4fbf\u901a\u8fc7 CardTable \u628a\u76f8\u5173\u5f15\u7528\u4fe1\u606f\u8bb0\u5f55\u5230\u88ab\u5f15\u7528\u5bf9\u8c61\u6240\u5c5e\u7684Region\u7684 Remembered Set \u4e4b\u4e2d \u3002\u5f53\u8fdb\u884c\u5185\u5b58\u56de\u6536\u65f6\uff0c\u5728GC\u6839\u8282\u70b9\u7684\u679a\u4e3e\u8303\u56f4\u4e2d\u52a0\u5165 Remembered Set \u5373\u53ef\u4fdd\u8bc1\u4e0d\u5bf9\u5168\u5806\u626b\u63cf\u4e5f\u4e0d\u4f1a\u6709\u9057\u6f0f\u3002","title":"\u907f\u514d\u5168\u5806\u626b\u63cf"},{"location":"java/garbage-collector/#g1_1","text":"\u521d\u59cb\u6807\u8bb0\uff08Initial Marking\uff09 \u5e76\u53d1\u6807\u8bb0\uff08Concurrent Marking\uff09 \u6700\u7ec8\u6807\u8bb0\uff08Final Marking\uff09 \u7b5b\u9009\u56de\u6536\uff08Live Data Counting and Evacuation\uff09","title":"G1 \u7684\u8fd0\u4f5c\u6b65\u9aa4"},{"location":"java/garbage-collector/#_5","text":"\u7a7a\u95f4\u6574\u5408\uff1a\u6574\u4f53\u6765\u770b\u662f\u57fa\u4e8e\u201c\u6807\u8bb0 - \u6574\u7406\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\u6536\u96c6\u5668\uff0c\u4ece\u5c40\u90e8\uff08\u4e24\u4e2a Region \u4e4b\u95f4\uff09\u4e0a\u6765\u770b\u662f\u57fa\u4e8e\u201c\u590d\u5236\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u8fd9\u610f\u5473\u7740\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u4ea7\u751f\u5185\u5b58\u7a7a\u95f4\u788e\u7247\u3002 \u53ef\u9884\u6d4b\u7684\u505c\u987f\uff1a\u80fd\u8ba9\u4f7f\u7528\u8005\u660e\u786e\u6307\u5b9a\u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a M \u6beb\u79d2\u7684\u65f6\u95f4\u7247\u6bb5\u5185\uff0c\u6d88\u8017\u5728 GC \u4e0a\u7684\u65f6\u95f4\u4e0d\u5f97\u8d85\u8fc7 N \u6beb\u79d2\u3002 \u4ee5\u4e0a\u5f15\u7528\u81ea JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668","title":"\u7279\u70b9"},{"location":"java/garbage-collector/#gc","text":"\u53ef\u4ee5\u9002\u5f53\u4f7f\u7528\u8fd9\u4e9b\u53c2\u6570\u5bf9 GC \u8fdb\u884c\u8c03\u4f18\u3002 1\u3001\u8f93\u51fa GC \u65e5\u5fd7 1 2 - XX : + PrintGCDetails // \u8f93\u51fa GC \u65e5\u5fd7 - XX : + DisableExplicitGC // \u7981\u7528\u663e\u793a GC 2\u3001\u4e32\u884c GC \u76f8\u5173\u8bbe\u7f6e 1 2 3 4 - XX : + UseSerialGC // \u6307\u5b9a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\u90fd\u4f7f\u7528\u4e32\u884c\u6536\u96c6\u5668\uff08Client\u6a21\u5f0f\u9ed8\u8ba4\u503c\uff09 - XX : + SurvivorRatio // \u8bbe\u7f6e eden \u533a\u5927\u5c0f\u548c survivor \u533a\u5927\u5c0f\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4\u4e3a8 - XX : + PretenureSizeThreshold // \u8bbe\u7f6e\u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3\u7684\u9608\u503c\u3002\u5f53\u5bf9\u8c61\u7684\u5927\u5c0f\u8d85\u8fc7\u8fd9\u4e2a\u503c\u65f6\uff0c\u5c06\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u5206\u914d\u3002 - XX : MaxTenuringThreshold // \u8bbe\u7f6e\u5bf9\u8c61\u8fdb\u5165\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u7684\u6700\u5927\u503c\u3002\u6bcf\u4e00\u6b21 Minor GC \u540e\uff0c\u5bf9\u8c61\u5e74\u9f84\u5c31\u52a0 1\u3002\u4efb\u4f55\u5927\u4e8e\u8fd9\u4e2a\u5e74\u9f84\u7684\u5bf9\u8c61\uff0c\u4e00\u5b9a\u4f1a\u8fdb\u5165\u8001\u5e74\u4ee3\u3002 3\u3001\u5e76\u884c GC \u53c2\u6570\u8bbe\u7f6e 1 2 3 4 5 6 7 - XX : + UseParNewGC // \u4f7f\u7528 ParNew + Serial Old \u7ec4\u5408\u8fdb\u884c\u5783\u573e\u56de\u6536\uff08\u4e0d\u63a8\u8350\uff09 - XX : + UseParallelGC // \u4f7f\u7528 Parallel Scavenge \u548c Serial Old \u7ec4\u5408\u8fdb\u884c\u56de\u6536 - XX : + UseParallelOldGC // Parallel Scavenge + Parallel Old \u6536\u96c6\u7ec4\u5408\u8fdb\u884c\u5783\u573e\u56de\u6536 - XX : ParallelGCThreads //\u5e76\u884c\u6536\u96c6\u5668\u5de5\u4f5c\u65f6\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u5728 CPU \u6570\u91cf\u5c0f\u4e8e8\u4e2a\u65f6\uff0cParallelGCThreads\u7b49\u4e8e CPU \u6570\u91cf\uff1b\u5982\u679c\u5927\u4e8e8\u4e2a\uff0cParalellGCThreads \u7684\u503c\u7b49\u4e8e 3+[5*CPU_Count]/8]\uff1b - XX : + MaxGCPauseMills // \u8bbe\u7f6e\u6700\u5927\u5783\u573e\u6536\u96c6\u505c\u987f\u65f6\u95f4 - XX : + GCTimeRatio // \u8bbe\u7f6e\u541e\u5410\u91cf\u5927\u5c0f\uff080 - 100\u4e4b\u95f4\u7684\u6574\u6570\uff09\u5783\u573e\u6536\u96c6\u65f6\u95f4\u4e0d\u4f1a\u8d85\u8fc7 1/(1+n) - XX : + UseAdaptiveSizePolicy // \u6253\u5f00\u81ea\u9002\u5e94 GC \u7b56\u7565 4\u3001CMS \u6536\u96c6\u5668\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e 1 2 3 4 5 6 7 8 9 10 - XX : + UseConcMarkSweepGC // \u65b0\u751f\u4ee3\u4f7f\u7528\u5e76\u884c\u6536\u96c6\u5668\uff0c\u8001\u5e74\u4ee3\u4f7f\u7528 CMS + \u4e32\u884c\u6536\u96c6\u5668 - XX : ParallelCMSThreads // \u624b\u52a8\u8bbe\u5b9a CMS \u7684\u7ebf\u7a0b\u6570\u91cf - XX : CMSInitiatingOccupancyFraction // CMS \u56de\u6536\u89e6\u53d1\u9600\u503c\uff08\u5f53\u524d\u5806\u5185\u5b58\u7684\u4f7f\u7528\u7387\uff09\u9ed8\u8ba4\u4e3a68\uff0868%\uff09 - XX : + UseCMSCompactAtFullCollection // CMS \u5783\u573e\u56de\u6536\u5b8c\u6210\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u788e\u7247\u6574\u7406 - XX : CMSFullGCsBeforeCompaction // \u591a\u5c11\u6b21 CMS \u5783\u573e\u56de\u6536\u540e\uff0c\u8fdb\u884c\u4e00\u6b21\u5185\u5b58\u6574\u7406\uff08\u538b\u7f29\uff09 - XX : + CMSClassUnloadingEnabled // \u5141\u8bb8\u5bf9\u7c7b\u5143\u6570\u636e\u8fdb\u884c\u56de\u6536 - XX : + CMSParallelRemarkEndable // \u542f\u7528\u5e76\u884c\u91cd\u6807\u8bb0 - XX : CMSInitatingPermOccupancyFraction // \u5f53\u6c38\u4e45\u533a\u5360\u7528\u7387\u8fbe\u5230\u8fd9\u4e00\u767e\u5206\u6bd4\u540e\uff0c\u542f\u52a8 CMS \u56de\u6536\uff08\u9700\u8981\u5f00\u542f - XX:+CMSClassUnloadingEnabled\uff09 - XX : UseCMSInitatingOccupancyOnly // \u53ea\u6709\u5230\u8fbe\u9600\u503c\u7684\u65f6\u5019\uff0c\u624d\u8fdb\u884c CMS \u56de\u6536 - XX : + CMSIncrementalMode // \u4f7f\u7528\u589e\u91cf\u6a21\u5f0f\uff0c\u9002\u7528\u4e8e\u5355 CPU 5\u3001G1 \u6536\u96c6\u5668\u76f8\u5173\u53c2\u6570\u8bbe\u7f6e\u53c2\u6570 1 2 3 4 - XX : + UseG1GC // \u4f7f\u7528 G1 \u6536\u96c6\u5668 - XX : + UnlockExperimentalVMOptions // \u5141\u8bb8\u4f7f\u7528\u5b9e\u9a8c\u6027\u53c2\u6570 - XX : + MaxGCPauseMills // \u8bbe\u7f6e\u5783\u573e\u6536\u96c6\u6700\u5927\u505c\u987f\u65f6\u95f4 - XX : + GCPauseIntervalMills // \u8bbe\u7f6e\u505c\u987f\u95f4\u9694\u65f6\u95f4 \u57fa\u4e8e\u5bf9 JVM \u5783\u573e\u56de\u6536\u5668\u7684\u5de5\u4f5c\u539f\u7406\u4ee5\u53ca\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u4e86\u89e3\uff0c\u5e0c\u671b\u5927\u5bb6\u90fd\u80fd\u627e\u51fa\u9002\u5408\u81ea\u5df1\u7684\u6700\u4f18\u4f18\u5316\u65b9\u6848\u3002","title":"GC \u76f8\u5173\u53c2\u6570\u8bbe\u7f6e"},{"location":"java/garbage-collector/#_6","text":"","title":"\u5bf9\u4e8e\u51e0\u4e2a\u95ee\u9898\u7684\u89e3\u7b54"},{"location":"java/garbage-collector/#_7","text":"\u5806\u4e2d\u51e0\u4e4e\u5b58\u653e\u7740\u6240\u6709\u7684\u5b9e\u4f8b\u5bf9\u8c61\uff0c\u6240\u4ee5\u8981\u4e86\u89e3\u5783\u573e\u56de\u6536\u5668\uff0c\u9996\u5148\u8981\u5b66\u4f1a\u5224\u65ad\u54ea\u4e9b\u5bf9\u8c61\u5df2\u7ecf\u6b7b\u4ea1\uff08\u4e0d\u80fd\u518d\u4f7f\u7528\uff09\u3002 JVM \u6709\u4e24\u79cd\u65b9\u6cd5\u5224\u65ad\u5bf9\u8c61\u662f\u5426\u6b7b\u4ea1\uff1a \u5f15\u7528\u8ba1\u6570\u6cd5 \u7ed9\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u5730\u65b9\u5f15\u7528\u5b83\uff0c\u8ba1\u6570\u5668\u5c31\u52a01\uff0c\u5f15\u7528\u5931\u6548\u65f6\uff0c\u8ba1\u6570\u5668\u51cf1\u3002\u8ba1\u6570\u5668\u503c\u4e3a0\u7684\u5bf9\u8c61\u5c31\u662f\u4e0d\u80fd\u518d\u4f7f\u7528\u7684\u3002 \u8fd9\u79cd\u65b9\u6cd5\u5b9e\u73b0\u7b80\u5355\uff0c\u6548\u7387\u9ad8\uff0c\u4f46\u662f\u76ee\u524d\u4e3b\u6d41\u7684\u865a\u62df\u673a\u6ca1\u6709\u518d\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e86\uff0c\u56e0\u4e3a\u5b83\u65e0\u6cd5\u89e3\u51b3\u5bf9\u8c61\u4e4b\u95f4\u76f8\u4e92\u5f15\u7528\u7684\u7684\u95ee\u9898\u3002 \u53ef\u8fbe\u6027\u5206\u6790\u6cd5 \u6b64\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u5c31\u662f\u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79f0\u4e3a \u201cGC Roots\u201d \u7684\u5bf9\u8c61\u4f5c\u4e3a\u8d77\u70b9\uff0c\u4ece\u8fd9\u4e9b\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u641c\u7d22\uff0c\u501f\u70b9\u5a11\u8d70\u8fc7\u7684\u8def\u5f84\u53eb\u505a\u5f15\u7528\u94fe\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5230 GC Roots \u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u94fe\u76f8\u8fde\u7684\u8bdd\uff0c\u5c31\u8bf4\u660e\u6b64\u5bf9\u8c61\u662f\u4e0d\u53ef\u7528\u7684\u3002","title":"\u5bf9\u8c61\u6b7b\u4ea1\u7684\u5224\u65ad"},{"location":"java/garbage-collector/#minor-gc-full-gc","text":"\u65b0\u751f\u4ee3 GC\uff08Minor GC\uff09\uff1a\u53d1\u751f\u5728\u65b0\u751f\u4ee3\u7684\u5783\u573e\u6536\u96c6\u64cd\u4f5c\uff0cMinor GC \u975e\u5e38\u9891\u7e41\uff0c\u4e14\u4e00\u822c\u901f\u5ea6\u4e5f\u6bd4\u8f83\u5feb\u3002 Major GC / Full GC\uff1a\u53d1\u751f\u5728\u8001\u5e74\u4ee3\u7684 GC\uff0c\u901f\u5ea6\u4e00\u822c\u6bd4 Minor GC \u616210\u500d\u4ee5\u4e0a\u3002","title":"Minor GC \u548c Full GC \u7684\u533a\u522b"},{"location":"java/garbage-collector/#_8","text":"Java \u56db\u79cd\u5f15\u7528\u7c7b\u578b \uff5e \u5f3a\u5f15\u7528\uff0c\u8f6f\u5f15\u7528\uff0c\u5f31\u5f15\u7528\uff0c\u865a\u5f15\u7528\uff08\u865a\u5f15\u7528\u4e0e\u8f6f\u5f15\u7528\u548c\u5f31\u5f15\u7528\u7684\u533a\u522b\uff0c\u4f7f\u7528\u8f6f\u5f15\u7528\u7684\u597d\u5904\uff09 \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u5e38\u91cf\u662f\u5e9f\u5f03\u5e38\u91cf \u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u65e0\u7528\u7684\u7c7b","title":"\u5176\u4ed6\u95ee\u9898"},{"location":"java/garbage-collector/#_9","text":"\u6765\u6e90\u4e8e JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668 \u6536\u96c6\u5668 \u4e32\u884c\u3001\u5e76\u884cor\u5e76\u53d1 \u65b0\u751f\u4ee3/\u8001\u5e74\u4ee3 \u7b97\u6cd5 \u76ee\u6807 \u9002\u7528\u573a\u666f Serial \u4e32\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u5355CPU\u73af\u5883\u4e0b\u7684Client\u6a21\u5f0f Serial Old \u4e32\u884c \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6574\u7406 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u5355CPU\u73af\u5883\u4e0b\u7684Client\u6a21\u5f0f\u3001CMS\u7684\u540e\u5907\u9884\u6848 ParNew \u5e76\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u591aCPU\u73af\u5883\u65f6\u5728Server\u6a21\u5f0f\u4e0b\u4e0eCMS\u914d\u5408 Parallel Scavenge \u5e76\u884c \u65b0\u751f\u4ee3 \u590d\u5236\u7b97\u6cd5 \u541e\u5410\u91cf\u4f18\u5148 \u5728\u540e\u53f0\u8fd0\u7b97\u800c\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1 Parallel Old \u5e76\u884c \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6574\u7406 \u541e\u5410\u91cf\u4f18\u5148 \u5728\u540e\u53f0\u8fd0\u7b97\u800c\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1 CMS \u5e76\u53d1 \u8001\u5e74\u4ee3 \u6807\u8bb0-\u6e05\u9664 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u96c6\u4e2d\u5728\u4e92\u8054\u7f51\u7ad9\u6216B/S\u7cfb\u7edf\u670d\u52a1\u7aef\u4e0a\u7684Java\u5e94\u7528 G1 \u5e76\u53d1 both \u6807\u8bb0-\u6574\u7406+\u590d\u5236\u7b97\u6cd5 \u54cd\u5e94\u901f\u5ea6\u4f18\u5148 \u9762\u5411\u670d\u52a1\u7aef\u5e94\u7528 [\u53c2\u8003\u94fe\u63a5] Java Garbage Collection Basics JVM Garbage Collectors Java Garbage Collection Algorithms SnailClimb JavaGuide - Java\u5783\u573e\u56de\u6536 JVM \u5783\u573e\u56de\u6536\u5668\u5de5\u4f5c\u539f\u7406\u53ca\u4f7f\u7528\u5b9e\u4f8b\u4ecb\u7ecd JVM \u4e03\u79cd\u5783\u573e\u6536\u96c6\u5668","title":"\u603b\u7ed3"},{"location":"java/jvm-breakdown/","tags":["jvm"],"text":"Purpose \u00b6 \u8fd9\u7bc7\u6587\u7ae0\u662f\u7528\u6765\u8bb0\u5f55 Java \u9762\u8bd5\u65f6\u9700\u8981\u5e94\u5bf9\u7684 Java \u865a\u62df\u673a\u90e8\u5206\u7684\u95ee\u9898\u3002 Java 7 \u5230 Java 8 \u7684\u66f4\u65b0 \u00b6 JEP 122: Remove the Permanent Generation \u5728\u6b64\u6587\u7ae0\u4e2d\u51fa\u73b0\u4e86\u8fd9\u6bb5\u8bdd\uff1a Info The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap. Hotspot will explicitly allocate and free the native memory for the class meta-data. \u8fd9\u6b21\u63d0\u51fa\u7684\u5b9e\u73b0\u4f1a\u5c06\u7c7b\u7684\u5143\u6570\u636e\u5206\u914d\u5728\u672c\u5730\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06 interned Strings \u548c\u7c7b\u9759\u6001\u6570\u636e\u79fb\u5165 Java \u5806\u4e2d\u3002 \u4e4b\u524d\u4f7f\u7528 -XX:MaxPermSize \u6765\u63a7\u5236 Permanent Generation \u7684\u5185\u5b58\u5927\u5c0f\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 -XX:MaxMetaspaceSize \u63a7\u5236\u5143\u7a7a\u95f4\u7684\u6700\u5927\u503c\u4e86\u3002 Java \u865a\u62df\u673a\u5185\u5b58\u533a\u57df \u00b6 Java 7 \u548c Java 8 \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5185\u5b58\u533a\u57df\uff0c\u6211\u4f1a\u5c06\u4ed6\u4eec\u5206\u5f00\u8bf4\u660e\u3002 JVM \u5185\u5b58\u533a\u57df\u4e2d\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u90e8\u5206\uff0c\u53eb\u505a Code Cache (\u4ee3\u7801\u7f13\u5b58)\uff0ccode cache \u662f JVM \u7528\u6765\u5b58\u50a8 native code\u3002\u5b83\u662f\u4f4d\u4e8e\u8fde\u7eed\u5185\u5b58\u5757\u5757\u4e0a\u7684\u5355\u4e2a\u5806\u6570\u636e\u7ed3\u6784\u3002 Note \u8fd9\u4e2a\u5c31\u6d89\u53ca\u5230 Tiered Compilation \u4e86\uff0c\u53ef\u4ee5\u81ea\u884c\u53bb\u770b\u6587\u6863\uff1a Java Virtual Machine Guide Run-Time Data Areas - \u8fd0\u884c\u65f6\u6570\u636e\u533a \u00b6 JVM \u5b9a\u4e49\u4e86\u5404\u79cd\u5404\u6837\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u4f7f\u7528\u7684\u8fd0\u884c\u65f6\u6570\u636e\u533a\u3002\u4e00\u4e9b\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\u5e76\u4e14\u53ea\u5728 JVM \u5173\u95ed\u65f6\u9500\u6bc1\uff0c\u53e6\u5916\u4e00\u4e9b\u5219\u662f\u6839\u636e\u6bcf\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u7684\u6570\u636e\u533a\u662f\u5728\u7ebf\u7a0b\u521b\u5efa\u65f6\u521b\u5efa\u5e76\u5728\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u65f6\u9500\u6bc1\u3002 The PC Register - \u7a0b\u5e8f\u8ba1\u6570\u5668\u5bc4\u5b58\u5668 \u00b6 Tip pc stands for program counter, so pc register equals to program counter register. \u4e0b\u6587\u90fd\u5c06\u7b80\u79f0 pc register \u4e3a \u7a0b\u5e8f\u8ba1\u6570\u5668 JVM \u652f\u6301\u540c\u4e00\u65f6\u95f4\u8bb8\u591a\u7ebf\u7a0b\u7684\u6267\u884c\u3002\u6bcf\u4e2a JVM \u7ebf\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u7684 pc \u6ce8\u518c\u5668\u3002\u4efb\u4f55\u65f6\u95f4\u70b9\u7ebf\u7a0b\u90fd\u5728\u6267\u884c\u5355\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\uff0c\u5982\u679c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u662f native \u65b9\u6cd5\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u5305\u542b\u73b0\u5728\u6b63\u5728\u6267\u884c\u7684 JVM \u6307\u4ee4\u7684\u5730\u5740\u3002 \u800c\u5982\u679c\u6b63\u5728\u6267\u884c native \u65b9\u6cd5\uff0c\u5219\u8be5\u7ebf\u7a0b\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u5c31\u662f undefined\u3002\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\u8db3\u4ee5\u4fdd\u5b58\u7279\u5b9a\u5e73\u53f0\u4e0a\u7684 returnAddress \u6216 native \u6307\u9488\u3002\uff09 Java Virtual Machine Stacks - JVM \u6808 \u00b6 \u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u4e2a\u79c1\u6709\u7684\u6808\u7a7a\u95f4\uff0c\u5728\u7ebf\u7a0b\u521b\u5efa\u65f6\u521b\u5efa\u3002\u6808\u7a7a\u95f4\u662f\u7528\u6765\u50a8\u5b58\u6808\u5e27\uff08frames\uff09\u7684\u3002JVM \u7684\u5806\u6808\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u8bed\u8a00\uff08eg. C\uff09\u7684\u5806\u6808\uff1a\u4fdd\u5b58\u4e86\u672c\u5730\u53d8\u91cf\u548c\u90e8\u5206\u8fd4\u56de\u503c\uff0c\u5e76\u5728\u65b9\u6cd5\u8c03\u7528\u548c\u8fd4\u56de\u4e2d\u8d77\u5230\u4f5c\u7528\u3002\u56e0\u4e3a JVM \u6808\u7a7a\u95f4\u9664\u4e86\u5f39\u51fa (pop) \u548c\u538b\u5165 (push) \u6808\u5e27\u4e0d\u4f1a\u88ab\u76f4\u63a5\u64cd\u4f5c\uff0c\u6240\u4ee5\u6808\u5e27\u53ef\u80fd\u662f\u5728\u5806\u4e2d\u5206\u914d\u7684\u3002\u6240\u4ee5 JVM \u6808\u7684\u5185\u5b58\u4e0d\u9700\u8981\u662f\u8fde\u7eed\u7684\u3002 \u4ee5\u4e0a\u89c4\u8303\u5141\u8bb8 JVM \u6808\u62e5\u6709\u56fa\u5b9a\u5927\u5c0f\u6216\u8005\u6839\u636e\u8ba1\u7b97\u8981\u6c42\u52a8\u6001\u6269\u5c55\u548c\u6536\u7f29\u3002\u5982\u679c\u6808\u662f\u56fa\u5b9a\u5927\u5c0f\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u6808\u7684\u65f6\u5019\u53ef\u4ee5\u72ec\u7acb\u9009\u62e9\u6808\u7684\u5927\u5c0f\u3002 JVM \u7ed9\u7a0b\u5e8f\u5458\u548c\u7528\u6237\u63d0\u4f9b\u4e86\u63a7\u5236 JVM \u6808\u521d\u59cb\u5316\u5927\u5c0f\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u5728\u52a8\u6001\u6269\u5c55\u6216\u6536\u7f29\u6808\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u6307\u5b9a\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002 \u4f46\u662f JVM \u6808\u4e5f\u6709\u4e00\u4e9b\u4f8b\u5916\u60c5\u51b5\uff08\u5f02\u5e38\uff09\uff1a \u5982\u679c\u8bf4\u8ba1\u7b97\u8981\u6c42\u7684\u6808\u7a7a\u95f4\u6bd4\u5141\u8bb8\u4f7f\u7528\u7684\u7a7a\u95f4\u8fd8\u8981\u5927\uff0cJVM \u4f1a\u629b\u51fa\u4e00\u4e2a StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u6808\u7a7a\u95f4\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\uff0c\u4f46\u662f\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u5b9e\u73b0\u6269\u5c55\uff0c\u6216\u8005\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u4e3a\u65b0\u7684\u7ebf\u7a0b\u521b\u5efa\u6808\u7a7a\u95f4\uff0c\u5219 JVM \u4f1a\u629b\u51fa OutOfMemoryError \u3002 Heap - \u5806 \u00b6 \u5806\u5728 JVM \u4e2d\u662f\u7ebf\u7a0b\u5171\u4eab\u7684\uff0c\u662f\u7ed9\u6240\u6709 \u7c7b\u5b9e\u4f8b \u548c \u6570\u7ec4 \u5206\u914d\u7a7a\u95f4\u7684\u8fd0\u884c\u65f6\u6570\u636e\u533a\u3002 \u5806\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\u7684\u3002 \u5b58\u50a8\u5728\u5806\u4e2d\u7684\u5bf9\u8c61\u7531 GC \uff08Garbage Collector, automatic storage management system\uff09 \u56de\u6536\u3002\u6240\u4ee5\u6211\u4eec\u5728 Java \u4e2d \u4e0d\u4f1a\u663e\u5f0f \u91ca\u653e\u5bf9\u8c61\u7684\u5185\u5b58\u3002 \u5806\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f\u6216\u8005\u52a8\u6001\u6269\u5c55\u6216\u8005\u5f53\u5927\u5806\u6ca1\u6709\u5fc5\u8981\u7684\u65f6\u5019\u6536\u7f29\u3002 \u5806\u7684\u5185\u5b58\u4e0d\u9700\u8981\u8fde\u7eed\u3002 JVM \u4e5f\u7ed9\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u63a7\u5236\u5806\u5185\u5b58\u5927\u5c0f\u7684\u53c2\u6570 -Xms size \u8bbe\u5b9a\u5806\u5185\u5b58\u6700\u5c0f\u503c\u548c\u521d\u59cb\u503c -Xmx size \u6307\u5b9a\u5bf9\u5185\u5b58\u6700\u5927\u503c -Xmn size \u6307\u5b9a\u5bf9\u5185\u5b58\u4e2d\u5e74\u8f7b\u4ee3\u7684\u521d\u59cb\u503c\u548c\u6700\u5927\u503c \u5982\u679c\u7ed9\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u65f6\uff0c\u5806\u5185\u5b58\u4e0d\u8db3\u4e86\uff0cJVM \u4f1a\u629b\u51fa OutOfMemoryError \u3002 \u5728\u5806\u4e2d\uff0c\u6211\u4eec\u5206\u51fa\u4e86\u4e24\u4e2a\u90e8\u5206\uff1anursery (\u53ef\u79f0\u4f5c\u5e74\u8f7b\u4ee3 - young generation) \u548c old space (\u8001\u5e74\u4ee3)\u3002\u5176\u4e2d nursery memory \u53c8\u88ab\u6c1b\u56f4\u4e09\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a Eden memory \u548c\u4e24\u4e2a survivor memory (s0, s1)\u3002\u7edd\u5927\u591a\u6570\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u90fd\u88ab\u5206\u914d\u5728 Eden Memory \u4e2d\uff0c\u5f53 Eden Memory \u6ee1\u4e86\u65f6\uff0cMinor GC \u4f1a\u5c06\u6240\u6709 eden memory \u4e2d\u7684\u5bf9\u8c61\u79fb\u5230 survivor memory \u4e2d (\u901a\u5e38\u5176\u4e2d\u7531\u5f88\u5927\u4e00\u90e8\u5206\u4f1a\u88ab\u56de\u6536\uff0c\u672a\u88ab\u56de\u6536\u7684\u90e8\u5206\u4f1a\u79fb\u5230 survivor \u4e2d)\uff0c\u5e76\u4e14 Minor GC \u4f1a\u68c0\u67e5 survivor \u4e2d\u7684\u5bf9\u8c61\u5e76\u5c06\u5b83\u4eec (\u672a\u88ab\u56de\u6536\u7684\u90e8\u5206) \u79fb\u5230\u53e6\u4e00\u4e2a survivor memory \u4e2d\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4f1a\u6709\u4e00\u4e2a survivor memory \u662f\u7a7a\u7684\u3002\u5f53\u5bf9\u8c61\u5728 survivor \u4e2d\u5b58\u6d3b\u8db3\u591f\u591a\u7684 cycle \u540e\uff0c\u4f1a\u88ab\u79fb\u5165 \u8001\u5e74\u4ee3\u5185\u5b58\u4e2d\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cJava HotSpot VM \u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u5730\u5740\u7a7a\u95f4\u9884\u7559\u6574\u4e2a Heap\uff0c\u4f46\u9664\u975e\u9700\u8981\uff0c\u5426\u5219\u4e0d\u4f1a\u4e3a\u5176\u5206\u914d\u7269\u7406\u5185\u5b58\u3002 Method Area - \u65b9\u6cd5\u533a\uff08Java 8 \u4e4b\u540e\u5df2\u7ecf\u79fb\u9664\uff09 \u00b6 Java 8 \u4e4b\u540e\u5df2\u7ecf\u79fb\u9664\u4e86 Permanent Generation\uff0c\u65b9\u6cd5\u533a\u662f Java \u865a\u62df\u673a\u7684\u903b\u8f91\u6982\u5ff5\u3002\u800c\u5728 HotSpot \u4e2d\uff0cPermanent Generation \u5c31\u662f\u5b83\u5bf9\u8fd9\u4e2a\u6982\u5ff5\u7684\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 Note\uff0c\u53ef\u4ee5\u5728 Oracle \u7684\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\u7b54\u6848\uff1a Java Virtual Machine Specification - Chapter 2.5.4 The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads. The method area is analogous to the storage area for compiled code of a conventional language or analogous to the \"text\" segment in an operating system process. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods (\u00a72.9) used in class and instance initialization and interface initialization. The method area is created on virtual machine start-up. Although the method area is logically part of the heap , simple implementations may choose not to either garbage collect or compact it. This specification does not mandate the location of the method area or the policies used to manage compiled code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous. A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size. The following exceptional condition is associated with the method area: If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError . \u4e0a\u9762\u7c97\u4f53\u7684\u90e8\u5206\u63d0\u5230\uff1a\u201c \u867d\u7136\u65b9\u6cd5\u533a\u662f\u5806\u7684\u903b\u8f91\u90e8\u5206 \u201d \u5728\u4e0a\u65b9\u7684\u5f15\u7528\u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\uff0c\u65b9\u6cd5\u533a\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\uff0c\u548c\u5806\u4e00\u6837\u3002 Permanent Generation \u662f\u5728 Hotspot \u7684\u5bf9\u65b9\u6cd5\u533a\u7684\u5b9e\u73b0\u3002 \u65b9\u6cd5\u533a\u5b58\u50a8 \u201cper-class structure\u201d\uff0c\u4f8b\u5982\uff1a \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\uff08run-time constant pool\uff09\uff1aInterned Strings\u2026 field \u65b9\u6cd5\u6570\u636e\uff08method data\uff09 \u65b9\u6cd5\u548c\u6784\u9020\u5668\u7684\u4ee3\u7801\uff08code for methods and constructors\uff09 \u7528\u5728\u63a5\u53e3\u548c\u5b9e\u4f8b\u521d\u59cb\u5316\u7684\u7279\u6b8a\u65b9\u6cd5 \u7c7b\u5143\u6570\u636e \u4f46\u662f\u5728 Java 8 \u540e\uff0c\u7c7b\u5143\u6570\u636e\u88ab\u79fb\u5230\u4e86Metaspace\u3002 Run-Time Constant Pool - \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60 \u00b6 \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u662f\u7c7b\u6587\u4ef6\u4e2d\u5e38\u91cf\u6c60\u8868\u7684\u6bcf\u4e2a\u7c7b\u6216\u6bcf\u4e2a\u63a5\u53e3\u7684\u8fd0\u884c\u65f6\u8868\u793a\uff0c\u5305\u542b\u4e86\u4ece\u7f16\u8bd1\u65f6\u5df2\u77e5\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5230\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5904\u7406\u7684\u65b9\u6cd5\u548c\u5b57\u6bb5\u5f15\u7528\u3002 \u5b83\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u53ea\u4e0d\u8fc7\u5305\u542b\u4e86\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u3002 \u5728 Java 8 \u4e4b\u524d\uff0c\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u662f\u5b58\u5728\u4e8e\u65b9\u6cd5\u533a\u4e2d\u7684\uff08\u5728 HotSpot \u865a\u62df\u673a\u4e2d\u4f4d\u4e8e Permanent Generation \u4e2d\uff09\uff0c\u5728 Java 8 \u4e4b\u540e\uff0c\u79fb\u5230\u4e86\u5806\u4e2d\u3002 Native Method Stacks - \u672c\u5730\u65b9\u6cd5\u6808 \u00b6 \u672c\u5730\u65b9\u6cd5\u6808\u4f7f JVM \u80fd\u591f\u4f7f\u7528 native \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u9664\u5f00 Java \u4e4b\u5916\u7684\u5176\u4ed6\u8bed\u8a00\u5f00\u53d1\u7684\u65b9\u6cd5\uff08\u4f8b\u5982\uff1aC\u8bed\u8a00\uff0cJVM \u662f C \u8bed\u8a00\u5f00\u53d1\u7684\uff09\u3002 \u901a\u5e38\u6765\u8bf4\uff0cJVM \u4f1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5355\u72ec\u5206\u914d\u4e00\u4e2a\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u6240\u4ee5\u672c\u5730\u65b9\u6cd5\u6808\u4e5f\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\u3002 \u4ee5\u4e0b\u4e24\u4e2a\u5f02\u5e38\u662f\u672c\u5730\u65b9\u6cd5\u6808\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\uff1a StackOverflowError\uff1a\u5982\u679c\u8ba1\u7b97\u4e4b\u540e\u9700\u8981\u7684\u5185\u5b58\u6bd4\u8bbe\u7f6e\u7684\u6700\u5927\u672c\u5730\u65b9\u6cd5\u6808\u8fd8\u8981\u5927\u3002 OutOfMemoryError\uff1a\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u65e0\u6cd5\u4e3a\u65b0\u7684\u7ebf\u7a0b\u521b\u5efa\u521d\u59cb\u5316\u7684\u672c\u5730\u65b9\u6cd5\u6808\u3002 Metaspace \u00b6 MetaSpace - \u5143\u7a7a\u95f4 Metaspace - \u5143\u7a7a\u95f4 \u00b6 Metaspace \u6211\u4e3b\u8981\u53c2\u8003 Thomas St\u00fcfe \u7684\u6587\u7ae0\uff0c\u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u5c06\u5176\u7ffb\u8bd1\u4e0b\u6765\u3002 Thomas St\u00fcfe \u662f OpenJDK \u7684\u5f00\u53d1\u8005\uff0c\u4ed6\u7684\u6587\u7ae0\u5e94\u8be5\u9760\u8c31\u3002 Reference : What is Metaspace Metaspace \u662f JVM \u7528\u6765\u5b58\u653e\u7c7b\u5143\u6570\u636e (class metadata) \u7684\u5730\u65b9\u3002\u7c7b\u5143\u6570\u636e\u662f\u5728 JVM \u8fdb\u7a0b\u4e2d Java \u7c7b\u7684\u8fd0\u884c\u65f6\u8868\u793a\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f JVM \u5904\u7406 Java \u7c7b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\u3002\u5b83\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a KClass Structure: Java \u7c7b\u7684\u8fd0\u884c\u65f6\u72b6\u6001\u7684\u865a\u62df\u673a\u5185\u90e8\u8868\u793a (the VM-internal representation of runtime state of a java class) Method Metadata (\u65b9\u6cd5\u5143\u6570\u636e) - \u65b9\u6cd5\u7684\u76f8\u5173\u4fe1\u606f\u6570\u636e\uff0c\u5305\u62ec\u5b57\u8282\u7801 (bytecode)\uff0c\u5f02\u5e38\u8868 (exception table)\uff0c\u5e38\u91cf (constant)\uff0c\u5c40\u90e8\u53d8\u91cf\u8868 (local variables table)\uff0c\u53c2\u6570\u4fe1\u606f\u7b49\u2026 \u5e38\u91cf\u6c60 \u6ce8\u89e3 \u65b9\u6cd5\u8ba1\u6570\u5668\u6536\u96c6\u65b9\u6cd5\u8c03\u7528\u6b21\u6570\uff0c\u7528\u6765\u8f85\u52a9 JIT \u51b3\u7b56 ... Frames - \u6808\u5e27 \u00b6 \u4e3b\u8981\u8be6\u7ec6\u8bf4\u660e\u4e0a\u6587\u8bf4\u5230\u7684\u6808\u5e27\u3002 \u6808\u5e27\u662f\u7528\u6765\u50a8\u5b58\u6570\u636e\u548c\u90e8\u5206\u7ed3\u679c\uff0c\u6267\u884c\u52a8\u6001\u94fe\u63a5\uff0c\u8fd4\u56de\u503c\uff0c\u4ee5\u53ca\u629b\u51fa\u5f02\u5e38\u3002 \u65b0\u7684\u6808\u5e27\u662f\u5728\u6bcf\u6b21\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u968f\u7740\u65b9\u6cd5\u8c03\u7528\u5b8c\u6210\u9500\u6bc1\uff08\u4e0d\u7ba1\u662f\u5426\u6b63\u5e38\u7ed3\u675f\u6216\u629b\u51fa\u4e86\u5f02\u5e38\uff09\u3002\u6808\u5e27\u662f\u88ab\u7ebf\u7a0b\u521b\u5efa\u4e14\u5206\u914d\u5728JVM\u6808\u4e2d\u3002\u6bcf\u4e2a\u6808\u5e27\u90fd\u6709\u81ea\u5df1\u7684\u672c\u5730\u53d8\u91cf\u6570\u7ec4\uff0c\u64cd\u4f5c\u6570\u6808\u4ee5\u53ca\u4e00\u4e2a\u5f53\u524d\u65b9\u6cd5\u7684\u7c7b\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u7684\u5f15\u7528\u3002 \u5f53\u4e00\u4e2a\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u4e00\u4e2a\u6808\u5e27\u4f1a\u88ab\u538b\u5165JVM\u6808\u4e2d\uff0c\u8be5\u6808\u5e27\u88ab\u79f0\u4e3a\u5f53\u524d\u6808\uff0c\u800c\u5176\u540a\u7528\u7684\u65b9\u6cd5\u662f\u5f53\u524d\u65b9\u6cd5\u3002\u5982\u679c\u8be5\u6808\u5e27\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5219\u8be5\u6808\u5e27\u5c06\u4e0d\u662f\u5f53\u524d\u6808\u5e27\uff0c\u4e00\u4e2a\u65b0\u7684\u6808\u5e27\u4f1a\u88ab\u538b\u5165JVM\u6808\uff0c\u5f53\u65b0\u7684\u65b9\u6cd5\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u5f53\u524d\u6808\u5e27\u4f1a\u88ab\u5f39\u51faJVM\u6808\uff0c\u4e0a\u4e00\u4e2a\u6808\u5e27\u5219\u53d8\u6210\u5f53\u524d\u6808\u5e27\u4e86\u3002 Local Variables - \u672c\u5730\u53d8\u91cf \u00b6 \u6bcf\u4e2a\u6808\u5e27\u90fd\u542b\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u672c\u5730\u53d8\u91cf\uff08local variables\uff09\u7684\u53d8\u91cf\u6570\u7ec4\u3002 \u5355\u4e2a\u5c40\u90e8\u53d8\u91cf\u80fd\u4fdd\u5b58 boolean, byte, char, short, int, float, reference \u6216 returnAddress \u7684\u503c\u3002\u4e00\u5bf9\u5c40\u90e8\u53d8\u91cf\u624d\u80fd\u4fdd\u5b58 long \u6216 double \u7684\u503c\uff08long\u6216double\u9700\u8981\u5360\u7528\u4e24\u4e2a\u8fde\u7eed\u5730\u5740\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002 \u7c7b\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u88ab\u4f20\u5165\u7684\u53c2\u6570\u7684\u7d22\u5f15\u90fd\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002\u800c\u5728\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u7d22\u5f15\u4e3a 0 \u7684\u5c40\u90e8\u53d8\u91cf\u662f\u8fd9\u4e2a\u5b9e\u4f8b\u65b9\u6cd5\u88ab\u8c03\u7528\u7684\u5bf9\u8c61\u7684\u5f15\u7528\uff08this\uff09\uff0c\u6240\u6709\u53c2\u6570\u7684\u7d22\u5f15\u90fd\u662f\u4ece 1 \u5f00\u59cb\u3002 Operand Stacks - \u64cd\u4f5c\u6570\u6808 \u00b6 \u6bcf\u4e00\u4e2a\u6808\u5e27\u90fd\u542b\u6709\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa(LIFO)\u7684\u6808\uff0c\u53eb\u505a operand stack (\u64cd\u4f5c\u6570\u6808)\u3002 \u6808\u5e27\u521b\u5efa\u7684\u65f6\u5019\u64cd\u4f5c\u6570\u6808\u662f\u7a7a\u7684\uff0cJVM \u4f1a\u901a\u8fc7\u4e00\u4e9b\u6307\u4ee4\u6765\u52a0\u8f7d\u5e38\u91cf\u6216\u8005\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u6216\u5b57\u6bb5\u5230\u64cd\u4f5c\u6570\u6808\u3002\u5176\u4ed6\u4e00\u4e9b JVM \u6307\u4ee4\u4f1a\u4ece\u64cd\u4f5c\u6570\u6808\u4e2d\u53d6\u51fa\u64cd\u4f5c\u6570\uff0c\u6839\u636e\u6307\u4ee4\u64cd\u4f5c\u5b83\u4eec\uff0c\u5e76\u5c06\u7ed3\u679c\u518d\u538b\u5165\u64cd\u4f5c\u6570\u6808\u3002\u64cd\u4f5c\u6570\u6808\u4e5f\u4f1a\u88ab\u7528\u6765\u51c6\u5907\u4f20\u5165\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u63a5\u6536\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u3002 \u4e3e\u4e2a\ud83c\udf30\uff1a JVM \u4f7f\u7528 iadd ( \"iadd\" Instruction ) \u6307\u4ee4\u5c06\u4e24\u4e2a int \u6570\u5b57\u52a0\u5728\u4e00\u8d77\uff0cJVM\u4f1a\u8981\u6c42\u8fd9\u4e24\u4e2a\u9700\u8981\u88ab\u52a0\u5728\u4e00\u8d77\u7684\u6574\u578b\u6570\u5b57\u8981\u5728\u64cd\u4f5c\u6570\u6808\u7684\u6700\u9876\u7aef\uff0c\u524d\u4e00\u4e2a\u6307\u4ee4\u4f1a\u5c06\u5b83\u4eec\u4e24\u4e2a\u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\uff0c\u5b83\u4eec\u4e24\u4e2a\u4f1a\u4ece\u64cd\u4f5c\u6570\u6808\u4e2d\u88ab\u5f39\u51fa\uff0c\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u4f1a\u88ab\u538b\u5165\u64cd\u4f5c\u6570\u6808\u4e2d\u3002 Warning \u5fc5\u987b\u4ee5\u9002\u5408\u5176\u7c7b\u578b\u7684\u64cd\u4f5c\u65b9\u5f0f\u64cd\u4f5c operand stack \u4e2d\u7684\u503c\u3002 \u5728\u4efb\u4f55\u65f6\u5019\uff0c\u64cd\u4f5c\u6570\u6808\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u6df1\u5ea6\uff0c\u5176\u4e2d long \u548c double \u7c7b\u578b\u7684\u503c\u8d21\u732e\u4e24\u4e2a\u5355\u4f4d\u7684\u6df1\u5ea6\uff0c\u800c\u5176\u5b83\u7c7b\u578b\u7684\u503c\u8d21\u732e\u4e00\u4e2a\u5355\u4f4d\u7684\u6df1\u5ea6\u3002 Dynamic Linking - \u52a8\u6001\u94fe\u63a5 \u00b6 \u6bcf\u4e2a\u6808\u5e27\u90fd\u5305\u542b\u5bf9\u5f53\u524d\u65b9\u6cd5\u7c7b\u578b\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u7684\u5f15\u7528\uff0c\u4ee5\u652f\u6301\u65b9\u6cd5\u4ee3\u7801\u7684\u52a8\u6001\u94fe\u63a5\u3002 \u65b9\u6cd5\u7684 class file code \u901a\u8fc7\u7b26\u53f7\u5f15\u7528 (symbolic reference) \u6307\u5411\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u548c\u88ab\u8bbf\u95ee\u7684\u53c2\u6570\u3002\u52a8\u6001\u94fe\u63a5\u5c31\u662f\u5c06\u8fd9\u4e9b\u7b26\u53f7\u5f15\u7528\u8f6c\u6362\u6210\u5177\u4f53\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u5e76\u4e14\u5c06\u53c2\u6570\u8bbf\u95ee\u8f6c\u6362\u6210\u4e0e\u8fd9\u4e9b\u53c2\u6570\u76f8\u5173\u8054\u7684\u5b58\u50a8\u7ed3\u6784\u7684\u4f4d\u79fb\u3002 Conclusion \u00b6 Java \u7684\u5185\u5b58\u533a\u57df\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a Heap JVM Stack Method Area \uff08HotSpot\u4e2d\u7684\u5b9e\u73b0\u4e3a Permanent Generation\uff09 Metaspace \u5176\u4e2d JVM Stack \u4e2d\u5b58\u50a8\uff1a PC Register Native Method Stack Frames - \u6808\u5e27 a. \u5c40\u90e8\u53d8\u91cf\u6570\u7ec4 b. \u64cd\u4f5c\u6570\u6808 c. \u52a8\u6001\u94fe\u63a5 Heap \u4e2d\u5b58\u653e\uff1a \u7c7b\u5b9e\u4f8b\u548c\u6570\u7ec4 Run-Time Constant Pool Interned Strings Class Statics Metaspace\u4e2d\u5b58\u653e\uff1a \u7c7b\u5143\u6570\u636e\uff1a\u5305\u62ec\u4f46\u4e0d\u9650\u4e8eKClass\u7ed3\u6784\uff08\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aJava\u7c7b\u5728\u865a\u62df\u673a\u5185\u90e8\u7684\u8868\u793a\uff09\u3001\u65b9\u6cd5\u5143\u6570\u636e\uff08\u5305\u62ec\u5b57\u8282\u7801\uff0c\u65b9\u6cd5\u53c2\u6570\u4fe1\u606f\uff09\u3001\u5e38\u91cf\u6c60\u3001\u6ce8\u89e3\u3001\u65b9\u6cd5\u8ba1\u6570\u5668\u3002\u3002\u3002","title":"JVM \u5185\u5b58\u533a\u57df\u5b66\u4e60\u7b14\u8bb0"},{"location":"java/jvm-breakdown/#purpose","text":"\u8fd9\u7bc7\u6587\u7ae0\u662f\u7528\u6765\u8bb0\u5f55 Java \u9762\u8bd5\u65f6\u9700\u8981\u5e94\u5bf9\u7684 Java \u865a\u62df\u673a\u90e8\u5206\u7684\u95ee\u9898\u3002","title":"Purpose"},{"location":"java/jvm-breakdown/#java-7-java-8","text":"JEP 122: Remove the Permanent Generation \u5728\u6b64\u6587\u7ae0\u4e2d\u51fa\u73b0\u4e86\u8fd9\u6bb5\u8bdd\uff1a Info The proposed implementation will allocate class meta-data in native memory and move interned Strings and class statics to the Java heap. Hotspot will explicitly allocate and free the native memory for the class meta-data. \u8fd9\u6b21\u63d0\u51fa\u7684\u5b9e\u73b0\u4f1a\u5c06\u7c7b\u7684\u5143\u6570\u636e\u5206\u914d\u5728\u672c\u5730\u5185\u5b58\u4e2d\uff0c\u5e76\u5c06 interned Strings \u548c\u7c7b\u9759\u6001\u6570\u636e\u79fb\u5165 Java \u5806\u4e2d\u3002 \u4e4b\u524d\u4f7f\u7528 -XX:MaxPermSize \u6765\u63a7\u5236 Permanent Generation \u7684\u5185\u5b58\u5927\u5c0f\uff0c\u73b0\u5728\u53ef\u4ee5\u4f7f\u7528 -XX:MaxMetaspaceSize \u63a7\u5236\u5143\u7a7a\u95f4\u7684\u6700\u5927\u503c\u4e86\u3002","title":"Java 7 \u5230 Java 8 \u7684\u66f4\u65b0"},{"location":"java/jvm-breakdown/#java","text":"Java 7 \u548c Java 8 \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u5185\u5b58\u533a\u57df\uff0c\u6211\u4f1a\u5c06\u4ed6\u4eec\u5206\u5f00\u8bf4\u660e\u3002 JVM \u5185\u5b58\u533a\u57df\u4e2d\u8fd8\u6709\u4e00\u4e2a\u7279\u6b8a\u7684\u90e8\u5206\uff0c\u53eb\u505a Code Cache (\u4ee3\u7801\u7f13\u5b58)\uff0ccode cache \u662f JVM \u7528\u6765\u5b58\u50a8 native code\u3002\u5b83\u662f\u4f4d\u4e8e\u8fde\u7eed\u5185\u5b58\u5757\u5757\u4e0a\u7684\u5355\u4e2a\u5806\u6570\u636e\u7ed3\u6784\u3002 Note \u8fd9\u4e2a\u5c31\u6d89\u53ca\u5230 Tiered Compilation \u4e86\uff0c\u53ef\u4ee5\u81ea\u884c\u53bb\u770b\u6587\u6863\uff1a Java Virtual Machine Guide","title":"Java \u865a\u62df\u673a\u5185\u5b58\u533a\u57df"},{"location":"java/jvm-breakdown/#run-time-data-areas-","text":"JVM \u5b9a\u4e49\u4e86\u5404\u79cd\u5404\u6837\u5728\u7a0b\u5e8f\u6267\u884c\u4e2d\u4f7f\u7528\u7684\u8fd0\u884c\u65f6\u6570\u636e\u533a\u3002\u4e00\u4e9b\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\u5e76\u4e14\u53ea\u5728 JVM \u5173\u95ed\u65f6\u9500\u6bc1\uff0c\u53e6\u5916\u4e00\u4e9b\u5219\u662f\u6839\u636e\u6bcf\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u7684\u6570\u636e\u533a\u662f\u5728\u7ebf\u7a0b\u521b\u5efa\u65f6\u521b\u5efa\u5e76\u5728\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u65f6\u9500\u6bc1\u3002","title":"Run-Time Data Areas - \u8fd0\u884c\u65f6\u6570\u636e\u533a"},{"location":"java/jvm-breakdown/#the-pc-register-","text":"Tip pc stands for program counter, so pc register equals to program counter register. \u4e0b\u6587\u90fd\u5c06\u7b80\u79f0 pc register \u4e3a \u7a0b\u5e8f\u8ba1\u6570\u5668 JVM \u652f\u6301\u540c\u4e00\u65f6\u95f4\u8bb8\u591a\u7ebf\u7a0b\u7684\u6267\u884c\u3002\u6bcf\u4e2a JVM \u7ebf\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u7684 pc \u6ce8\u518c\u5668\u3002\u4efb\u4f55\u65f6\u95f4\u70b9\u7ebf\u7a0b\u90fd\u5728\u6267\u884c\u5355\u4e2a\u65b9\u6cd5\u7684\u4ee3\u7801\uff0c\u5982\u679c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u662f native \u65b9\u6cd5\uff0c\u5219\u5f53\u524d\u7ebf\u7a0b\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u5305\u542b\u73b0\u5728\u6b63\u5728\u6267\u884c\u7684 JVM \u6307\u4ee4\u7684\u5730\u5740\u3002 \u800c\u5982\u679c\u6b63\u5728\u6267\u884c native \u65b9\u6cd5\uff0c\u5219\u8be5\u7ebf\u7a0b\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u7684\u503c\u5c31\u662f undefined\u3002\uff08\u7a0b\u5e8f\u8ba1\u6570\u5668\u8db3\u4ee5\u4fdd\u5b58\u7279\u5b9a\u5e73\u53f0\u4e0a\u7684 returnAddress \u6216 native \u6307\u9488\u3002\uff09","title":"The PC Register - \u7a0b\u5e8f\u8ba1\u6570\u5668\u5bc4\u5b58\u5668"},{"location":"java/jvm-breakdown/#java-virtual-machine-stacks-jvm","text":"\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u6709\u4e2a\u79c1\u6709\u7684\u6808\u7a7a\u95f4\uff0c\u5728\u7ebf\u7a0b\u521b\u5efa\u65f6\u521b\u5efa\u3002\u6808\u7a7a\u95f4\u662f\u7528\u6765\u50a8\u5b58\u6808\u5e27\uff08frames\uff09\u7684\u3002JVM \u7684\u5806\u6808\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u8bed\u8a00\uff08eg. C\uff09\u7684\u5806\u6808\uff1a\u4fdd\u5b58\u4e86\u672c\u5730\u53d8\u91cf\u548c\u90e8\u5206\u8fd4\u56de\u503c\uff0c\u5e76\u5728\u65b9\u6cd5\u8c03\u7528\u548c\u8fd4\u56de\u4e2d\u8d77\u5230\u4f5c\u7528\u3002\u56e0\u4e3a JVM \u6808\u7a7a\u95f4\u9664\u4e86\u5f39\u51fa (pop) \u548c\u538b\u5165 (push) \u6808\u5e27\u4e0d\u4f1a\u88ab\u76f4\u63a5\u64cd\u4f5c\uff0c\u6240\u4ee5\u6808\u5e27\u53ef\u80fd\u662f\u5728\u5806\u4e2d\u5206\u914d\u7684\u3002\u6240\u4ee5 JVM \u6808\u7684\u5185\u5b58\u4e0d\u9700\u8981\u662f\u8fde\u7eed\u7684\u3002 \u4ee5\u4e0a\u89c4\u8303\u5141\u8bb8 JVM \u6808\u62e5\u6709\u56fa\u5b9a\u5927\u5c0f\u6216\u8005\u6839\u636e\u8ba1\u7b97\u8981\u6c42\u52a8\u6001\u6269\u5c55\u548c\u6536\u7f29\u3002\u5982\u679c\u6808\u662f\u56fa\u5b9a\u5927\u5c0f\uff0c\u90a3\u4e48\u5728\u521b\u5efa\u6808\u7684\u65f6\u5019\u53ef\u4ee5\u72ec\u7acb\u9009\u62e9\u6808\u7684\u5927\u5c0f\u3002 JVM \u7ed9\u7a0b\u5e8f\u5458\u548c\u7528\u6237\u63d0\u4f9b\u4e86\u63a7\u5236 JVM \u6808\u521d\u59cb\u5316\u5927\u5c0f\u7684\u529f\u80fd\uff0c\u4ee5\u53ca\u5728\u52a8\u6001\u6269\u5c55\u6216\u6536\u7f29\u6808\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u6307\u5b9a\u6700\u5927\u548c\u6700\u5c0f\u503c\u3002 \u4f46\u662f JVM \u6808\u4e5f\u6709\u4e00\u4e9b\u4f8b\u5916\u60c5\u51b5\uff08\u5f02\u5e38\uff09\uff1a \u5982\u679c\u8bf4\u8ba1\u7b97\u8981\u6c42\u7684\u6808\u7a7a\u95f4\u6bd4\u5141\u8bb8\u4f7f\u7528\u7684\u7a7a\u95f4\u8fd8\u8981\u5927\uff0cJVM \u4f1a\u629b\u51fa\u4e00\u4e2a StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u6808\u7a7a\u95f4\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\uff0c\u4f46\u662f\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u6765\u5b9e\u73b0\u6269\u5c55\uff0c\u6216\u8005\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\u6765\u4e3a\u65b0\u7684\u7ebf\u7a0b\u521b\u5efa\u6808\u7a7a\u95f4\uff0c\u5219 JVM \u4f1a\u629b\u51fa OutOfMemoryError \u3002","title":"Java Virtual Machine Stacks - JVM \u6808"},{"location":"java/jvm-breakdown/#heap-","text":"\u5806\u5728 JVM \u4e2d\u662f\u7ebf\u7a0b\u5171\u4eab\u7684\uff0c\u662f\u7ed9\u6240\u6709 \u7c7b\u5b9e\u4f8b \u548c \u6570\u7ec4 \u5206\u914d\u7a7a\u95f4\u7684\u8fd0\u884c\u65f6\u6570\u636e\u533a\u3002 \u5806\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\u7684\u3002 \u5b58\u50a8\u5728\u5806\u4e2d\u7684\u5bf9\u8c61\u7531 GC \uff08Garbage Collector, automatic storage management system\uff09 \u56de\u6536\u3002\u6240\u4ee5\u6211\u4eec\u5728 Java \u4e2d \u4e0d\u4f1a\u663e\u5f0f \u91ca\u653e\u5bf9\u8c61\u7684\u5185\u5b58\u3002 \u5806\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f\u6216\u8005\u52a8\u6001\u6269\u5c55\u6216\u8005\u5f53\u5927\u5806\u6ca1\u6709\u5fc5\u8981\u7684\u65f6\u5019\u6536\u7f29\u3002 \u5806\u7684\u5185\u5b58\u4e0d\u9700\u8981\u8fde\u7eed\u3002 JVM \u4e5f\u7ed9\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u63a7\u5236\u5806\u5185\u5b58\u5927\u5c0f\u7684\u53c2\u6570 -Xms size \u8bbe\u5b9a\u5806\u5185\u5b58\u6700\u5c0f\u503c\u548c\u521d\u59cb\u503c -Xmx size \u6307\u5b9a\u5bf9\u5185\u5b58\u6700\u5927\u503c -Xmn size \u6307\u5b9a\u5bf9\u5185\u5b58\u4e2d\u5e74\u8f7b\u4ee3\u7684\u521d\u59cb\u503c\u548c\u6700\u5927\u503c \u5982\u679c\u7ed9\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u65f6\uff0c\u5806\u5185\u5b58\u4e0d\u8db3\u4e86\uff0cJVM \u4f1a\u629b\u51fa OutOfMemoryError \u3002 \u5728\u5806\u4e2d\uff0c\u6211\u4eec\u5206\u51fa\u4e86\u4e24\u4e2a\u90e8\u5206\uff1anursery (\u53ef\u79f0\u4f5c\u5e74\u8f7b\u4ee3 - young generation) \u548c old space (\u8001\u5e74\u4ee3)\u3002\u5176\u4e2d nursery memory \u53c8\u88ab\u6c1b\u56f4\u4e09\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a Eden memory \u548c\u4e24\u4e2a survivor memory (s0, s1)\u3002\u7edd\u5927\u591a\u6570\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u90fd\u88ab\u5206\u914d\u5728 Eden Memory \u4e2d\uff0c\u5f53 Eden Memory \u6ee1\u4e86\u65f6\uff0cMinor GC \u4f1a\u5c06\u6240\u6709 eden memory \u4e2d\u7684\u5bf9\u8c61\u79fb\u5230 survivor memory \u4e2d (\u901a\u5e38\u5176\u4e2d\u7531\u5f88\u5927\u4e00\u90e8\u5206\u4f1a\u88ab\u56de\u6536\uff0c\u672a\u88ab\u56de\u6536\u7684\u90e8\u5206\u4f1a\u79fb\u5230 survivor \u4e2d)\uff0c\u5e76\u4e14 Minor GC \u4f1a\u68c0\u67e5 survivor \u4e2d\u7684\u5bf9\u8c61\u5e76\u5c06\u5b83\u4eec (\u672a\u88ab\u56de\u6536\u7684\u90e8\u5206) \u79fb\u5230\u53e6\u4e00\u4e2a survivor memory \u4e2d\uff0c\u6240\u4ee5\u5728\u540c\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4f1a\u6709\u4e00\u4e2a survivor memory \u662f\u7a7a\u7684\u3002\u5f53\u5bf9\u8c61\u5728 survivor \u4e2d\u5b58\u6d3b\u8db3\u591f\u591a\u7684 cycle \u540e\uff0c\u4f1a\u88ab\u79fb\u5165 \u8001\u5e74\u4ee3\u5185\u5b58\u4e2d\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0cJava HotSpot VM \u5728\u542f\u52a8\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u5730\u5740\u7a7a\u95f4\u9884\u7559\u6574\u4e2a Heap\uff0c\u4f46\u9664\u975e\u9700\u8981\uff0c\u5426\u5219\u4e0d\u4f1a\u4e3a\u5176\u5206\u914d\u7269\u7406\u5185\u5b58\u3002","title":"Heap - \u5806"},{"location":"java/jvm-breakdown/#method-area-java-8","text":"Java 8 \u4e4b\u540e\u5df2\u7ecf\u79fb\u9664\u4e86 Permanent Generation\uff0c\u65b9\u6cd5\u533a\u662f Java \u865a\u62df\u673a\u7684\u903b\u8f91\u6982\u5ff5\u3002\u800c\u5728 HotSpot \u4e2d\uff0cPermanent Generation \u5c31\u662f\u5b83\u5bf9\u8fd9\u4e2a\u6982\u5ff5\u7684\u5b9e\u73b0\u3002 \u5bf9\u4e8e\u4e0a\u9762\u7684 Note\uff0c\u53ef\u4ee5\u5728 Oracle \u7684\u5b98\u65b9\u6587\u6863\u4e2d\u627e\u5230\u7b54\u6848\uff1a Java Virtual Machine Specification - Chapter 2.5.4 The Java Virtual Machine has a method area that is shared among all Java Virtual Machine threads. The method area is analogous to the storage area for compiled code of a conventional language or analogous to the \"text\" segment in an operating system process. It stores per-class structures such as the run-time constant pool, field and method data, and the code for methods and constructors, including the special methods (\u00a72.9) used in class and instance initialization and interface initialization. The method area is created on virtual machine start-up. Although the method area is logically part of the heap , simple implementations may choose not to either garbage collect or compact it. This specification does not mandate the location of the method area or the policies used to manage compiled code. The method area may be of a fixed size or may be expanded as required by the computation and may be contracted if a larger method area becomes unnecessary. The memory for the method area does not need to be contiguous. A Java Virtual Machine implementation may provide the programmer or the user control over the initial size of the method area, as well as, in the case of a varying-size method area, control over the maximum and minimum method area size. The following exceptional condition is associated with the method area: If memory in the method area cannot be made available to satisfy an allocation request, the Java Virtual Machine throws an OutOfMemoryError . \u4e0a\u9762\u7c97\u4f53\u7684\u90e8\u5206\u63d0\u5230\uff1a\u201c \u867d\u7136\u65b9\u6cd5\u533a\u662f\u5806\u7684\u903b\u8f91\u90e8\u5206 \u201d \u5728\u4e0a\u65b9\u7684\u5f15\u7528\u4e2d\u6211\u4eec\u53ef\u4ee5\u627e\u5230\uff0c\u65b9\u6cd5\u533a\u662f\u5728 JVM \u542f\u52a8\u65f6\u521b\u5efa\uff0c\u548c\u5806\u4e00\u6837\u3002 Permanent Generation \u662f\u5728 Hotspot \u7684\u5bf9\u65b9\u6cd5\u533a\u7684\u5b9e\u73b0\u3002 \u65b9\u6cd5\u533a\u5b58\u50a8 \u201cper-class structure\u201d\uff0c\u4f8b\u5982\uff1a \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\uff08run-time constant pool\uff09\uff1aInterned Strings\u2026 field \u65b9\u6cd5\u6570\u636e\uff08method data\uff09 \u65b9\u6cd5\u548c\u6784\u9020\u5668\u7684\u4ee3\u7801\uff08code for methods and constructors\uff09 \u7528\u5728\u63a5\u53e3\u548c\u5b9e\u4f8b\u521d\u59cb\u5316\u7684\u7279\u6b8a\u65b9\u6cd5 \u7c7b\u5143\u6570\u636e \u4f46\u662f\u5728 Java 8 \u540e\uff0c\u7c7b\u5143\u6570\u636e\u88ab\u79fb\u5230\u4e86Metaspace\u3002","title":"Method Area - \u65b9\u6cd5\u533a\uff08Java 8 \u4e4b\u540e\u5df2\u7ecf\u79fb\u9664\uff09"},{"location":"java/jvm-breakdown/#run-time-constant-pool-","text":"\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u662f\u7c7b\u6587\u4ef6\u4e2d\u5e38\u91cf\u6c60\u8868\u7684\u6bcf\u4e2a\u7c7b\u6216\u6bcf\u4e2a\u63a5\u53e3\u7684\u8fd0\u884c\u65f6\u8868\u793a\uff0c\u5305\u542b\u4e86\u4ece\u7f16\u8bd1\u65f6\u5df2\u77e5\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5230\u5fc5\u987b\u5728\u8fd0\u884c\u65f6\u5904\u7406\u7684\u65b9\u6cd5\u548c\u5b57\u6bb5\u5f15\u7528\u3002 \u5b83\u7c7b\u4f3c\u4e8e\u4f20\u7edf\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u7b26\u53f7\u8868\uff0c\u53ea\u4e0d\u8fc7\u5305\u542b\u4e86\u66f4\u5e7f\u6cdb\u7684\u6570\u636e\u3002 \u5728 Java 8 \u4e4b\u524d\uff0c\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u662f\u5b58\u5728\u4e8e\u65b9\u6cd5\u533a\u4e2d\u7684\uff08\u5728 HotSpot \u865a\u62df\u673a\u4e2d\u4f4d\u4e8e Permanent Generation \u4e2d\uff09\uff0c\u5728 Java 8 \u4e4b\u540e\uff0c\u79fb\u5230\u4e86\u5806\u4e2d\u3002","title":"Run-Time Constant Pool - \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60"},{"location":"java/jvm-breakdown/#native-method-stacks-","text":"\u672c\u5730\u65b9\u6cd5\u6808\u4f7f JVM \u80fd\u591f\u4f7f\u7528 native \u65b9\u6cd5\uff0c\u4e5f\u5c31\u662f\u8bf4\u4f7f\u7528\u9664\u5f00 Java \u4e4b\u5916\u7684\u5176\u4ed6\u8bed\u8a00\u5f00\u53d1\u7684\u65b9\u6cd5\uff08\u4f8b\u5982\uff1aC\u8bed\u8a00\uff0cJVM \u662f C \u8bed\u8a00\u5f00\u53d1\u7684\uff09\u3002 \u901a\u5e38\u6765\u8bf4\uff0cJVM \u4f1a\u4e3a\u6bcf\u4e2a\u7ebf\u7a0b\u5355\u72ec\u5206\u914d\u4e00\u4e2a\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u6240\u4ee5\u672c\u5730\u65b9\u6cd5\u6808\u4e5f\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\u3002 \u4ee5\u4e0b\u4e24\u4e2a\u5f02\u5e38\u662f\u672c\u5730\u65b9\u6cd5\u6808\u53ef\u80fd\u4f1a\u51fa\u73b0\u7684\uff1a StackOverflowError\uff1a\u5982\u679c\u8ba1\u7b97\u4e4b\u540e\u9700\u8981\u7684\u5185\u5b58\u6bd4\u8bbe\u7f6e\u7684\u6700\u5927\u672c\u5730\u65b9\u6cd5\u6808\u8fd8\u8981\u5927\u3002 OutOfMemoryError\uff1a\u5806\u5185\u5b58\u4e0d\u8db3\u65f6\uff0c\u65e0\u6cd5\u4e3a\u65b0\u7684\u7ebf\u7a0b\u521b\u5efa\u521d\u59cb\u5316\u7684\u672c\u5730\u65b9\u6cd5\u6808\u3002","title":"Native Method Stacks - \u672c\u5730\u65b9\u6cd5\u6808"},{"location":"java/jvm-breakdown/#metaspace","text":"MetaSpace - \u5143\u7a7a\u95f4","title":"Metaspace"},{"location":"java/jvm-breakdown/#metaspace-","text":"Metaspace \u6211\u4e3b\u8981\u53c2\u8003 Thomas St\u00fcfe \u7684\u6587\u7ae0\uff0c\u6839\u636e\u81ea\u5df1\u7684\u7406\u89e3\uff0c\u5c06\u5176\u7ffb\u8bd1\u4e0b\u6765\u3002 Thomas St\u00fcfe \u662f OpenJDK \u7684\u5f00\u53d1\u8005\uff0c\u4ed6\u7684\u6587\u7ae0\u5e94\u8be5\u9760\u8c31\u3002 Reference : What is Metaspace Metaspace \u662f JVM \u7528\u6765\u5b58\u653e\u7c7b\u5143\u6570\u636e (class metadata) \u7684\u5730\u65b9\u3002\u7c7b\u5143\u6570\u636e\u662f\u5728 JVM \u8fdb\u7a0b\u4e2d Java \u7c7b\u7684\u8fd0\u884c\u65f6\u8868\u793a\uff0c\u7b80\u5355\u6765\u8bf4\u5c31\u662f JVM \u5904\u7406 Java \u7c7b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f\u3002\u5b83\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a KClass Structure: Java \u7c7b\u7684\u8fd0\u884c\u65f6\u72b6\u6001\u7684\u865a\u62df\u673a\u5185\u90e8\u8868\u793a (the VM-internal representation of runtime state of a java class) Method Metadata (\u65b9\u6cd5\u5143\u6570\u636e) - \u65b9\u6cd5\u7684\u76f8\u5173\u4fe1\u606f\u6570\u636e\uff0c\u5305\u62ec\u5b57\u8282\u7801 (bytecode)\uff0c\u5f02\u5e38\u8868 (exception table)\uff0c\u5e38\u91cf (constant)\uff0c\u5c40\u90e8\u53d8\u91cf\u8868 (local variables table)\uff0c\u53c2\u6570\u4fe1\u606f\u7b49\u2026 \u5e38\u91cf\u6c60 \u6ce8\u89e3 \u65b9\u6cd5\u8ba1\u6570\u5668\u6536\u96c6\u65b9\u6cd5\u8c03\u7528\u6b21\u6570\uff0c\u7528\u6765\u8f85\u52a9 JIT \u51b3\u7b56 ...","title":"Metaspace - \u5143\u7a7a\u95f4"},{"location":"java/jvm-breakdown/#frames-","text":"\u4e3b\u8981\u8be6\u7ec6\u8bf4\u660e\u4e0a\u6587\u8bf4\u5230\u7684\u6808\u5e27\u3002 \u6808\u5e27\u662f\u7528\u6765\u50a8\u5b58\u6570\u636e\u548c\u90e8\u5206\u7ed3\u679c\uff0c\u6267\u884c\u52a8\u6001\u94fe\u63a5\uff0c\u8fd4\u56de\u503c\uff0c\u4ee5\u53ca\u629b\u51fa\u5f02\u5e38\u3002 \u65b0\u7684\u6808\u5e27\u662f\u5728\u6bcf\u6b21\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\u521b\u5efa\uff0c\u5e76\u968f\u7740\u65b9\u6cd5\u8c03\u7528\u5b8c\u6210\u9500\u6bc1\uff08\u4e0d\u7ba1\u662f\u5426\u6b63\u5e38\u7ed3\u675f\u6216\u629b\u51fa\u4e86\u5f02\u5e38\uff09\u3002\u6808\u5e27\u662f\u88ab\u7ebf\u7a0b\u521b\u5efa\u4e14\u5206\u914d\u5728JVM\u6808\u4e2d\u3002\u6bcf\u4e2a\u6808\u5e27\u90fd\u6709\u81ea\u5df1\u7684\u672c\u5730\u53d8\u91cf\u6570\u7ec4\uff0c\u64cd\u4f5c\u6570\u6808\u4ee5\u53ca\u4e00\u4e2a\u5f53\u524d\u65b9\u6cd5\u7684\u7c7b\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u7684\u5f15\u7528\u3002 \u5f53\u4e00\u4e2a\u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u4e00\u4e2a\u6808\u5e27\u4f1a\u88ab\u538b\u5165JVM\u6808\u4e2d\uff0c\u8be5\u6808\u5e27\u88ab\u79f0\u4e3a\u5f53\u524d\u6808\uff0c\u800c\u5176\u540a\u7528\u7684\u65b9\u6cd5\u662f\u5f53\u524d\u65b9\u6cd5\u3002\u5982\u679c\u8be5\u6808\u5e27\u8c03\u7528\u4e86\u53e6\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5219\u8be5\u6808\u5e27\u5c06\u4e0d\u662f\u5f53\u524d\u6808\u5e27\uff0c\u4e00\u4e2a\u65b0\u7684\u6808\u5e27\u4f1a\u88ab\u538b\u5165JVM\u6808\uff0c\u5f53\u65b0\u7684\u65b9\u6cd5\u8c03\u7528\u5b8c\u6210\u540e\uff0c\u5f53\u524d\u6808\u5e27\u4f1a\u88ab\u5f39\u51faJVM\u6808\uff0c\u4e0a\u4e00\u4e2a\u6808\u5e27\u5219\u53d8\u6210\u5f53\u524d\u6808\u5e27\u4e86\u3002","title":"Frames - \u6808\u5e27"},{"location":"java/jvm-breakdown/#local-variables-","text":"\u6bcf\u4e2a\u6808\u5e27\u90fd\u542b\u6709\u4e00\u4e2a\u88ab\u79f0\u4e3a\u672c\u5730\u53d8\u91cf\uff08local variables\uff09\u7684\u53d8\u91cf\u6570\u7ec4\u3002 \u5355\u4e2a\u5c40\u90e8\u53d8\u91cf\u80fd\u4fdd\u5b58 boolean, byte, char, short, int, float, reference \u6216 returnAddress \u7684\u503c\u3002\u4e00\u5bf9\u5c40\u90e8\u53d8\u91cf\u624d\u80fd\u4fdd\u5b58 long \u6216 double \u7684\u503c\uff08long\u6216double\u9700\u8981\u5360\u7528\u4e24\u4e2a\u8fde\u7eed\u5730\u5740\u7684\u5c40\u90e8\u53d8\u91cf\uff09\u3002 \u7c7b\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u4efb\u4f55\u88ab\u4f20\u5165\u7684\u53c2\u6570\u7684\u7d22\u5f15\u90fd\u662f\u4ece 0 \u5f00\u59cb\u7684\u3002\u800c\u5728\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u7d22\u5f15\u4e3a 0 \u7684\u5c40\u90e8\u53d8\u91cf\u662f\u8fd9\u4e2a\u5b9e\u4f8b\u65b9\u6cd5\u88ab\u8c03\u7528\u7684\u5bf9\u8c61\u7684\u5f15\u7528\uff08this\uff09\uff0c\u6240\u6709\u53c2\u6570\u7684\u7d22\u5f15\u90fd\u662f\u4ece 1 \u5f00\u59cb\u3002","title":"Local Variables - \u672c\u5730\u53d8\u91cf"},{"location":"java/jvm-breakdown/#operand-stacks-","text":"\u6bcf\u4e00\u4e2a\u6808\u5e27\u90fd\u542b\u6709\u4e00\u4e2a\u540e\u8fdb\u5148\u51fa(LIFO)\u7684\u6808\uff0c\u53eb\u505a operand stack (\u64cd\u4f5c\u6570\u6808)\u3002 \u6808\u5e27\u521b\u5efa\u7684\u65f6\u5019\u64cd\u4f5c\u6570\u6808\u662f\u7a7a\u7684\uff0cJVM \u4f1a\u901a\u8fc7\u4e00\u4e9b\u6307\u4ee4\u6765\u52a0\u8f7d\u5e38\u91cf\u6216\u8005\u5c40\u90e8\u53d8\u91cf\u7684\u503c\u6216\u5b57\u6bb5\u5230\u64cd\u4f5c\u6570\u6808\u3002\u5176\u4ed6\u4e00\u4e9b JVM \u6307\u4ee4\u4f1a\u4ece\u64cd\u4f5c\u6570\u6808\u4e2d\u53d6\u51fa\u64cd\u4f5c\u6570\uff0c\u6839\u636e\u6307\u4ee4\u64cd\u4f5c\u5b83\u4eec\uff0c\u5e76\u5c06\u7ed3\u679c\u518d\u538b\u5165\u64cd\u4f5c\u6570\u6808\u3002\u64cd\u4f5c\u6570\u6808\u4e5f\u4f1a\u88ab\u7528\u6765\u51c6\u5907\u4f20\u5165\u65b9\u6cd5\u7684\u53c2\u6570\u548c\u63a5\u6536\u65b9\u6cd5\u8fd4\u56de\u7ed3\u679c\u3002 \u4e3e\u4e2a\ud83c\udf30\uff1a JVM \u4f7f\u7528 iadd ( \"iadd\" Instruction ) \u6307\u4ee4\u5c06\u4e24\u4e2a int \u6570\u5b57\u52a0\u5728\u4e00\u8d77\uff0cJVM\u4f1a\u8981\u6c42\u8fd9\u4e24\u4e2a\u9700\u8981\u88ab\u52a0\u5728\u4e00\u8d77\u7684\u6574\u578b\u6570\u5b57\u8981\u5728\u64cd\u4f5c\u6570\u6808\u7684\u6700\u9876\u7aef\uff0c\u524d\u4e00\u4e2a\u6307\u4ee4\u4f1a\u5c06\u5b83\u4eec\u4e24\u4e2a\u538b\u5165\u6808\u4e2d\u3002\u7136\u540e\uff0c\u5b83\u4eec\u4e24\u4e2a\u4f1a\u4ece\u64cd\u4f5c\u6570\u6808\u4e2d\u88ab\u5f39\u51fa\uff0c\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u4f1a\u88ab\u538b\u5165\u64cd\u4f5c\u6570\u6808\u4e2d\u3002 Warning \u5fc5\u987b\u4ee5\u9002\u5408\u5176\u7c7b\u578b\u7684\u64cd\u4f5c\u65b9\u5f0f\u64cd\u4f5c operand stack \u4e2d\u7684\u503c\u3002 \u5728\u4efb\u4f55\u65f6\u5019\uff0c\u64cd\u4f5c\u6570\u6808\u90fd\u6709\u4e00\u4e2a\u5173\u8054\u6df1\u5ea6\uff0c\u5176\u4e2d long \u548c double \u7c7b\u578b\u7684\u503c\u8d21\u732e\u4e24\u4e2a\u5355\u4f4d\u7684\u6df1\u5ea6\uff0c\u800c\u5176\u5b83\u7c7b\u578b\u7684\u503c\u8d21\u732e\u4e00\u4e2a\u5355\u4f4d\u7684\u6df1\u5ea6\u3002","title":"Operand Stacks - \u64cd\u4f5c\u6570\u6808"},{"location":"java/jvm-breakdown/#dynamic-linking-","text":"\u6bcf\u4e2a\u6808\u5e27\u90fd\u5305\u542b\u5bf9\u5f53\u524d\u65b9\u6cd5\u7c7b\u578b\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u7684\u5f15\u7528\uff0c\u4ee5\u652f\u6301\u65b9\u6cd5\u4ee3\u7801\u7684\u52a8\u6001\u94fe\u63a5\u3002 \u65b9\u6cd5\u7684 class file code \u901a\u8fc7\u7b26\u53f7\u5f15\u7528 (symbolic reference) \u6307\u5411\u88ab\u8c03\u7528\u7684\u65b9\u6cd5\u548c\u88ab\u8bbf\u95ee\u7684\u53c2\u6570\u3002\u52a8\u6001\u94fe\u63a5\u5c31\u662f\u5c06\u8fd9\u4e9b\u7b26\u53f7\u5f15\u7528\u8f6c\u6362\u6210\u5177\u4f53\u7684\u65b9\u6cd5\u5f15\u7528\uff0c\u5e76\u4e14\u5c06\u53c2\u6570\u8bbf\u95ee\u8f6c\u6362\u6210\u4e0e\u8fd9\u4e9b\u53c2\u6570\u76f8\u5173\u8054\u7684\u5b58\u50a8\u7ed3\u6784\u7684\u4f4d\u79fb\u3002","title":"Dynamic Linking - \u52a8\u6001\u94fe\u63a5"},{"location":"java/jvm-breakdown/#conclusion","text":"Java \u7684\u5185\u5b58\u533a\u57df\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a Heap JVM Stack Method Area \uff08HotSpot\u4e2d\u7684\u5b9e\u73b0\u4e3a Permanent Generation\uff09 Metaspace \u5176\u4e2d JVM Stack \u4e2d\u5b58\u50a8\uff1a PC Register Native Method Stack Frames - \u6808\u5e27 a. \u5c40\u90e8\u53d8\u91cf\u6570\u7ec4 b. \u64cd\u4f5c\u6570\u6808 c. \u52a8\u6001\u94fe\u63a5 Heap \u4e2d\u5b58\u653e\uff1a \u7c7b\u5b9e\u4f8b\u548c\u6570\u7ec4 Run-Time Constant Pool Interned Strings Class Statics Metaspace\u4e2d\u5b58\u653e\uff1a \u7c7b\u5143\u6570\u636e\uff1a\u5305\u62ec\u4f46\u4e0d\u9650\u4e8eKClass\u7ed3\u6784\uff08\u5f88\u91cd\u8981\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3aJava\u7c7b\u5728\u865a\u62df\u673a\u5185\u90e8\u7684\u8868\u793a\uff09\u3001\u65b9\u6cd5\u5143\u6570\u636e\uff08\u5305\u62ec\u5b57\u8282\u7801\uff0c\u65b9\u6cd5\u53c2\u6570\u4fe1\u606f\uff09\u3001\u5e38\u91cf\u6c60\u3001\u6ce8\u89e3\u3001\u65b9\u6cd5\u8ba1\u6570\u5668\u3002\u3002\u3002","title":"Conclusion"},{"location":"java/spring-cloud-ribbon/","tags":["spring cloud","ribbon","deprecated"],"text":"Ribbon \u662f Netflix \u516c\u53f8\u5f00\u6e90\u7684\u4e00\u4e2a\u8d1f\u8f7d\u5747\u8861\u9879\u76ee\u3002\u53ef\u4ee5\u5728 Zuul \u4e2d\u4f7f\u7528 Ribbon \u505a\u8d1f\u8f7d\u5747\u8861\uff0c\u4e5f\u53ef\u4ee5\u548c Feign \u7ed3\u5408\u4f7f\u7528\u3002\u5728 Spring Cloud \u5f00\u53d1\u4e2d\u4f7f\u7528\u7684\u6700\u591a\u7684\u53ef\u80fd\u5c31\u662f RestTemplate \u548c Ribbon\u3002\u4ee3\u7801\u53ef\u80fd\u5982\u4e0b\uff1a 1 2 3 4 5 6 7 8 @Configuration public class RibbonConfig { @Bean @LoadBalanced public RestTemplate restTemplate () { return new RestTemplate (); } } \u4f7f\u7528 RestTemplate \u6d88\u8d39\u670d\u52a1\u63a5\u53e3\u7684\u4ee3\u7801\u53ef\u80fd\u662f\u8fd9\u6837\u7684\uff1a 1 2 3 4 5 6 7 8 9 @Service public class RibbonService { @Autowired private RestTemplate restTemplate ; public String hi ( String name ) { return restTemplate . getForObject ( \"http://eureka-client/hi?name=\" + name , String . class ); } } RestTemplate \u5728 Spring \u4e2d\u5c31\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u67e5\u770b\u4ee5\u4e0a\u7684\u4ee3\u7801\u53ef\u4ee5\u53d1\u73b0 RestTemplate Bean \u4e0a\u6709\u4e00\u4e2a @LoadBalanced \u6ce8\u89e3\uff0c\u8fd9\u4e2a\u6ce8\u89e3\u6807\u8bb0\u5728 RestTemplate \u4e0a\uff0c\u8ba9\u8d1f\u8f7d\u5747\u8861\u5ba2\u6237\u7aef LoadBalancerClient \u6765\u914d\u7f6e\u5b83\u3002 \u8d1f\u8f7d\u5747\u8861\u521d\u59cb\u5316 \u00b6 spring-cloud-commons \u5305\u4e2d\u5b9a\u4e49\u4e86 LoadBalancerClient \u63a5\u53e3\uff0c\u5b83\u662f Ribbon \u4e2d\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7ec4\u4ef6\u3002\u7ee7\u627f\u7ed3\u6784\u5982\u4e0b\uff1a LoadBalancerAutoConfiguration \u00b6 \u800c\u5728 spring-cloud-commons \u4e2d\u76f8\u540c\u7684\u5305\u4e0b\u9762\uff0c\u53ef\u4ee5\u770b\u5230 LoadBalancerAutoConfiguration\uff0c\u770b\u7c7b\u540d\u5c31\u80fd\u770b\u51fa\u6765\u8fd9\u662f\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u4f1a\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u52a0\u8f7d\u5176\u4e2d\u7684\u914d\u7f6e\uff1a LoadBalancerAutoConfiguration 1 2 3 4 5 6 7 @Configuration @ConditionalOnClass ( RestTemplate . class ) @ConditionalOnBean ( LoadBalancerClient . class ) @EnableConfigurationProperties ( LoadBalancerRetryProperties . class ) public class LoadBalancerAutoConfiguration { // \u7701\u7565\u4ee3\u7801\u3002\u3002\u3002\u4e3b\u8981\u662f\u5bf9 LoadBalancerInterceptor \u548c RetryLoadBalancerInterCeptor \u7684\u7b49\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u91cc\u6211\u4eec\u770b\u7c7b\u4e0a\u7684\u6ce8\u89e3@ConditionalOnBean\u548c@ConditionalOnClass } \u53ef\u4ee5\u770b\u5230\u8be5\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e0a\u6709\u6ce8\u89e3 @ConditionalOnBean(LoadBalancerClient.class) \u548c @ConditionalOnClass(RestTemplate.class) \uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u7c7b\u7684\u751f\u6548\u6761\u4ef6\u662f\uff1a 1\u3001\u5f53\u524d\u5de5\u7a0b\u4e2d\u8981\u6709 RestTemplate \u7c7b 2\u3001\u5728 Spring \u7684 IOC \u5bb9\u5668\u4e2d\u5fc5\u987b\u8981\u6709 LoadBalancerClient \u7684\u5b9e\u73b0 Bean \u7136\u540e\u6211\u4eec\u770b\u5230 org.springframework.cloud.netflix.ribbon \u8fd9\u4e2a\u5305\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a RibbonAutoConfiguration.java \u7c7b\uff08\u7ee7\u627f\u4e8e LoadBalancerClient\uff09\u3002\u67e5\u770b\u5230\u5176\u4e2d\u914d\u7f6e\u7684 Bean\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u8981\u5f15\u5165\u4e86\u8fd9\u4e2a\u5305\uff0c\u5c31\u4e00\u5b9a\u4f1a\u521b\u5efa\u4e00\u4e2a RibbonLoadBalancerClient \u5b9e\u4f8b\u5bf9\u8c61\u52a0\u5165\u5230 IOC \u5bb9\u5668\u4e2d\uff0c\u5e76\u4e14\u89e6\u53d1 LoadBalancerAutoConfiguration \u914d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Configuration @Conditional ( RibbonAutoConfiguration . RibbonClassesConditions . class ) @RibbonClients @AutoConfigureAfter ( name = \"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\" ) @AutoConfigureBefore ({ LoadBalancerAutoConfiguration . class , AsyncLoadBalancerAutoConfiguration . class }) @EnableConfigurationProperties ({ RibbonEagerLoadProperties . class , ServerIntrospectorProperties . class }) public class RibbonAutoConfiguration { // \u7701\u7565\u3002\u3002\u3002 @Bean @ConditionalOnMissingBean ( LoadBalancerClient . class ) public LoadBalancerClient loadBalancerClient () { return new RibbonLoadBalancerClient ( springClientFactory ()); } // \u7701\u7565\u3002\u3002\u3002 } \u6211\u4eec\u518d\u770b\u56de LoadBalancerAutoConfiguration\uff0c\u8be5\u81ea\u52a8\u5316\u914d\u7f6e\u7c7b\uff0c\u4e3b\u8981\u505a\u4e86\u51e0\u4e2a\u914d\u7f6e\uff1a 1\u3001\u7ef4\u62a4\u4e86\u4e00\u4e2a\u88ab @LoadBalanced \u6ce8\u89e3\u4fee\u9970\u7684 RestTemplate \u5bf9\u8c61\u5217\u8868 1 2 3 4 5 6 7 8 9 10 11 @Configuration @ConditionalOnClass ( RestTemplate . class ) @ConditionalOnBean ( LoadBalancerClient . class ) @EnableConfigurationProperties ( LoadBalancerRetryProperties . class ) public class LoadBalancerAutoConfiguration { @LoadBalanced @Autowired ( required = false ) private List < RestTemplate > restTemplates = Collections . emptyList (); // ... } 2\u3001\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u901a\u8fc7\u8c03\u7528 RestTemplateCustomizer \u6dfb\u52a0\u4e86\u4e00\u4e2a LoadBalancerInterceptor \u548c RetryLoadBalancerInterceptor \u62e6\u622a\u5668\u3002\u4ed6\u4eec\u90fd\u662f ClientHttpRequestInterceptor \u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c ClientHttpRequestInterceptor \u662f RestTemplate \u7684\u8bf7\u6c42\u62e6\u622a\u5668\u3002 1 2 3 4 5 6 7 8 9 10 11 @Bean public SmartInitializingSingleton loadBalancedRestTemplateInitializerDeprecated ( final ObjectProvider < List < RestTemplateCustomizer >> restTemplateCustomizers ) { return () -> restTemplateCustomizers . ifAvailable ( customizers -> { for ( RestTemplate restTemplate : LoadBalancerAutoConfiguration . this . restTemplates ) { for ( RestTemplateCustomizer customizer : customizers ) { customizer . customize ( restTemplate ); } } }); } \u62e6\u622a\u5668\u914d\u7f6e \u00b6 LoadBalancerInterceptor \u62e6\u622a\u5668 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // LoadBalancerAutoconfiguration.java @Configuration @ConditionalOnMissingClass ( \"org.springframework.retry.support.RetryTemplate\" ) static class LoadBalancerInterceptorConfig { @Bean public LoadBalancerInterceptor ribbonInterceptor ( LoadBalancerClient loadBalancerClient , LoadBalancerRequestFactory requestFactory ) { return new LoadBalancerInterceptor ( loadBalancerClient , requestFactory ); } @Bean @ConditionalOnMissingBean public RestTemplateCustomizer restTemplateCustomizer ( final LoadBalancerInterceptor loadBalancerInterceptor ) { return restTemplate -> { // \u6b64\u5904\u53ef\u89c1 LoadBalancerInterceptor \u662f ClientHttpRequestInterceptor \u7684\u5b9e\u73b0\u7c7b List < ClientHttpRequestInterceptor > list = new ArrayList <> ( restTemplate . getInterceptors ()); list . add ( loadBalancerInterceptor ); restTemplate . setInterceptors ( list ); }; } } RetryLoadBalancerInterceptor \u62e6\u622a\u5668 \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @Configuration @ConditionalOnClass ( RetryTemplate . class ) public static class RetryInterceptorAutoConfiguration { @Bean @ConditionalOnMissingBean public RetryLoadBalancerInterceptor ribbonInterceptor ( LoadBalancerClient loadBalancerClient , LoadBalancerRetryProperties properties , LoadBalancerRequestFactory requestFactory , LoadBalancedRetryFactory loadBalancedRetryFactory ) { return new RetryLoadBalancerInterceptor ( loadBalancerClient , properties , requestFactory , loadBalancedRetryFactory ); } @Bean @ConditionalOnMissingBean public RestTemplateCustomizer restTemplateCustomizer ( final RetryLoadBalancerInterceptor loadBalancerInterceptor ) { return restTemplate -> { // RetryLoadBalancerInterceptor \u4e5f\u662f ClientHttpRequestInterceptor \u7684\u5b9e\u73b0\u7c7b List < ClientHttpRequestInterceptor > list = new ArrayList <> ( restTemplate . getInterceptors ()); list . add ( loadBalancerInterceptor ); restTemplate . setInterceptors ( list ); }; } } \u7531\u6b64\u53ef\u89c1\uff0c\u5728\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5982\u679c\u73af\u5883\u4e2d\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u4f9d\u8d56\uff0c\u5219\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5bf9\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u914d\u7f6e\uff0c\u5b9e\u73b0\u7684\u65b9\u5f0f\u5219\u662f\u4e3a\u88ab @LoadBalanced \u6ce8\u89e3\u4fee\u9970\u7684 RestTemplate \u5bf9\u8c61\u6dfb\u52a0\u8d1f\u8f7d\u5747\u8861\u62e6\u622a\u5668\u3002 LoadBalancerClient \u6e90\u7801\u5206\u6790 \u00b6 \u9996\u5148\u6211\u4eec\u5148\u8ddf\u8fdb\u5230\u4e0a\u6587\u63d0\u5230\u7684\u62e6\u622a\u5668(LoadBalancerInterceptor)\u4e2d\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u62e6\u622a\u65b9\u6cd5\uff08intercept\uff09\u4e2d\uff0c\u6700\u7ec8\u662f\u8c03\u7528\u4e86 LoadBalancerClient \u7684 execute \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class LoadBalancerInterceptor implements ClientHttpRequestInterceptor { private LoadBalancerClient loadBalancer ; // ... @Override public ClientHttpResponse intercept ( final HttpRequest request , final byte [] body , final ClientHttpRequestExecution execution ) throws IOException { final URI originalUri = request . getURI (); String serviceName = originalUri . getHost (); Assert . state ( serviceName != null , \"Request URI does not contain a valid hostname: \" + originalUri ); return this . loadBalancer . execute ( serviceName , this . requestFactory . createRequest ( request , body , execution )); } } LoadBalancerClient \u63a5\u53e3\u4e2d\u6709\u4e09\u4e2a\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 public interface LoadBalancerClient extends ServiceInstanceChooser { < T > T execute ( String serviceId , LoadBalancerRequest < T > request ) throws IOException ; // \u4f7f\u7528 LoadBalancer \u7684 ServiceInstance\uff0c\u5bf9\u5176\u6267\u884c\u8bf7\u6c42\uff0c\u8fd4\u56de\u7ed3\u679c < T > T execute ( String serviceId , ServiceInstance serviceInstance , LoadBalancerRequest < T > request ) throws IOException ; // \u6784\u9020\u4e00\u4e2a\u5305\u542b\u4e3b\u673a\u548c\u7aef\u53e3\u7684\u771f\u6b63\u7684 url // http://serviceId/path/... --> http://host:port/path/... URI reconstructURI ( ServiceInstance instance , URI original ); } \u5176\u7236\u7c7b ServiceInstanceChooser \u4e2d\u7684\u65b9\u6cd5\uff1a 1 2 3 public interface ServiceInstanceChooser { ServiceInstance choose ( String serviceId ); // \u901a\u8fc7 serviceId \u9009\u62e9\u670d\u52a1 } \u4ece\u7ee7\u627f\u5173\u7cfb\u91cc\uff0cLoadBalancerClient \u7684\u5b9e\u73b0\u7c7b\u5c31\u662f RibbonLoadBalancerClient \u7c7b\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // RibbonLoadBalancerClient.java public < T > T execute ( String serviceId , LoadBalancerRequest < T > request , Object hint ) throws IOException { // \u901a\u8fc7\u670d\u52a1\u540d\u83b7\u53d6\u5230\u8d1f\u8f7d\u5747\u8861\u5668\uff0cILoadBalancer \u5b9e\u73b0\u7c7b\u4e3a DynamicServerListLoadBalancer\uff0c\u4e0b\u6587\u4f1a\u63d0\u5230 ILoadBalancer loadBalancer = getLoadBalancer ( serviceId ); // \u901a\u8fc7\u8c03\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u7684 chooseServer \u65b9\u6cd5\u83b7\u53d6\u5230\u670d\u52a1\u5668 Server server = getServer ( loadBalancer , hint ); if ( server == null ) { throw new IllegalStateException ( \"No instances available for \" + serviceId ); } RibbonServer ribbonServer = new RibbonServer ( serviceId , server , isSecure ( server , serviceId ), serverIntrospector ( serviceId ). getMetadata ( server )); return execute ( serviceId , ribbonServer , request ); } @Override public < T > T execute ( String serviceId , ServiceInstance serviceInstance , LoadBalancerRequest < T > request ) throws IOException { Server server = null ; if ( serviceInstance instanceof RibbonServer ) { server = (( RibbonServer ) serviceInstance ). getServer (); } if ( server == null ) { throw new IllegalStateException ( \"No instances available for \" + serviceId ); } RibbonLoadBalancerContext context = this . clientFactory . getLoadBalancerContext ( serviceId ); RibbonStatsRecorder statsRecorder = new RibbonStatsRecorder ( context , server ); try { T returnVal = request . apply ( serviceInstance ); statsRecorder . recordStats ( returnVal ); return returnVal ; } // catch IOException and rethrow so RestTemplate behaves correctly catch ( IOException ex ) { statsRecorder . recordStats ( ex ); throw ex ; } catch ( Exception ex ) { statsRecorder . recordStats ( ex ); ReflectionUtils . rethrowRuntimeException ( ex ); } return null ; } RibbonLoadBalancerClient \u5728 execute \u4e2d\u8c03\u7528 getServer \u65b9\u6cd5\u6765\u83b7\u53d6 Server \u5bf9\u8c61\uff0c\u8ddf\u8e2a\u6e90\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u662f\u901a\u8fc7 ILoadBalancer \u7684 chooseServer \u53bb\u9009\u62e9\u670d\u52a1\u5b9e\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // RibbonLoadBalancerClient.java protected Server getServer ( String serviceId ) { // \u901a\u8fc7 SpringClientFactory \u83b7\u53d6 LoadBalancer \u5bf9\u8c61 // \u5185\u90e8\u662f\u901a\u8fc7\u53cd\u5c04\uff0c\u7528\u6784\u9020\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 return getServer ( getLoadBalancer ( serviceId ), null ); } protected Server getServer ( ILoadBalancer loadBalancer ) { return getServer ( loadBalancer , null ); } protected Server getServer ( ILoadBalancer loadBalancer , Object hint ) { if ( loadBalancer == null ) { return null ; } // Use 'default' on a null hint, or just pass it on? // \u901a\u8fc7 ILoadBalancer \u7684 chooseServer \u65b9\u6cd5\u83b7\u53d6 Server \u5bf9\u8c61 return loadBalancer . chooseServer ( hint != null ? hint : \"default\" ); } 1 2 3 4 5 6 7 8 9 10 11 12 public interface ILoadBalancer { // \u6dfb\u52a0\u4e00\u4e2a Server \u96c6\u5408 public void addServers ( List < Server > newServers ); // \u6839\u636e key \u83b7\u53d6 Server public Server chooseServer ( Object key ); // \u6807\u8bb0\u67d0\u4e2a\u670d\u52a1\u4e0b\u7ebf public void markServerDown ( Server server ); // \u83b7\u53d6\u53ef\u7528\u7684 Server \u96c6\u5408 public List < Server > getReachableServers (); // \u83b7\u53d6\u6240\u6709\u7684 Server\u96c6\u5408 public List < Server > getAllServers (); } DynamicServerListLoadBalancer \u00b6 \u8ddf\u8e2a\u6e90\u7801\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230 ILoadBalancer \u7684\u7ee7\u627f\u7ed3\u6784\u5982\u4e0b\uff0cDynamicServerListLoadBalancer \u7ee7\u627f\u4e86 ILoadBalancer\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ddf\u8e2a\u8fd9\u4e2a\u7c7b\u6765\u641e\u6e05\u695a Ribbon \u662f\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u7684\u3002 \u6210\u5458\u4ecb\u7ecd \u00b6 \u67e5\u770b DynamicServerListLoadBalancer\uff0cBaseLoadBalancer\uff0cILoadBalancer \u8fd9\u4e09\u4e2a\u7c7b\uff0c\u914d\u7f6e\u4e86 IClientConfig\uff0cIRule\uff0cIPing\uff0cServerList\uff0cServerListFilter \u548c ILoadBalancer\uff0c\u5728 BaseLoadBalancer \u4e2d\uff0c\u9ed8\u8ba4\u8fdb\u884c\u4e86\u4ee5\u4e0b\u914d\u7f6e\uff1a IClientConfig ribbonClientConfig\uff1aDefaultClientConfigImpl \u914d\u7f6e\uff08\u7528\u4e8e\u5ba2\u6237\u7aef\u7684\u8d1f\u8f7d\u5747\u8861\u914d\u7f6e\uff09 IRule ribbonRule\uff1a\u9ed8\u8ba4\u8def\u7531\u7b56\u7565\u4e3a RoundRobinRule IPing ribbonPing\uff1aDummyPing ServerList ribbonServerList\uff1aConfigurationBasedServerList ServerListFilter ribbonServerListFilter\uff1aZonePreferenceServerListFilter ILoadBalancer ribbonLoadBalancer\uff1aZoneAwareLoadBalancer IRule \u00b6 IRule \u6709\u5f88\u591a\u9ed8\u8ba4\u7684\u5b9e\u73b0\u7c7b\uff0c\u90fd\u901a\u8fc7\u4e0d\u540c\u7684\u7b97\u6cd5\u6765\u5904\u7406\u8d1f\u8f7d\u5747\u8861\uff0cRibbon \u4e2d\u5b9e\u73b0\u7684 IRule \u53c8\u4ee5\u4e0b\u51e0\u79cd\uff1a IRule \u5b9e\u73b0\u7c7b BestAvailableRule\uff1a\u9009\u62e9\u6700\u5c0f\u8bf7\u6c42\u6570 ClientConfigEnabledRoundRobinRule\uff1a\u8f6e\u8be2 RandomRule\uff1a\u968f\u673a\u9009\u62e9 Server RoundRobinRule\uff1a\u8f6e\u8be2 WeightedResponseTimeRule\uff1a\u6839\u636e\u54cd\u5e94\u65f6\u95f4\u5206\u914d\u4e00\u4e2a\u6743\u91cd weight\uff0cweight\u8d8a\u4f4e\uff0c\u88ab\u9009\u62e9\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u4f4e ZoneAvoidanceRule\uff1a\u6839\u636e Server \u7684 Zone \u533a\u57df\u548c\u53ef\u7528\u6027\u8f6e\u8be2\u9009\u62e9 IPing \u00b6 IPing \u7684\u5b9e\u73b0\u7c7b\u53c8 PingUrl\uff0cPingConstant\uff0cNoOpPing\uff0cDummyPing \u548c NIWSDiscoveryPing\u3002IPing \u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a isAlive \u65b9\u6cd5\u3002 1 public boolean isAlive ( Server Server ); \u901a\u8fc7\u5411 Server \u53d1\u9001 ping \u4fe1\u53f7\uff0c\u6765\u5224\u65ad Server \u662f\u5426\u53ef\u7528 IPing \u5b9e\u73b0\u7c7b PingUrl \u771f\u5b9e\u7684\u53bbping \u67d0\u4e2aurl\uff0c\u5224\u65ad\u5176\u662f\u5426alive PingConstant \u56fa\u5b9a\u8fd4\u56de\u67d0\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u9ed8\u8ba4\u8fd4\u56detrue\uff0c\u5373\u53ef\u7528 NoOpPing \u4e0d\u53bbping,\u76f4\u63a5\u8fd4\u56detrue,\u5373\u53ef\u7528\u3002 DummyPing \u76f4\u63a5\u8fd4\u56detrue\uff0c\u5e76\u5b9e\u73b0\u4e86initWithNiwsConfig\u65b9\u6cd5\u3002 NIWSDiscoveryPing\uff0c\u6839\u636eDiscoveryEnabledServer\u7684InstanceInfo\u7684InstanceStatus\u53bb\u5224\u65ad\uff0c\u5982\u679c\u4e3aInstanceStatus.UP\uff0c\u5219\u4e3a\u53ef\u7528\uff0c\u5426\u5219\u4e0d\u53ef\u7528\u3002 ServerList \u00b6 ServerList \u662f\u5b9a\u4e49\u4e86\u83b7\u53d6\u6240\u6709\u7684 Server \u7684\u6ce8\u518c\u5217\u8868\u4fe1\u606f\u7684\u63a5\u53e3\u3002 1 2 3 4 public interface ServerList < T extends Server > { public List < T > getInitialListOfServers (); public List < T > getUpdatedListOfServers (); } \u5176\u5b9e\u73b0\u7c7b\u662f DiscoveryEnabledNIWSServerList \u3002 ServerListFilter \u00b6 ServerListFilter \u53ef\u6839\u636e\u914d\u7f6e\u8fc7\u6ee4\u6216\u8005\u6839\u636e\u7279\u6027\u52a8\u6001\u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684 Server \u5217\u8868\u3002\u8be5\u7c7b\u4e5f\u662f\u4e00\u4e2a\u63a5\u53e3 1 2 3 public interface ServerListFilter < T extends Server > { public List < T > getFilteredListOfServers ( List < T > servers ); } \u6e90\u7801\u5206\u6790 \u00b6 \u5728 SpringClientFactory \u4e2d\u83b7\u53d6 LoadBalancer \u7684\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u80fd\u770b\u5230\u83b7\u53d6\u5b9e\u4f8b\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u5b9e\u73b0\u7c7b\u7684\u542b\u6709 IClientConfig \u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\u6765\u6784\u9020\u5b9e\u4f8b\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // SpringClientFactory.java static < C > C instantiateWithConfig ( AnnotationConfigApplicationContext context , Class < C > clazz , IClientConfig config ) { C result = null ; try { // \u83b7\u53d6\u5230 ILoadBalancer \u5b9e\u73b0\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 Constructor < C > constructor = clazz . getConstructor ( IClientConfig . class ); // \u901a\u8fc7\u6784\u9020\u65b9\u6cd5\u6784\u9020\u5b9e\u4f8b\u5bf9\u8c61 result = constructor . newInstance ( config ); } catch ( Throwable e ) { // Ignored } // ... return result ; } DynamicServerListLoadBalancer \u6784\u9020\u65b9\u6cd5 \u00b6 DynamicServerListLoadBalancer \u4e2d\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5 - initWithNiwsConfig() \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // DynamicServerListLoadBalancer.java public DynamicServerListLoadBalancer ( IClientConfig clientConfig ) { initWithNiwsConfig ( clientConfig ); } public initWithNiwsConfig ( IClientConfig clientConfig ) { try { super . initWithNiwsConfig ( clientConfig ); // \u83b7\u53d6 ServerList \u7684 classname String niwsServerListClassname = clientConfig . getPropertyAsString ( CommonClientConfigKey . NIWSServerListClassName , DefaultClientConfigImpl . DEFAULT_SERVER_LIST_CLASS ); // \u6784\u9020 ServerList ServerList < T > niwsServerListImpl = ( ServerList < T > ) ClientFactory . instantiateInstanceWithClientConfig ( niwsServerListClassName , clientConfig ); // \u5982\u679c\u8be5 ServerList \u662f AbstractServerList \u7684\u5b50\u7c7b\uff0c\u5219\u83b7\u53d6\u5e76\u8bbe\u7f6e\u8fc7\u6ee4\u5668 if ( niwsServerListImpl instanceof AbstractServerList ) { AbstractServerListFilter < T > niwsFilter = (( AbstractServerList ) niwsServerListImpl ). getFilterImpl ( clientConfig ); niwsFilter . setLoadBalancerStats ( getLoadBalancerStats ()); this . filter = niwsFilter ; } // \u83b7\u53d6 ServerListUpdater \u7684 classname String serverListUpdaterClassName = clientConfig . getPropertyAsString ( CommonClientConfigKey . ServerListUpdaterClassname , DefaultClientConfigImpl . DEFAULT_SERVER_LIST_UPDATER_CLASS ); // \u901a\u8fc7 classname \u6784\u9020 ServerListUpdater \u8bbe\u7f6e\u5230 serverListUpdater \u6210\u5458\u5c5e\u6027\u4e2d this . serverListUpdater = ( ServerListUpdater ) ClientFactory . instantiateInstanceWithClientConfig ( serverListUpdaterClassName , clientConfig ); // \u6267\u884c\u5269\u4e0b\u7684\u521d\u59cb\u5316\u64cd\u4f5c restOfInit ( clientConfig ); } } restOfInit \u6267\u884c\u5269\u4e0b\u7684\u521d\u59cb\u5316\u64cd\u4f5c \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // DynamicServerListLoadBalancer.java void restOfInit ( IClientConfig clientConfig ) { boolean primeConnection = this . isEnablePrimingConnections (); // \u5c06\u8fd9\u4e2a\u5173\u95ed\u6765\u907f\u514d BaseLoadBalancer.setServerList() \u4e2d\u91cd\u590d\u7684\u5f02\u6b65\u542f\u52a8 this . setEnablePrimingConnections ( false ); enableAndInitLearnNewServersFeature (); updateListOfServers (); // \u7528\u6765\u83b7\u53d6\u6240\u6709\u7684 Server if ( primeConnection && this . getPrimeConnections () != null ) { this . getPrimeConnections (). primeConnections ( getReachableServers ()); } this . setEnablePrimingConnections ( primeConnection ); LOGGER . info ( \"DynamicServerListLoadBalancer for client {} initialized: {}\" , clientConfig . getClientName (), this . toString ()); } \u4e0a\u9762\u6e90\u7801\u4e2d\u7684 updateListOfServers() \u6700\u7ec8\u662f\u901a\u8fc7 serverListImpl.getUpdatedListOfServers() \u6765\u83b7\u53d6\u6240\u6709\u7684\u670d\u52a1\u5217\u8868\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // DynamicServerListLoadBalancer.java @VisibleForTesting public void updateListOfServers () { List < T > servers = new ArrayList < T > (); if ( serverListImpl != null ) { servers = serverListImpl . getUpdatedListOfServers (); LOGGER . debug ( \"List of Servers for {} obtained from Discovery client: {}\" , getIdentifier (), servers ); if ( filter != null ) { // \u5982\u679c\u914d\u7f6e\u4e86\u8fc7\u6ee4\u5668\uff0c\u5219\u5c06\u7b26\u5408\u6761\u4ef6\u7684 server \u7b5b\u9009\u51fa\u6765 servers = filter . getFilteredListOfServers ( servers ); LOGGER . debug ( \"Filtered List of Servers for {} obtained from Discovery client: {}\" , getIdentifier (), servers ); } } updateAllServerList ( servers ); } \u5176\u4e2d serverListImpl \u662f ServerList \u7684\u5b9e\u73b0\u7c7b - DiscoveryEnabledNIWSServerList\u3002\u800c getUpdatedListOfServers() \u7684\u5177\u4f53\u5b9e\u73b0\u4e3a\uff1a 1 2 3 4 5 6 7 8 // DiscoveryEnabledNIWSServerList.java @Override public List < DiscoveryEnabledServer > getInitialListOfServers () { return obtainServersViaDiscovery (); } public List < DiscoveryEnabledServer > getUpdatedListOfServers () { return obtainServersViaDiscovery (); } obtainServersViaDiscovery \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // DiscoveryEnabledNIWSServerList.java private List < DiscoveryEnabledServer > obtainServersViaDiscovery () { List < DiscoveryEnabledServer > serverList = new ArrayList < DiscoveryEnabledServer > (); if ( eurekaClientProvider == null || eurekaClientProvider . get () == null ) { logger . warn ( \"EurekaClient has not been initialized yet, returning an empty list\" ); return new ArrayList < DiscoveryEnabledServer > (); } EurekaClient eurekaClient = eurekaClientProvider . get (); if ( vipAddresses != null ){ for ( String vipAddress : vipAddresses . split ( \",\" )) { // if targetRegion is null, it will be interpreted as the same region of client List < InstanceInfo > listOfInstanceInfo = eurekaClient . getInstancesByVipAddress ( vipAddress , isSecure , targetRegion ); for ( InstanceInfo ii : listOfInstanceInfo ) { if ( ii . getStatus (). equals ( InstanceStatus . UP )) { if ( shouldUseOverridePort ){ if ( logger . isDebugEnabled ()){ logger . debug ( \"Overriding port on client name: \" + clientName + \" to \" + overridePort ); } // copy is necessary since the InstanceInfo builder just uses the original reference, // and we don't want to corrupt the global eureka copy of the object which may be // used by other clients in our system InstanceInfo copy = new InstanceInfo ( ii ); if ( isSecure ){ ii = new InstanceInfo . Builder ( copy ). setSecurePort ( overridePort ). build (); } else { ii = new InstanceInfo . Builder ( copy ). setPort ( overridePort ). build (); } } DiscoveryEnabledServer des = new DiscoveryEnabledServer ( ii , isSecure , shouldUseIpAddr ); des . setZone ( DiscoveryClient . getZone ( ii )); serverList . add ( des ); } } if ( serverList . size () > 0 && prioritizeVipAddressBasedServers ){ break ; // if the current vipAddress has servers, we dont use subsequent vipAddress based servers } } } return serverList ; } \u770b\u5230\u8fd9\u91cc\uff0c\u53ef\u4ee5\u77e5\u9053\u8d1f\u8f7d\u5747\u8861\u5668 Ribbon \u662f\u901a\u8fc7 Eureka Client \u6765\u83b7\u53d6\u6ce8\u518c\u5217\u8868\u4fe1\u606f\uff0c\u7136\u540e\u901a\u8fc7\u914d\u7f6e\u7684\u8def\u7531\u89c4\u5219 IRule \u6765\u8def\u7531\u3002\u4f46\u662f\u5b83\u4ece Eureka Client \u83b7\u53d6\u6ce8\u518c\u4fe1\u606f\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u4e45\u5462\uff1f \u5b9a\u65f6\u4efb\u52a1\u66f4\u65b0\u670d\u52a1\u5668\u5217\u8868\u548c\u72b6\u6001 \u00b6 \u5728\u6784\u9020 DynamicServerListLoadBalancer \u7684\u6784\u9020\u65b9\u6cd5\u4e2d\u7684\u7b2c\u4e00\u884c\u662f\u8c03\u7528\u7236\u7c7b\u4e2d\u7684 initWithNiwsConfig \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 // DynamicServerListLoadBalancer.java public initWithNiwsConfig ( IClientConfig clientConfig ) { try { super . initWithNiwsConfig ( clientConfig ); } // ... } \u4e8e\u662f\u6211\u4eec\u8ddf\u8e2a\u5230 BaseLoadBalancer \u7684 initWithNiwsConfig \u65b9\u6cd5\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // BaseLoadBalancer.java @Override public void initWithNiwsConfig ( IClientConfig clientConfig ) { try { initWithNiwsConfig ( clientConfig , ClientFactory :: instantiateInstanceWithClientConfig ); } catch ( Exception e ) { throw new RuntimeException ( \"Error initializing load balancer\" , e ); } } @Override public void initWithNiwsConfig ( IClientConfig clientConfig , Factory factory ) { S // ... try { // ... initWithConfig ( clientConfig , rule , ping , stats ); } catch ( Exception e ) { throw new RuntimeException ( \"Error initializing load balancer\" , e ); } } void initWithConfig ( IClientConfig clientConfig , IRule rule , IPing ping , LoadBalancerStats stats ) { // ... setPingInterval ( pingIntervalTime ); setMaxTotalPingTime ( maxTotalPingTime ); // cross associate with each other // i.e. Rule,Ping meet your container LB // LB, these are your Ping and Rule guys ... setRule ( rule ); setPing ( ping ); // ... } \u4ee5\u4e0a\u53ea\u4fdd\u7559\u4e86\u5173\u952e\u4ee3\u7801\u3002\u8c03\u7528\u5230 initWithConfig \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u6267\u884c setPingInterval(pingIntervalTime) \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 public void setPingInterval ( int pingIntervalSeconds ) { if ( pingIntervalSeconds < 1 ) { return ; } this . pingIntervalSeconds = pingIntervalSeconds ; if ( logger . isDebugEnabled ()) { logger . debug ( \"LoadBalancer [{}]: pingIntervalSeconds set to {}\" , name , this . pingIntervalSeconds ); } setupPingTask (); // since ping data changed } \u5176\u4e2d\u5f00\u542f\u4e86\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff1a setupPingTask() \u3002\u5728\u8be5\u65b9\u6cd5\u5185\u90e8\u4f7f\u7528 ShutdownEnabledTimer \u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5e76\u4e14\u8bbe\u7f6e\u6bcf10\u79d2\u8c03\u7528 PingTask \u4efb\u52a1\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // BaseLoadBalancer.java // \u5b9a\u65f6\u4efb\u52a1 void setupPingTask () { if ( canSkipPing ()) { return ; } if ( lbTimer != null ) { lbTimer . cancel (); } lbTimer = new ShutdownEnabledTimer ( \"NFLoadBalancer-PingTimer-\" + name , true ); lbTimer . schedule ( new PingTask (), 0 , pingIntervalSeconds * 1000 ); // \u9ed8\u8ba410\u79d2\u6267\u884c\u4e00\u6b21 forceQuickPing (); } PingTask \u662f BaseLoadBalancer \u7684\u5185\u90e8\u7c7b\uff0c\u6839\u636e IPingStrategy \u7b56\u7565\u6765\u53d1\u9001 ping \u8bf7\u6c42\u83b7\u53d6\u548c\u66f4\u65b0\u670d\u52a1\u5668\u5217\u8868\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f SerialPingStrategy\u3002\u5728 PingTask \u7684 run \u65b9\u6cd5\u4e2d\uff0c\u6267\u884c\u4e86\u53e6\u4e00\u4e2a\u5185\u90e8\u7c7b Pinger \u7684 runPinger \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // BaseLoadBalancer.java // \u5185\u90e8\u7c7b PingTask class PingTask extends TimerTask { public void run () { try { new Pinger ( pingStrategy ). runPinger (); } catch ( Exception e ) { logger . error ( \"LoadBalancer [{}]: Error pinging\" , name , e ); } } } // \u5185\u90e8\u7c7b Pinger class Pinger { private final IPingStrategy pingerStrategy ; public Pinger ( IPingStrategy pingerStrategy ) { this . pingerStrategy = pingerStrategy ; } public void runPinger () throws Exception { // \u7528 CAS \u8bbe\u7f6e pingInProgress \u4e3a true\uff0c\u4ee3\u8868\u6b63\u5728\u6267\u884c Ping \u4efb\u52a1\u3002 // \u5982\u679c\u8bbe\u7f6e\u5931\u8d25\uff0c\u5219\u8868\u793a\u6709\u7ebf\u7a0b\u6b63\u5728\u6267\u884c Ping \u4efb\u52a1\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u6267\u884c if ( ! pingInProgress . compareAndSet ( false , true )) { return ; // Ping in progress - nothing to do } // we are \"in\" - we get to Ping Server [] allServers = null ; boolean [] results = null ; Lock allLock = null ; Lock upLock = null ; try { /* * The readLock should be free unless an addServer operation is * going on... */ // \u8bfb\u9501\u5e94\u8be5\u662f\u7a7a\u95f2\u72b6\u6001\uff0c\u9664\u4e86 addServer \u64cd\u4f5c\u6b63\u5728\u6267\u884c\u3002 allLock = allServerLock . readLock (); // \u52a0\u8bfb\u9501\uff0c\u907f\u514d\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539 serverList allLock . lock (); allServers = allServerList . toArray ( new Server [ allServerList . size () ] ); // \u89e3\u9501 allLock . unlock (); int numCandidates = allServers . length ; // \u5411\u6bcf\u4e2a\u670d\u52a1\u5668\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u503c\u7684\u7ed3\u679c\u96c6\uff08\u670d\u52a1\u5668\u662f\u5426\u5b58\u6d3b - \u80fd\u5426\u8bf7\u6c42\u6210\u529f\uff09 results = pingerStrategy . pingServers ( ping , allServers ); final List < Server > newUpList = new ArrayList < Server > (); final List < Server > changedServers = new ArrayList < Server > (); // \u904d\u5386\u5f53\u524d\u6240\u6709Server for ( int i = 0 ; i < numCandidates ; i ++ ) { // \u83b7\u53d6\u7b2c i \u4e2a Server \u662f\u5f53\u524d\u5426\u4e3a\u5b58\u6d3b\u72b6\u6001\uff08UP\uff09 boolean isAlive = results [ i ] ; Server svr = allServers [ i ] ; // \u83b7\u53d6 ping \u4e4b\u524d\u7684\u670d\u52a1\u5668\u72b6\u6001 boolean oldIsAlive = svr . isAlive (); // \u5c06\u8be5\u670d\u52a1\u5668\u72b6\u6001\u6539\u4e3a\u5f53\u524d\u83b7\u53d6\u5230\u7684\u72b6\u6001 svr . setAlive ( isAlive ); if ( oldIsAlive != isAlive ) { // \u5982\u679c\u4e4b\u524d\u72b6\u6001\u4e0e\u5f53\u524d\u83b7\u53d6\u7684\u72b6\u6001\u4e0d\u4e00\u81f4 // \u52a0\u5165\u5230\u72b6\u6001\u66f4\u6539\u8fc7\u7684\u670d\u52a1\u5668\u5217\u8868\u4e2d changedServers . add ( svr ); // \u8f93\u51fa\u65e5\u5fd7\uff1a\u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001\u4fee\u6539 logger . debug ( \"LoadBalancer [{}]: Server [{}] status changed to {}\" , name , svr . getId (), ( isAlive ? \"ALIVE\" : \"DEAD\" )); } if ( isAlive ) { // \u5982\u679c\u83b7\u53d6\u5230\u7684\u5f53\u524d\u72b6\u6001\u4e3a true\uff08\u5b58\u6d3bUP\u72b6\u6001\uff09 // \u5219\u5c06\u8be5\u670d\u52a1\u5668\u52a0\u5165\u5230 newUpList \u4e2d\uff0c\u7528\u4e8e\u540e\u9762\u66f4\u65b0\u81f3\u5b58\u6d3b\u670d\u52a1\u5668\u5217\u8868 newUpList . add ( svr ); } } // \u66f4\u65b0\u5b58\u6d3b\u670d\u52a1\u5668\u5217\u8868\uff0c\u9700\u8981\u52a0\u5199\u9501\uff0c\u907f\u514d\u5e76\u53d1\u95ee\u9898 upLock = upServerLock . writeLock (); upLock . lock (); upServerList = newUpList ; upLock . unlock (); // \u901a\u77e5\u670d\u52a1\u5668\u72b6\u6001\u4fee\u6539 notifyServerStatusChangeListener ( changedServers ); } finally { pingInProgress . set ( false ); } } } \u8be5\u5b9a\u65f6\u4efb\u52a1\u7684\u5927\u81f4\u6d41\u7a0b\u4e3a\uff1a 1\u3001\u9996\u5148\u5c06\u7528 CAS \u6765\u4fee\u6539 pingInProgress \uff08AtomicBoolean \u5bf9\u8c61\uff09\uff0c\u5982\u679c\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u5219\u8868\u793a\u5f53\u524d\u6709\u5176\u4ed6\u7ebf\u7a0b\u6b63\u5728\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u5f53\u524d\u64cd\u4f5c\u53ef\u4ee5\u4e0d\u518d\u6267\u884c\u3002 2\u3001\u52a0\u8bfb\u9501\u83b7\u53d6\u5f53\u524d\u670d\u52a1\u5217\u8868\u3002 3\u3001\u901a\u8fc7 IPingStrategy \u5411\u6bcf\u4e2a\u670d\u52a1\u5668\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u503c\u7684\u7ed3\u679c\u96c6\u3002 3\u3001\u904d\u5386\u4e4b\u524d\u83b7\u53d6\u5230\u7684 Server List\uff0c\u5224\u65ad\u670d\u52a1\u72b6\u6001\u662f\u5426\u6709\u53d8\u5316\uff0c\u5e76\u66f4\u65b0\u670d\u52a1\u5217\u8868\u3002\uff08\u5176\u4e2d\u72b6\u6001\u66f4\u6539\u7684\u670d\u52a1\u5668\u5c06\u4f1a\u52a0\u5165\u5230 changedServers \u5217\u8868\u4e2d\uff0cping \u8bf7\u6c42\u540e\u4f9d\u7136\u5b58\u6d3b\u7684\u670d\u52a1\u4f1a\u52a0\u5165\u5230 newUpList \u4e2d\uff09 4\u3001\u6700\u540e\u52a0\u5199\u9501\u66f4\u65b0 UP \u72b6\u6001\u7684\u670d\u52a1\u5668\u5217\u8868\uff0c\u5e76 \u901a\u77e5\u670d\u52a1\u72b6\u6001\u6539\u53d8 \u3002(\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u6b64\u5904\u53ef\u4ee5\u67e5\u770b\u4e00\u4e0bServerStatusChangeListener \u7684\u5b9e\u73b0\u7c7b\u662f\u54ea\u4e2a\uff0c\u518d\u770b\u5177\u4f53\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c) 5\u3001\u5168\u90e8\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c06 pingInProgress \u6539\u4e3a false\u3002 \u603b\u7ed3 \u00b6 \u7531\u6b64\u53ef\u89c1\uff0cRibbon\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 LoadBalancerClient \u6765\u5b9e\u73b0\u7684\uff0c\u800c Load\u2019BalancerClient \u53c8\u5c06\u5177\u4f53\u5b9e\u73b0\u4ea4\u7ed9\u4e86 ILoadBalancer \u6765\u5904\u7406\uff0cILoadBalancer \u901a\u8fc7\u914d\u7f6e IRule\u3001IPing \u7b49\u4fe1\u606f\uff0c\u5411 Eureka \u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u5217\u8868\uff0c\u5e76\u4e14\u5728\u521d\u59cb\u5316\u65f6\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c10s \u4e00\u6b21\u5411 EurekaClient \u53d1\u9001 ping \u8bf7\u6c42\uff0c\u6765\u5224\u65ad\u670d\u52a1\u7684\u53ef\u7528\u6027\uff0c\u5982\u679c\u670d\u52a1\u7684\u53ef\u7528\u6027\u53d1\u751f\u6539\u53d8\u6216\u8005\u670d\u52a1\u6570\u91cf\u4e0e\u4e4b\u524d\u7684\u4e0d\u4e00\u81f4\uff0c\u5219\u66f4\u65b0\u5f53\u524d\u670d\u52a1\u5668\u5217\u8868\u6216\u91cd\u65b0\u62c9\u53d6\u3002\u6700\u540e ILoadBalancer \u83b7\u53d6\u5230\u8fd9\u4e9b\u670d\u52a1\u5217\u8868\u4e4b\u540e\uff0c\u4fbf\u53ef\u4ee5\u6839\u636e IRule \u6765\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002 \u800c RestTemplate \u88ab @LoadBalanced \u6ce8\u89e3\u540e\uff0c\u80fd\u591f\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u7ed9 RestTemplate \u6dfb\u52a0\u62e6\u622a\u5668\uff0c\u5728\u8bf7\u6c42\u524d\u901a\u8fc7\u62e6\u622a\u5668\uff08\u8d1f\u8f7d\u5747\u8861\uff09\u83b7\u53d6\u5230\u771f\u6b63\u7684\u8bf7\u6c42\u5730\u5740\uff0c\u6700\u540e\u8fdb\u884c\u670d\u52a1\u8c03\u7528\u3002 Ref \u00b6 Ribbon \u6e90\u7801 Spring Cloud Commons \u6e90\u7801 Spring Cloud Netflix \u6e90\u7801 Spring Cloud Netflix Ribbon \u5b98\u65b9\u6587\u6863 Spring Cloud Ribbon\u8e29\u5751\u8bb0\u5f55\u53ca\u539f\u7406\u89e3\u6790 Ribbon\u539f\u7406\u5206\u6790 - Spring For All","title":"Spring Cloud Ribbon"},{"location":"java/spring-cloud-ribbon/#_1","text":"spring-cloud-commons \u5305\u4e2d\u5b9a\u4e49\u4e86 LoadBalancerClient \u63a5\u53e3\uff0c\u5b83\u662f Ribbon \u4e2d\u4e00\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u7ec4\u4ef6\u3002\u7ee7\u627f\u7ed3\u6784\u5982\u4e0b\uff1a","title":"\u8d1f\u8f7d\u5747\u8861\u521d\u59cb\u5316"},{"location":"java/spring-cloud-ribbon/#loadbalancerautoconfiguration","text":"\u800c\u5728 spring-cloud-commons \u4e2d\u76f8\u540c\u7684\u5305\u4e0b\u9762\uff0c\u53ef\u4ee5\u770b\u5230 LoadBalancerAutoConfiguration\uff0c\u770b\u7c7b\u540d\u5c31\u80fd\u770b\u51fa\u6765\u8fd9\u662f\u4e00\u4e2a\u81ea\u52a8\u914d\u7f6e\u7c7b\uff0c\u4f1a\u5728\u542f\u52a8\u65f6\u81ea\u52a8\u52a0\u8f7d\u5176\u4e2d\u7684\u914d\u7f6e\uff1a LoadBalancerAutoConfiguration 1 2 3 4 5 6 7 @Configuration @ConditionalOnClass ( RestTemplate . class ) @ConditionalOnBean ( LoadBalancerClient . class ) @EnableConfigurationProperties ( LoadBalancerRetryProperties . class ) public class LoadBalancerAutoConfiguration { // \u7701\u7565\u4ee3\u7801\u3002\u3002\u3002\u4e3b\u8981\u662f\u5bf9 LoadBalancerInterceptor \u548c RetryLoadBalancerInterCeptor \u7684\u7b49\u8fdb\u884c\u914d\u7f6e\uff0c\u8fd9\u91cc\u6211\u4eec\u770b\u7c7b\u4e0a\u7684\u6ce8\u89e3@ConditionalOnBean\u548c@ConditionalOnClass } \u53ef\u4ee5\u770b\u5230\u8be5\u81ea\u52a8\u914d\u7f6e\u7c7b\u4e0a\u6709\u6ce8\u89e3 @ConditionalOnBean(LoadBalancerClient.class) \u548c @ConditionalOnClass(RestTemplate.class) \uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u7c7b\u7684\u751f\u6548\u6761\u4ef6\u662f\uff1a 1\u3001\u5f53\u524d\u5de5\u7a0b\u4e2d\u8981\u6709 RestTemplate \u7c7b 2\u3001\u5728 Spring \u7684 IOC \u5bb9\u5668\u4e2d\u5fc5\u987b\u8981\u6709 LoadBalancerClient \u7684\u5b9e\u73b0 Bean \u7136\u540e\u6211\u4eec\u770b\u5230 org.springframework.cloud.netflix.ribbon \u8fd9\u4e2a\u5305\uff0c\u5176\u4e2d\u6709\u4e00\u4e2a RibbonAutoConfiguration.java \u7c7b\uff08\u7ee7\u627f\u4e8e LoadBalancerClient\uff09\u3002\u67e5\u770b\u5230\u5176\u4e2d\u914d\u7f6e\u7684 Bean\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u53ea\u8981\u5f15\u5165\u4e86\u8fd9\u4e2a\u5305\uff0c\u5c31\u4e00\u5b9a\u4f1a\u521b\u5efa\u4e00\u4e2a RibbonLoadBalancerClient \u5b9e\u4f8b\u5bf9\u8c61\u52a0\u5165\u5230 IOC \u5bb9\u5668\u4e2d\uff0c\u5e76\u4e14\u89e6\u53d1 LoadBalancerAutoConfiguration \u914d\u7f6e\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 @Configuration @Conditional ( RibbonAutoConfiguration . RibbonClassesConditions . class ) @RibbonClients @AutoConfigureAfter ( name = \"org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration\" ) @AutoConfigureBefore ({ LoadBalancerAutoConfiguration . class , AsyncLoadBalancerAutoConfiguration . class }) @EnableConfigurationProperties ({ RibbonEagerLoadProperties . class , ServerIntrospectorProperties . class }) public class RibbonAutoConfiguration { // \u7701\u7565\u3002\u3002\u3002 @Bean @ConditionalOnMissingBean ( LoadBalancerClient . class ) public LoadBalancerClient loadBalancerClient () { return new RibbonLoadBalancerClient ( springClientFactory ()); } // \u7701\u7565\u3002\u3002\u3002 } \u6211\u4eec\u518d\u770b\u56de LoadBalancerAutoConfiguration\uff0c\u8be5\u81ea\u52a8\u5316\u914d\u7f6e\u7c7b\uff0c\u4e3b\u8981\u505a\u4e86\u51e0\u4e2a\u914d\u7f6e\uff1a 1\u3001\u7ef4\u62a4\u4e86\u4e00\u4e2a\u88ab @LoadBalanced \u6ce8\u89e3\u4fee\u9970\u7684 RestTemplate \u5bf9\u8c61\u5217\u8868 1 2 3 4 5 6 7 8 9 10 11 @Configuration @ConditionalOnClass ( RestTemplate . class ) @ConditionalOnBean ( LoadBalancerClient . class ) @EnableConfigurationProperties ( LoadBalancerRetryProperties . class ) public class LoadBalancerAutoConfiguration { @LoadBalanced @Autowired ( required = false ) private List < RestTemplate > restTemplates = Collections . emptyList (); // ... } 2\u3001\u4e3a\u6bcf\u4e2a\u5bf9\u8c61\u901a\u8fc7\u8c03\u7528 RestTemplateCustomizer \u6dfb\u52a0\u4e86\u4e00\u4e2a LoadBalancerInterceptor \u548c RetryLoadBalancerInterceptor \u62e6\u622a\u5668\u3002\u4ed6\u4eec\u90fd\u662f ClientHttpRequestInterceptor \u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\uff0c ClientHttpRequestInterceptor \u662f RestTemplate \u7684\u8bf7\u6c42\u62e6\u622a\u5668\u3002 1 2 3 4 5 6 7 8 9 10 11 @Bean public SmartInitializingSingleton loadBalancedRestTemplateInitializerDeprecated ( final ObjectProvider < List < RestTemplateCustomizer >> restTemplateCustomizers ) { return () -> restTemplateCustomizers . ifAvailable ( customizers -> { for ( RestTemplate restTemplate : LoadBalancerAutoConfiguration . this . restTemplates ) { for ( RestTemplateCustomizer customizer : customizers ) { customizer . customize ( restTemplate ); } } }); }","title":"LoadBalancerAutoConfiguration"},{"location":"java/spring-cloud-ribbon/#_2","text":"","title":"\u62e6\u622a\u5668\u914d\u7f6e"},{"location":"java/spring-cloud-ribbon/#loadbalancerinterceptor","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 // LoadBalancerAutoconfiguration.java @Configuration @ConditionalOnMissingClass ( \"org.springframework.retry.support.RetryTemplate\" ) static class LoadBalancerInterceptorConfig { @Bean public LoadBalancerInterceptor ribbonInterceptor ( LoadBalancerClient loadBalancerClient , LoadBalancerRequestFactory requestFactory ) { return new LoadBalancerInterceptor ( loadBalancerClient , requestFactory ); } @Bean @ConditionalOnMissingBean public RestTemplateCustomizer restTemplateCustomizer ( final LoadBalancerInterceptor loadBalancerInterceptor ) { return restTemplate -> { // \u6b64\u5904\u53ef\u89c1 LoadBalancerInterceptor \u662f ClientHttpRequestInterceptor \u7684\u5b9e\u73b0\u7c7b List < ClientHttpRequestInterceptor > list = new ArrayList <> ( restTemplate . getInterceptors ()); list . add ( loadBalancerInterceptor ); restTemplate . setInterceptors ( list ); }; } }","title":"LoadBalancerInterceptor \u62e6\u622a\u5668"},{"location":"java/spring-cloud-ribbon/#retryloadbalancerinterceptor","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 @Configuration @ConditionalOnClass ( RetryTemplate . class ) public static class RetryInterceptorAutoConfiguration { @Bean @ConditionalOnMissingBean public RetryLoadBalancerInterceptor ribbonInterceptor ( LoadBalancerClient loadBalancerClient , LoadBalancerRetryProperties properties , LoadBalancerRequestFactory requestFactory , LoadBalancedRetryFactory loadBalancedRetryFactory ) { return new RetryLoadBalancerInterceptor ( loadBalancerClient , properties , requestFactory , loadBalancedRetryFactory ); } @Bean @ConditionalOnMissingBean public RestTemplateCustomizer restTemplateCustomizer ( final RetryLoadBalancerInterceptor loadBalancerInterceptor ) { return restTemplate -> { // RetryLoadBalancerInterceptor \u4e5f\u662f ClientHttpRequestInterceptor \u7684\u5b9e\u73b0\u7c7b List < ClientHttpRequestInterceptor > list = new ArrayList <> ( restTemplate . getInterceptors ()); list . add ( loadBalancerInterceptor ); restTemplate . setInterceptors ( list ); }; } } \u7531\u6b64\u53ef\u89c1\uff0c\u5728\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5982\u679c\u73af\u5883\u4e2d\u5f15\u5165\u4e86\u76f8\u5e94\u7684\u4f9d\u8d56\uff0c\u5219\u4f1a\u5728\u521d\u59cb\u5316\u65f6\u5bf9\u8d1f\u8f7d\u5747\u8861\u5668\u8fdb\u884c\u914d\u7f6e\uff0c\u5b9e\u73b0\u7684\u65b9\u5f0f\u5219\u662f\u4e3a\u88ab @LoadBalanced \u6ce8\u89e3\u4fee\u9970\u7684 RestTemplate \u5bf9\u8c61\u6dfb\u52a0\u8d1f\u8f7d\u5747\u8861\u62e6\u622a\u5668\u3002","title":"RetryLoadBalancerInterceptor \u62e6\u622a\u5668"},{"location":"java/spring-cloud-ribbon/#loadbalancerclient","text":"\u9996\u5148\u6211\u4eec\u5148\u8ddf\u8fdb\u5230\u4e0a\u6587\u63d0\u5230\u7684\u62e6\u622a\u5668(LoadBalancerInterceptor)\u4e2d\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u62e6\u622a\u65b9\u6cd5\uff08intercept\uff09\u4e2d\uff0c\u6700\u7ec8\u662f\u8c03\u7528\u4e86 LoadBalancerClient \u7684 execute \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 public class LoadBalancerInterceptor implements ClientHttpRequestInterceptor { private LoadBalancerClient loadBalancer ; // ... @Override public ClientHttpResponse intercept ( final HttpRequest request , final byte [] body , final ClientHttpRequestExecution execution ) throws IOException { final URI originalUri = request . getURI (); String serviceName = originalUri . getHost (); Assert . state ( serviceName != null , \"Request URI does not contain a valid hostname: \" + originalUri ); return this . loadBalancer . execute ( serviceName , this . requestFactory . createRequest ( request , body , execution )); } } LoadBalancerClient \u63a5\u53e3\u4e2d\u6709\u4e09\u4e2a\u65b9\u6cd5\uff1a 1 2 3 4 5 6 7 8 public interface LoadBalancerClient extends ServiceInstanceChooser { < T > T execute ( String serviceId , LoadBalancerRequest < T > request ) throws IOException ; // \u4f7f\u7528 LoadBalancer \u7684 ServiceInstance\uff0c\u5bf9\u5176\u6267\u884c\u8bf7\u6c42\uff0c\u8fd4\u56de\u7ed3\u679c < T > T execute ( String serviceId , ServiceInstance serviceInstance , LoadBalancerRequest < T > request ) throws IOException ; // \u6784\u9020\u4e00\u4e2a\u5305\u542b\u4e3b\u673a\u548c\u7aef\u53e3\u7684\u771f\u6b63\u7684 url // http://serviceId/path/... --> http://host:port/path/... URI reconstructURI ( ServiceInstance instance , URI original ); } \u5176\u7236\u7c7b ServiceInstanceChooser \u4e2d\u7684\u65b9\u6cd5\uff1a 1 2 3 public interface ServiceInstanceChooser { ServiceInstance choose ( String serviceId ); // \u901a\u8fc7 serviceId \u9009\u62e9\u670d\u52a1 } \u4ece\u7ee7\u627f\u5173\u7cfb\u91cc\uff0cLoadBalancerClient \u7684\u5b9e\u73b0\u7c7b\u5c31\u662f RibbonLoadBalancerClient \u7c7b\u4e86\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // RibbonLoadBalancerClient.java public < T > T execute ( String serviceId , LoadBalancerRequest < T > request , Object hint ) throws IOException { // \u901a\u8fc7\u670d\u52a1\u540d\u83b7\u53d6\u5230\u8d1f\u8f7d\u5747\u8861\u5668\uff0cILoadBalancer \u5b9e\u73b0\u7c7b\u4e3a DynamicServerListLoadBalancer\uff0c\u4e0b\u6587\u4f1a\u63d0\u5230 ILoadBalancer loadBalancer = getLoadBalancer ( serviceId ); // \u901a\u8fc7\u8c03\u7528\u8d1f\u8f7d\u5747\u8861\u5668\u7684 chooseServer \u65b9\u6cd5\u83b7\u53d6\u5230\u670d\u52a1\u5668 Server server = getServer ( loadBalancer , hint ); if ( server == null ) { throw new IllegalStateException ( \"No instances available for \" + serviceId ); } RibbonServer ribbonServer = new RibbonServer ( serviceId , server , isSecure ( server , serviceId ), serverIntrospector ( serviceId ). getMetadata ( server )); return execute ( serviceId , ribbonServer , request ); } @Override public < T > T execute ( String serviceId , ServiceInstance serviceInstance , LoadBalancerRequest < T > request ) throws IOException { Server server = null ; if ( serviceInstance instanceof RibbonServer ) { server = (( RibbonServer ) serviceInstance ). getServer (); } if ( server == null ) { throw new IllegalStateException ( \"No instances available for \" + serviceId ); } RibbonLoadBalancerContext context = this . clientFactory . getLoadBalancerContext ( serviceId ); RibbonStatsRecorder statsRecorder = new RibbonStatsRecorder ( context , server ); try { T returnVal = request . apply ( serviceInstance ); statsRecorder . recordStats ( returnVal ); return returnVal ; } // catch IOException and rethrow so RestTemplate behaves correctly catch ( IOException ex ) { statsRecorder . recordStats ( ex ); throw ex ; } catch ( Exception ex ) { statsRecorder . recordStats ( ex ); ReflectionUtils . rethrowRuntimeException ( ex ); } return null ; } RibbonLoadBalancerClient \u5728 execute \u4e2d\u8c03\u7528 getServer \u65b9\u6cd5\u6765\u83b7\u53d6 Server \u5bf9\u8c61\uff0c\u8ddf\u8e2a\u6e90\u7801\u53ef\u4ee5\u770b\u5230\uff0c\u6700\u7ec8\u662f\u901a\u8fc7 ILoadBalancer \u7684 chooseServer \u53bb\u9009\u62e9\u670d\u52a1\u5b9e\u4f8b\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 // RibbonLoadBalancerClient.java protected Server getServer ( String serviceId ) { // \u901a\u8fc7 SpringClientFactory \u83b7\u53d6 LoadBalancer \u5bf9\u8c61 // \u5185\u90e8\u662f\u901a\u8fc7\u53cd\u5c04\uff0c\u7528\u6784\u9020\u65b9\u6cd5\u6784\u9020\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61 return getServer ( getLoadBalancer ( serviceId ), null ); } protected Server getServer ( ILoadBalancer loadBalancer ) { return getServer ( loadBalancer , null ); } protected Server getServer ( ILoadBalancer loadBalancer , Object hint ) { if ( loadBalancer == null ) { return null ; } // Use 'default' on a null hint, or just pass it on? // \u901a\u8fc7 ILoadBalancer \u7684 chooseServer \u65b9\u6cd5\u83b7\u53d6 Server \u5bf9\u8c61 return loadBalancer . chooseServer ( hint != null ? hint : \"default\" ); } 1 2 3 4 5 6 7 8 9 10 11 12 public interface ILoadBalancer { // \u6dfb\u52a0\u4e00\u4e2a Server \u96c6\u5408 public void addServers ( List < Server > newServers ); // \u6839\u636e key \u83b7\u53d6 Server public Server chooseServer ( Object key ); // \u6807\u8bb0\u67d0\u4e2a\u670d\u52a1\u4e0b\u7ebf public void markServerDown ( Server server ); // \u83b7\u53d6\u53ef\u7528\u7684 Server \u96c6\u5408 public List < Server > getReachableServers (); // \u83b7\u53d6\u6240\u6709\u7684 Server\u96c6\u5408 public List < Server > getAllServers (); }","title":"LoadBalancerClient \u6e90\u7801\u5206\u6790"},{"location":"java/spring-cloud-ribbon/#dynamicserverlistloadbalancer","text":"\u8ddf\u8e2a\u6e90\u7801\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u627e\u5230 ILoadBalancer \u7684\u7ee7\u627f\u7ed3\u6784\u5982\u4e0b\uff0cDynamicServerListLoadBalancer \u7ee7\u627f\u4e86 ILoadBalancer\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ddf\u8e2a\u8fd9\u4e2a\u7c7b\u6765\u641e\u6e05\u695a Ribbon \u662f\u5982\u4f55\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u7684\u3002","title":"DynamicServerListLoadBalancer"},{"location":"java/spring-cloud-ribbon/#_3","text":"\u67e5\u770b DynamicServerListLoadBalancer\uff0cBaseLoadBalancer\uff0cILoadBalancer \u8fd9\u4e09\u4e2a\u7c7b\uff0c\u914d\u7f6e\u4e86 IClientConfig\uff0cIRule\uff0cIPing\uff0cServerList\uff0cServerListFilter \u548c ILoadBalancer\uff0c\u5728 BaseLoadBalancer \u4e2d\uff0c\u9ed8\u8ba4\u8fdb\u884c\u4e86\u4ee5\u4e0b\u914d\u7f6e\uff1a IClientConfig ribbonClientConfig\uff1aDefaultClientConfigImpl \u914d\u7f6e\uff08\u7528\u4e8e\u5ba2\u6237\u7aef\u7684\u8d1f\u8f7d\u5747\u8861\u914d\u7f6e\uff09 IRule ribbonRule\uff1a\u9ed8\u8ba4\u8def\u7531\u7b56\u7565\u4e3a RoundRobinRule IPing ribbonPing\uff1aDummyPing ServerList ribbonServerList\uff1aConfigurationBasedServerList ServerListFilter ribbonServerListFilter\uff1aZonePreferenceServerListFilter ILoadBalancer ribbonLoadBalancer\uff1aZoneAwareLoadBalancer","title":"\u6210\u5458\u4ecb\u7ecd"},{"location":"java/spring-cloud-ribbon/#irule","text":"IRule \u6709\u5f88\u591a\u9ed8\u8ba4\u7684\u5b9e\u73b0\u7c7b\uff0c\u90fd\u901a\u8fc7\u4e0d\u540c\u7684\u7b97\u6cd5\u6765\u5904\u7406\u8d1f\u8f7d\u5747\u8861\uff0cRibbon \u4e2d\u5b9e\u73b0\u7684 IRule \u53c8\u4ee5\u4e0b\u51e0\u79cd\uff1a IRule \u5b9e\u73b0\u7c7b BestAvailableRule\uff1a\u9009\u62e9\u6700\u5c0f\u8bf7\u6c42\u6570 ClientConfigEnabledRoundRobinRule\uff1a\u8f6e\u8be2 RandomRule\uff1a\u968f\u673a\u9009\u62e9 Server RoundRobinRule\uff1a\u8f6e\u8be2 WeightedResponseTimeRule\uff1a\u6839\u636e\u54cd\u5e94\u65f6\u95f4\u5206\u914d\u4e00\u4e2a\u6743\u91cd weight\uff0cweight\u8d8a\u4f4e\uff0c\u88ab\u9009\u62e9\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u4f4e ZoneAvoidanceRule\uff1a\u6839\u636e Server \u7684 Zone \u533a\u57df\u548c\u53ef\u7528\u6027\u8f6e\u8be2\u9009\u62e9","title":"IRule"},{"location":"java/spring-cloud-ribbon/#iping","text":"IPing \u7684\u5b9e\u73b0\u7c7b\u53c8 PingUrl\uff0cPingConstant\uff0cNoOpPing\uff0cDummyPing \u548c NIWSDiscoveryPing\u3002IPing \u63a5\u53e3\u4e2d\u6709\u4e00\u4e2a isAlive \u65b9\u6cd5\u3002 1 public boolean isAlive ( Server Server ); \u901a\u8fc7\u5411 Server \u53d1\u9001 ping \u4fe1\u53f7\uff0c\u6765\u5224\u65ad Server \u662f\u5426\u53ef\u7528 IPing \u5b9e\u73b0\u7c7b PingUrl \u771f\u5b9e\u7684\u53bbping \u67d0\u4e2aurl\uff0c\u5224\u65ad\u5176\u662f\u5426alive PingConstant \u56fa\u5b9a\u8fd4\u56de\u67d0\u670d\u52a1\u662f\u5426\u53ef\u7528\uff0c\u9ed8\u8ba4\u8fd4\u56detrue\uff0c\u5373\u53ef\u7528 NoOpPing \u4e0d\u53bbping,\u76f4\u63a5\u8fd4\u56detrue,\u5373\u53ef\u7528\u3002 DummyPing \u76f4\u63a5\u8fd4\u56detrue\uff0c\u5e76\u5b9e\u73b0\u4e86initWithNiwsConfig\u65b9\u6cd5\u3002 NIWSDiscoveryPing\uff0c\u6839\u636eDiscoveryEnabledServer\u7684InstanceInfo\u7684InstanceStatus\u53bb\u5224\u65ad\uff0c\u5982\u679c\u4e3aInstanceStatus.UP\uff0c\u5219\u4e3a\u53ef\u7528\uff0c\u5426\u5219\u4e0d\u53ef\u7528\u3002","title":"IPing"},{"location":"java/spring-cloud-ribbon/#serverlist","text":"ServerList \u662f\u5b9a\u4e49\u4e86\u83b7\u53d6\u6240\u6709\u7684 Server \u7684\u6ce8\u518c\u5217\u8868\u4fe1\u606f\u7684\u63a5\u53e3\u3002 1 2 3 4 public interface ServerList < T extends Server > { public List < T > getInitialListOfServers (); public List < T > getUpdatedListOfServers (); } \u5176\u5b9e\u73b0\u7c7b\u662f DiscoveryEnabledNIWSServerList \u3002","title":"ServerList"},{"location":"java/spring-cloud-ribbon/#serverlistfilter","text":"ServerListFilter \u53ef\u6839\u636e\u914d\u7f6e\u8fc7\u6ee4\u6216\u8005\u6839\u636e\u7279\u6027\u52a8\u6001\u83b7\u53d6\u7b26\u5408\u6761\u4ef6\u7684 Server \u5217\u8868\u3002\u8be5\u7c7b\u4e5f\u662f\u4e00\u4e2a\u63a5\u53e3 1 2 3 public interface ServerListFilter < T extends Server > { public List < T > getFilteredListOfServers ( List < T > servers ); }","title":"ServerListFilter"},{"location":"java/spring-cloud-ribbon/#_4","text":"\u5728 SpringClientFactory \u4e2d\u83b7\u53d6 LoadBalancer \u7684\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u80fd\u770b\u5230\u83b7\u53d6\u5b9e\u4f8b\u7684\u65b9\u6cd5\u662f\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u5230\u5b9e\u73b0\u7c7b\u7684\u542b\u6709 IClientConfig \u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\u6765\u6784\u9020\u5b9e\u4f8b\u5bf9\u8c61\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // SpringClientFactory.java static < C > C instantiateWithConfig ( AnnotationConfigApplicationContext context , Class < C > clazz , IClientConfig config ) { C result = null ; try { // \u83b7\u53d6\u5230 ILoadBalancer \u5b9e\u73b0\u7c7b\u7684\u6784\u9020\u65b9\u6cd5 Constructor < C > constructor = clazz . getConstructor ( IClientConfig . class ); // \u901a\u8fc7\u6784\u9020\u65b9\u6cd5\u6784\u9020\u5b9e\u4f8b\u5bf9\u8c61 result = constructor . newInstance ( config ); } catch ( Throwable e ) { // Ignored } // ... return result ; }","title":"\u6e90\u7801\u5206\u6790"},{"location":"java/spring-cloud-ribbon/#dynamicserverlistloadbalancer_1","text":"DynamicServerListLoadBalancer \u4e2d\u7684\u6784\u9020\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e86\u4e00\u4e2a\u65b9\u6cd5 - initWithNiwsConfig() \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // DynamicServerListLoadBalancer.java public DynamicServerListLoadBalancer ( IClientConfig clientConfig ) { initWithNiwsConfig ( clientConfig ); } public initWithNiwsConfig ( IClientConfig clientConfig ) { try { super . initWithNiwsConfig ( clientConfig ); // \u83b7\u53d6 ServerList \u7684 classname String niwsServerListClassname = clientConfig . getPropertyAsString ( CommonClientConfigKey . NIWSServerListClassName , DefaultClientConfigImpl . DEFAULT_SERVER_LIST_CLASS ); // \u6784\u9020 ServerList ServerList < T > niwsServerListImpl = ( ServerList < T > ) ClientFactory . instantiateInstanceWithClientConfig ( niwsServerListClassName , clientConfig ); // \u5982\u679c\u8be5 ServerList \u662f AbstractServerList \u7684\u5b50\u7c7b\uff0c\u5219\u83b7\u53d6\u5e76\u8bbe\u7f6e\u8fc7\u6ee4\u5668 if ( niwsServerListImpl instanceof AbstractServerList ) { AbstractServerListFilter < T > niwsFilter = (( AbstractServerList ) niwsServerListImpl ). getFilterImpl ( clientConfig ); niwsFilter . setLoadBalancerStats ( getLoadBalancerStats ()); this . filter = niwsFilter ; } // \u83b7\u53d6 ServerListUpdater \u7684 classname String serverListUpdaterClassName = clientConfig . getPropertyAsString ( CommonClientConfigKey . ServerListUpdaterClassname , DefaultClientConfigImpl . DEFAULT_SERVER_LIST_UPDATER_CLASS ); // \u901a\u8fc7 classname \u6784\u9020 ServerListUpdater \u8bbe\u7f6e\u5230 serverListUpdater \u6210\u5458\u5c5e\u6027\u4e2d this . serverListUpdater = ( ServerListUpdater ) ClientFactory . instantiateInstanceWithClientConfig ( serverListUpdaterClassName , clientConfig ); // \u6267\u884c\u5269\u4e0b\u7684\u521d\u59cb\u5316\u64cd\u4f5c restOfInit ( clientConfig ); } }","title":"DynamicServerListLoadBalancer \u6784\u9020\u65b9\u6cd5"},{"location":"java/spring-cloud-ribbon/#restofinit","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 // DynamicServerListLoadBalancer.java void restOfInit ( IClientConfig clientConfig ) { boolean primeConnection = this . isEnablePrimingConnections (); // \u5c06\u8fd9\u4e2a\u5173\u95ed\u6765\u907f\u514d BaseLoadBalancer.setServerList() \u4e2d\u91cd\u590d\u7684\u5f02\u6b65\u542f\u52a8 this . setEnablePrimingConnections ( false ); enableAndInitLearnNewServersFeature (); updateListOfServers (); // \u7528\u6765\u83b7\u53d6\u6240\u6709\u7684 Server if ( primeConnection && this . getPrimeConnections () != null ) { this . getPrimeConnections (). primeConnections ( getReachableServers ()); } this . setEnablePrimingConnections ( primeConnection ); LOGGER . info ( \"DynamicServerListLoadBalancer for client {} initialized: {}\" , clientConfig . getClientName (), this . toString ()); } \u4e0a\u9762\u6e90\u7801\u4e2d\u7684 updateListOfServers() \u6700\u7ec8\u662f\u901a\u8fc7 serverListImpl.getUpdatedListOfServers() \u6765\u83b7\u53d6\u6240\u6709\u7684\u670d\u52a1\u5217\u8868\u7684\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // DynamicServerListLoadBalancer.java @VisibleForTesting public void updateListOfServers () { List < T > servers = new ArrayList < T > (); if ( serverListImpl != null ) { servers = serverListImpl . getUpdatedListOfServers (); LOGGER . debug ( \"List of Servers for {} obtained from Discovery client: {}\" , getIdentifier (), servers ); if ( filter != null ) { // \u5982\u679c\u914d\u7f6e\u4e86\u8fc7\u6ee4\u5668\uff0c\u5219\u5c06\u7b26\u5408\u6761\u4ef6\u7684 server \u7b5b\u9009\u51fa\u6765 servers = filter . getFilteredListOfServers ( servers ); LOGGER . debug ( \"Filtered List of Servers for {} obtained from Discovery client: {}\" , getIdentifier (), servers ); } } updateAllServerList ( servers ); } \u5176\u4e2d serverListImpl \u662f ServerList \u7684\u5b9e\u73b0\u7c7b - DiscoveryEnabledNIWSServerList\u3002\u800c getUpdatedListOfServers() \u7684\u5177\u4f53\u5b9e\u73b0\u4e3a\uff1a 1 2 3 4 5 6 7 8 // DiscoveryEnabledNIWSServerList.java @Override public List < DiscoveryEnabledServer > getInitialListOfServers () { return obtainServersViaDiscovery (); } public List < DiscoveryEnabledServer > getUpdatedListOfServers () { return obtainServersViaDiscovery (); }","title":"restOfInit \u6267\u884c\u5269\u4e0b\u7684\u521d\u59cb\u5316\u64cd\u4f5c"},{"location":"java/spring-cloud-ribbon/#obtainserversviadiscovery","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 // DiscoveryEnabledNIWSServerList.java private List < DiscoveryEnabledServer > obtainServersViaDiscovery () { List < DiscoveryEnabledServer > serverList = new ArrayList < DiscoveryEnabledServer > (); if ( eurekaClientProvider == null || eurekaClientProvider . get () == null ) { logger . warn ( \"EurekaClient has not been initialized yet, returning an empty list\" ); return new ArrayList < DiscoveryEnabledServer > (); } EurekaClient eurekaClient = eurekaClientProvider . get (); if ( vipAddresses != null ){ for ( String vipAddress : vipAddresses . split ( \",\" )) { // if targetRegion is null, it will be interpreted as the same region of client List < InstanceInfo > listOfInstanceInfo = eurekaClient . getInstancesByVipAddress ( vipAddress , isSecure , targetRegion ); for ( InstanceInfo ii : listOfInstanceInfo ) { if ( ii . getStatus (). equals ( InstanceStatus . UP )) { if ( shouldUseOverridePort ){ if ( logger . isDebugEnabled ()){ logger . debug ( \"Overriding port on client name: \" + clientName + \" to \" + overridePort ); } // copy is necessary since the InstanceInfo builder just uses the original reference, // and we don't want to corrupt the global eureka copy of the object which may be // used by other clients in our system InstanceInfo copy = new InstanceInfo ( ii ); if ( isSecure ){ ii = new InstanceInfo . Builder ( copy ). setSecurePort ( overridePort ). build (); } else { ii = new InstanceInfo . Builder ( copy ). setPort ( overridePort ). build (); } } DiscoveryEnabledServer des = new DiscoveryEnabledServer ( ii , isSecure , shouldUseIpAddr ); des . setZone ( DiscoveryClient . getZone ( ii )); serverList . add ( des ); } } if ( serverList . size () > 0 && prioritizeVipAddressBasedServers ){ break ; // if the current vipAddress has servers, we dont use subsequent vipAddress based servers } } } return serverList ; } \u770b\u5230\u8fd9\u91cc\uff0c\u53ef\u4ee5\u77e5\u9053\u8d1f\u8f7d\u5747\u8861\u5668 Ribbon \u662f\u901a\u8fc7 Eureka Client \u6765\u83b7\u53d6\u6ce8\u518c\u5217\u8868\u4fe1\u606f\uff0c\u7136\u540e\u901a\u8fc7\u914d\u7f6e\u7684\u8def\u7531\u89c4\u5219 IRule \u6765\u8def\u7531\u3002\u4f46\u662f\u5b83\u4ece Eureka Client \u83b7\u53d6\u6ce8\u518c\u4fe1\u606f\u7684\u65f6\u95f4\u95f4\u9694\u662f\u591a\u4e45\u5462\uff1f","title":"obtainServersViaDiscovery"},{"location":"java/spring-cloud-ribbon/#_5","text":"\u5728\u6784\u9020 DynamicServerListLoadBalancer \u7684\u6784\u9020\u65b9\u6cd5\u4e2d\u7684\u7b2c\u4e00\u884c\u662f\u8c03\u7528\u7236\u7c7b\u4e2d\u7684 initWithNiwsConfig \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 // DynamicServerListLoadBalancer.java public initWithNiwsConfig ( IClientConfig clientConfig ) { try { super . initWithNiwsConfig ( clientConfig ); } // ... } \u4e8e\u662f\u6211\u4eec\u8ddf\u8e2a\u5230 BaseLoadBalancer \u7684 initWithNiwsConfig \u65b9\u6cd5\u4e2d\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 // BaseLoadBalancer.java @Override public void initWithNiwsConfig ( IClientConfig clientConfig ) { try { initWithNiwsConfig ( clientConfig , ClientFactory :: instantiateInstanceWithClientConfig ); } catch ( Exception e ) { throw new RuntimeException ( \"Error initializing load balancer\" , e ); } } @Override public void initWithNiwsConfig ( IClientConfig clientConfig , Factory factory ) { S // ... try { // ... initWithConfig ( clientConfig , rule , ping , stats ); } catch ( Exception e ) { throw new RuntimeException ( \"Error initializing load balancer\" , e ); } } void initWithConfig ( IClientConfig clientConfig , IRule rule , IPing ping , LoadBalancerStats stats ) { // ... setPingInterval ( pingIntervalTime ); setMaxTotalPingTime ( maxTotalPingTime ); // cross associate with each other // i.e. Rule,Ping meet your container LB // LB, these are your Ping and Rule guys ... setRule ( rule ); setPing ( ping ); // ... } \u4ee5\u4e0a\u53ea\u4fdd\u7559\u4e86\u5173\u952e\u4ee3\u7801\u3002\u8c03\u7528\u5230 initWithConfig \u65b9\u6cd5\u4e2d\uff0c\u4f1a\u6267\u884c setPingInterval(pingIntervalTime) \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 public void setPingInterval ( int pingIntervalSeconds ) { if ( pingIntervalSeconds < 1 ) { return ; } this . pingIntervalSeconds = pingIntervalSeconds ; if ( logger . isDebugEnabled ()) { logger . debug ( \"LoadBalancer [{}]: pingIntervalSeconds set to {}\" , name , this . pingIntervalSeconds ); } setupPingTask (); // since ping data changed } \u5176\u4e2d\u5f00\u542f\u4e86\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff1a setupPingTask() \u3002\u5728\u8be5\u65b9\u6cd5\u5185\u90e8\u4f7f\u7528 ShutdownEnabledTimer \u521d\u59cb\u5316\u4e86\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u5e76\u4e14\u8bbe\u7f6e\u6bcf10\u79d2\u8c03\u7528 PingTask \u4efb\u52a1\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // BaseLoadBalancer.java // \u5b9a\u65f6\u4efb\u52a1 void setupPingTask () { if ( canSkipPing ()) { return ; } if ( lbTimer != null ) { lbTimer . cancel (); } lbTimer = new ShutdownEnabledTimer ( \"NFLoadBalancer-PingTimer-\" + name , true ); lbTimer . schedule ( new PingTask (), 0 , pingIntervalSeconds * 1000 ); // \u9ed8\u8ba410\u79d2\u6267\u884c\u4e00\u6b21 forceQuickPing (); } PingTask \u662f BaseLoadBalancer \u7684\u5185\u90e8\u7c7b\uff0c\u6839\u636e IPingStrategy \u7b56\u7565\u6765\u53d1\u9001 ping \u8bf7\u6c42\u83b7\u53d6\u548c\u66f4\u65b0\u670d\u52a1\u5668\u5217\u8868\uff0c\u9ed8\u8ba4\u7b56\u7565\u662f SerialPingStrategy\u3002\u5728 PingTask \u7684 run \u65b9\u6cd5\u4e2d\uff0c\u6267\u884c\u4e86\u53e6\u4e00\u4e2a\u5185\u90e8\u7c7b Pinger \u7684 runPinger \u65b9\u6cd5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 // BaseLoadBalancer.java // \u5185\u90e8\u7c7b PingTask class PingTask extends TimerTask { public void run () { try { new Pinger ( pingStrategy ). runPinger (); } catch ( Exception e ) { logger . error ( \"LoadBalancer [{}]: Error pinging\" , name , e ); } } } // \u5185\u90e8\u7c7b Pinger class Pinger { private final IPingStrategy pingerStrategy ; public Pinger ( IPingStrategy pingerStrategy ) { this . pingerStrategy = pingerStrategy ; } public void runPinger () throws Exception { // \u7528 CAS \u8bbe\u7f6e pingInProgress \u4e3a true\uff0c\u4ee3\u8868\u6b63\u5728\u6267\u884c Ping \u4efb\u52a1\u3002 // \u5982\u679c\u8bbe\u7f6e\u5931\u8d25\uff0c\u5219\u8868\u793a\u6709\u7ebf\u7a0b\u6b63\u5728\u6267\u884c Ping \u4efb\u52a1\uff0c\u8fd9\u91cc\u5c31\u4e0d\u518d\u6267\u884c if ( ! pingInProgress . compareAndSet ( false , true )) { return ; // Ping in progress - nothing to do } // we are \"in\" - we get to Ping Server [] allServers = null ; boolean [] results = null ; Lock allLock = null ; Lock upLock = null ; try { /* * The readLock should be free unless an addServer operation is * going on... */ // \u8bfb\u9501\u5e94\u8be5\u662f\u7a7a\u95f2\u72b6\u6001\uff0c\u9664\u4e86 addServer \u64cd\u4f5c\u6b63\u5728\u6267\u884c\u3002 allLock = allServerLock . readLock (); // \u52a0\u8bfb\u9501\uff0c\u907f\u514d\u5176\u4ed6\u7ebf\u7a0b\u4fee\u6539 serverList allLock . lock (); allServers = allServerList . toArray ( new Server [ allServerList . size () ] ); // \u89e3\u9501 allLock . unlock (); int numCandidates = allServers . length ; // \u5411\u6bcf\u4e2a\u670d\u52a1\u5668\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u503c\u7684\u7ed3\u679c\u96c6\uff08\u670d\u52a1\u5668\u662f\u5426\u5b58\u6d3b - \u80fd\u5426\u8bf7\u6c42\u6210\u529f\uff09 results = pingerStrategy . pingServers ( ping , allServers ); final List < Server > newUpList = new ArrayList < Server > (); final List < Server > changedServers = new ArrayList < Server > (); // \u904d\u5386\u5f53\u524d\u6240\u6709Server for ( int i = 0 ; i < numCandidates ; i ++ ) { // \u83b7\u53d6\u7b2c i \u4e2a Server \u662f\u5f53\u524d\u5426\u4e3a\u5b58\u6d3b\u72b6\u6001\uff08UP\uff09 boolean isAlive = results [ i ] ; Server svr = allServers [ i ] ; // \u83b7\u53d6 ping \u4e4b\u524d\u7684\u670d\u52a1\u5668\u72b6\u6001 boolean oldIsAlive = svr . isAlive (); // \u5c06\u8be5\u670d\u52a1\u5668\u72b6\u6001\u6539\u4e3a\u5f53\u524d\u83b7\u53d6\u5230\u7684\u72b6\u6001 svr . setAlive ( isAlive ); if ( oldIsAlive != isAlive ) { // \u5982\u679c\u4e4b\u524d\u72b6\u6001\u4e0e\u5f53\u524d\u83b7\u53d6\u7684\u72b6\u6001\u4e0d\u4e00\u81f4 // \u52a0\u5165\u5230\u72b6\u6001\u66f4\u6539\u8fc7\u7684\u670d\u52a1\u5668\u5217\u8868\u4e2d changedServers . add ( svr ); // \u8f93\u51fa\u65e5\u5fd7\uff1a\u5f53\u524d\u670d\u52a1\u5668\u72b6\u6001\u4fee\u6539 logger . debug ( \"LoadBalancer [{}]: Server [{}] status changed to {}\" , name , svr . getId (), ( isAlive ? \"ALIVE\" : \"DEAD\" )); } if ( isAlive ) { // \u5982\u679c\u83b7\u53d6\u5230\u7684\u5f53\u524d\u72b6\u6001\u4e3a true\uff08\u5b58\u6d3bUP\u72b6\u6001\uff09 // \u5219\u5c06\u8be5\u670d\u52a1\u5668\u52a0\u5165\u5230 newUpList \u4e2d\uff0c\u7528\u4e8e\u540e\u9762\u66f4\u65b0\u81f3\u5b58\u6d3b\u670d\u52a1\u5668\u5217\u8868 newUpList . add ( svr ); } } // \u66f4\u65b0\u5b58\u6d3b\u670d\u52a1\u5668\u5217\u8868\uff0c\u9700\u8981\u52a0\u5199\u9501\uff0c\u907f\u514d\u5e76\u53d1\u95ee\u9898 upLock = upServerLock . writeLock (); upLock . lock (); upServerList = newUpList ; upLock . unlock (); // \u901a\u77e5\u670d\u52a1\u5668\u72b6\u6001\u4fee\u6539 notifyServerStatusChangeListener ( changedServers ); } finally { pingInProgress . set ( false ); } } } \u8be5\u5b9a\u65f6\u4efb\u52a1\u7684\u5927\u81f4\u6d41\u7a0b\u4e3a\uff1a 1\u3001\u9996\u5148\u5c06\u7528 CAS \u6765\u4fee\u6539 pingInProgress \uff08AtomicBoolean \u5bf9\u8c61\uff09\uff0c\u5982\u679c\u4fee\u6539\u4e0d\u6210\u529f\uff0c\u5219\u8868\u793a\u5f53\u524d\u6709\u5176\u4ed6\u7ebf\u7a0b\u6b63\u5728\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5e76\u4e14\u8fd8\u6ca1\u6709\u6267\u884c\u5b8c\u6bd5\uff0c\u6240\u4ee5\u5f53\u524d\u64cd\u4f5c\u53ef\u4ee5\u4e0d\u518d\u6267\u884c\u3002 2\u3001\u52a0\u8bfb\u9501\u83b7\u53d6\u5f53\u524d\u670d\u52a1\u5217\u8868\u3002 3\u3001\u901a\u8fc7 IPingStrategy \u5411\u6bcf\u4e2a\u670d\u52a1\u5668\u53d1\u9001 ping \u8bf7\u6c42\uff0c\u5f97\u5230\u4e00\u4e2a\u5e03\u5c14\u503c\u7684\u7ed3\u679c\u96c6\u3002 3\u3001\u904d\u5386\u4e4b\u524d\u83b7\u53d6\u5230\u7684 Server List\uff0c\u5224\u65ad\u670d\u52a1\u72b6\u6001\u662f\u5426\u6709\u53d8\u5316\uff0c\u5e76\u66f4\u65b0\u670d\u52a1\u5217\u8868\u3002\uff08\u5176\u4e2d\u72b6\u6001\u66f4\u6539\u7684\u670d\u52a1\u5668\u5c06\u4f1a\u52a0\u5165\u5230 changedServers \u5217\u8868\u4e2d\uff0cping \u8bf7\u6c42\u540e\u4f9d\u7136\u5b58\u6d3b\u7684\u670d\u52a1\u4f1a\u52a0\u5165\u5230 newUpList \u4e2d\uff09 4\u3001\u6700\u540e\u52a0\u5199\u9501\u66f4\u65b0 UP \u72b6\u6001\u7684\u670d\u52a1\u5668\u5217\u8868\uff0c\u5e76 \u901a\u77e5\u670d\u52a1\u72b6\u6001\u6539\u53d8 \u3002(\u6709\u5174\u8da3\u7684\u8bdd\uff0c\u6b64\u5904\u53ef\u4ee5\u67e5\u770b\u4e00\u4e0bServerStatusChangeListener \u7684\u5b9e\u73b0\u7c7b\u662f\u54ea\u4e2a\uff0c\u518d\u770b\u5177\u4f53\u505a\u4e86\u4ec0\u4e48\u64cd\u4f5c) 5\u3001\u5168\u90e8\u6267\u884c\u5b8c\u6210\u540e\uff0c\u5c06 pingInProgress \u6539\u4e3a false\u3002","title":"\u5b9a\u65f6\u4efb\u52a1\u66f4\u65b0\u670d\u52a1\u5668\u5217\u8868\u548c\u72b6\u6001"},{"location":"java/spring-cloud-ribbon/#_6","text":"\u7531\u6b64\u53ef\u89c1\uff0cRibbon\u7684\u8d1f\u8f7d\u5747\u8861\uff0c\u4e3b\u8981\u662f\u901a\u8fc7 LoadBalancerClient \u6765\u5b9e\u73b0\u7684\uff0c\u800c Load\u2019BalancerClient \u53c8\u5c06\u5177\u4f53\u5b9e\u73b0\u4ea4\u7ed9\u4e86 ILoadBalancer \u6765\u5904\u7406\uff0cILoadBalancer \u901a\u8fc7\u914d\u7f6e IRule\u3001IPing \u7b49\u4fe1\u606f\uff0c\u5411 Eureka \u83b7\u53d6\u670d\u52a1\u6ce8\u518c\u5217\u8868\uff0c\u5e76\u4e14\u5728\u521d\u59cb\u5316\u65f6\u5f00\u542f\u4e00\u4e2a\u5b9a\u65f6\u4efb\u52a1\uff0c10s \u4e00\u6b21\u5411 EurekaClient \u53d1\u9001 ping \u8bf7\u6c42\uff0c\u6765\u5224\u65ad\u670d\u52a1\u7684\u53ef\u7528\u6027\uff0c\u5982\u679c\u670d\u52a1\u7684\u53ef\u7528\u6027\u53d1\u751f\u6539\u53d8\u6216\u8005\u670d\u52a1\u6570\u91cf\u4e0e\u4e4b\u524d\u7684\u4e0d\u4e00\u81f4\uff0c\u5219\u66f4\u65b0\u5f53\u524d\u670d\u52a1\u5668\u5217\u8868\u6216\u91cd\u65b0\u62c9\u53d6\u3002\u6700\u540e ILoadBalancer \u83b7\u53d6\u5230\u8fd9\u4e9b\u670d\u52a1\u5217\u8868\u4e4b\u540e\uff0c\u4fbf\u53ef\u4ee5\u6839\u636e IRule \u6765\u8fdb\u884c\u8d1f\u8f7d\u5747\u8861\u3002 \u800c RestTemplate \u88ab @LoadBalanced \u6ce8\u89e3\u540e\uff0c\u80fd\u591f\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0c\u4e3b\u8981\u662f\u901a\u8fc7\u7ed9 RestTemplate \u6dfb\u52a0\u62e6\u622a\u5668\uff0c\u5728\u8bf7\u6c42\u524d\u901a\u8fc7\u62e6\u622a\u5668\uff08\u8d1f\u8f7d\u5747\u8861\uff09\u83b7\u53d6\u5230\u771f\u6b63\u7684\u8bf7\u6c42\u5730\u5740\uff0c\u6700\u540e\u8fdb\u884c\u670d\u52a1\u8c03\u7528\u3002","title":"\u603b\u7ed3"},{"location":"java/spring-cloud-ribbon/#ref","text":"Ribbon \u6e90\u7801 Spring Cloud Commons \u6e90\u7801 Spring Cloud Netflix \u6e90\u7801 Spring Cloud Netflix Ribbon \u5b98\u65b9\u6587\u6863 Spring Cloud Ribbon\u8e29\u5751\u8bb0\u5f55\u53ca\u539f\u7406\u89e3\u6790 Ribbon\u539f\u7406\u5206\u6790 - Spring For All","title":"Ref"},{"location":"java/synchronized/","tags":["java"],"text":"\u6211\u4eec\u5728\u5b66\u4e60 Java \u5e76\u53d1\u7f16\u7a0b\u7684\u65f6\u5019\uff0c\u770b\u5230\u7684\u6700\u591a\u7684\u5c31\u662f synchronized \u5173\u952e\u5b57\u4e86\uff0c\u5b83\u53ef\u4ee5\u89e3\u51b3\u5f88\u591a\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898\uff0c\u968f\u7740\u6df1\u5165\u5b66\u4e60\uff0c\u6211\u4eec\u77e5\u9053 synchronized \u662f\u4e00\u4e2a\u91cd\u91cf\u7ea7\u9501\uff0c\u6548\u7387\u76f8\u5bf9\u4e8e Lock \u6765\u8bf4\u5e76\u4e0d\u662f\u90a3\u4e48\u597d\u3002\u4f46\u662f\u7ecf\u8fc7 Java \u51e0\u4e2a\u7248\u672c\u7684\u4f18\u5316\u4e4b\u540e\uff0csynchronized \u5e76\u4e0d\u663e\u5f97\u90a3\u4e48\u7b28\u91cd\u4e86\u3002\u4e0b\u9762\u6211\u4eec\u6765\u770b\u4e00\u4e0b synchronized \u7684\u5b9e\u73b0\u673a\u5236\uff0c\u548c Java \u5bf9\u5b83\u8fdb\u884c\u4e86\u4ec0\u4e48\u6837\u7684\u5347\u7ea7\u3002 \u5b9e\u73b0\u539f\u7406 \u00b6 Synchronized \u4fdd\u8bc1\u4e86\u65b9\u6cd5\u6216\u8005\u4ee3\u7801\u5757\u5728\u8fd0\u884c\u65f6\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\uff0c\u5e76\u4fdd\u8bc1\u4e86\u5bf9\u5171\u4eab\u53d8\u91cf\u7684\u5185\u5b58\u53ef\u89c1\u6027\u3002 Java \u4e2d synchronized \u96c6\u4e2d\u5b9e\u73b0\u65b9\u6cd5\uff1a \u975e\u9759\u6001\u540c\u6b65\u65b9\u6cd5\uff1a\u9501\u4f4f\u5f53\u524d\u5b9e\u4f8b\u5bf9\u8c61 1 2 3 public synchronized void test () { } \u9759\u6001\u540c\u6b65\u65b9\u6cd5\uff1a\u9501\u4f4f\u5f53\u524d\u7c7b\u7684 class \u5bf9\u8c61 1 2 3 public static synchronized void test () { } \u540c\u6b65\u4ee3\u7801\u5757\uff1a\u9501\u4f4f\u62ec\u53f7\u4e2d\u7684\u5bf9\u8c61 1 2 3 4 5 public void test () { synchronized ( this ) { } } \u6211\u4eec\u5229\u7528\u5de5\u5177\u67e5\u770b\u751f\u6210\u7684 class \u6587\u4ef6\uff0c\u751f\u6210\u7684 class \u6587\u4ef6\u5982\u4e0b\uff1a \u4ece\u4ee5\u4e0a class \u6587\u4ef6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u540c\u6b65\u4ee3\u7801\u5757\u662f\u901a\u8fc7 monitorenter \u548c monitorexit \u6765\u5b9e\u73b0\u7684\uff0c\u540c\u6b65\u65b9\u6cd5\u662f\u4f9d\u9760\u65b9\u6cd5\u4fee\u9970\u7b26\u4e2d\u7684 ACC_SYNCHRONIZED \u5b9e\u73b0\u3002 \u540c\u6b65\u4ee3\u7801\u5757\uff1amoniterenter \u6307\u4ee4\u4f1a\u63d2\u5165\u5230\u540c\u6b65\u4ee3\u7801\u5757\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0cmoniterexit \u63d2\u5165\u5230\u540c\u6b65\u4ee3\u7801\u5757\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0cJVM \u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a monitorenter \u90fd\u6709\u4e00\u4e2a monitorexit \u76f8\u5bf9\u5e94\u3002\u4efb\u4f55\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a monitor \u4e0e\u4e4b\u76f8\u5173\u8054\uff0c\u5f53 monitor \u88ab\u6301\u6709\u540e\uff0c\u5b83\u5c06\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u3002\u7ebf\u7a0b\u6267\u884c\u5230 moniterenter \u6307\u4ee4\u65f6\uff0c\u5c06\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u5bf9\u5e94\u7684 monitor \u6240\u6709\u6743\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u83b7\u53d6\u9501\uff09\u3002 \u540c\u6b65\u65b9\u6cd5\uff1a\u540c\u6b65\u65b9\u6cd5\u4e2d\u6ca1\u6709 monitorenter \u548c monitorexit\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5728 flags \u4e2d\u6dfb\u52a0\u4e86 ACC_SYNCHRONIZED \u6807\u8bc6\uff0cJVM \u901a\u8fc7\u8be5 ACC_SYNCHRONIZED \u8bbf\u95ee\u6807\u5fd7\u6765\u8fa8\u522b\u4e00\u4e2a\u65b9\u6cd5\u662f\u5426\u58f0\u660e\u4e3a\u540c\u6b65\u65b9\u6cd5\uff0c\u4ece\u800c\u6267\u884c\u76f8\u5e94\u7684\u540c\u6b65\u8c03\u7528\uff08\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u8c03\u7528\u6307\u4ee4\u5c06\u4f1a\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u542b\u6709 ACC_SYNCHRONIZED \u8bbf\u95ee\u6807\u5fd7\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u7ebf\u7a0b\u5c06\u4f1a\u5148\u6301\u6709 monitor\u3002\u5982\u679c\u540c\u6b65\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u800c\u4e14\u5728\u65b9\u6cd5\u5185\u90e8\u65e0\u6cd5\u5904\u7406\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u6240\u6301\u6709\u7684 monitor \u5c06\u4f1a\u5728\u5f02\u5e38\u629b\u5230\u540c\u6b65\u65b9\u6cd5\u4e4b\u5916\u65f6\u81ea\u52a8\u91ca\u653e\uff09\u3002\u4f7f\u7528\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u6216\u65b9\u6cd5\u6240\u5c5e Class \u5728 JVM \u7684\u5185\u90e8\u5bf9\u8c61\u8868\u793a Klass \u505a\u4e3a\u9501\u5bf9\u8c61\u3002 \u5173\u4e8e monitorenter \u548c moniterexit \u8fd9\u4e24\u6761\u6307\u4ee4 \u5728 JVM \u7684\u89c4\u8303\u4e2d\u6709\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a Note Each object is associated with a monitor. A monitor is locked if and only if it has an owner. The thread that executes monitorenter attempts to gain ownership of the monitor associated with objectref, as follows: \u2022 If the entry count of the monitor associated with objectref is zero, the thread enters the monitor and sets its entry count to one. The thread is then the owner of the monitor. \u2022 If the thread already owns the monitor associated with objectref, it reenters the monitor, incrementing its entry count. \u2022 If another thread already owns the monitor associated with objectref, the thread blocks until the monitor\u2019s entry count is zero, then tries again to gain ownership. \u4ee5\u4e0a\u5f15\u7528\u4e5f\u8bf4\u660e\u4e86\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5173\u8054\u4e86\u4e00\u4e2a monitor\uff0c\u5982\u679c\u4e00\u4e2amonitor\u88ab\u5360\u7528\u5219\u5b83\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u3002\u7ebf\u7a0b\u5728\u6267\u884c monitorenter \u6307\u4ee4\u65f6\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u5bf9\u8c61\u5173\u8054\u7684 monitor \u7684\u6240\u6709\u6743\u3002 \u5982\u679c monitor \u7684\u8fdb\u5165\u6570\u4e3a0\uff0c\u5219\u8be5\u7ebf\u7a0b\u8fdb\u5165 monitor\uff0c\u5e76\u5c06\u8fdb\u5165\u6570\u8bbe\u7f6e\u4e3a1\uff0c\u8be5\u7ebf\u7a0b\u4e3a\u8be5 monitor \u7684\u6240\u6709\u8005\u3002 \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u5360\u6709\u4e86\u5bf9\u8c61\u5173\u8054\u7684 monitor\uff0c\u5b83\u4f1a\u91cd\u65b0\u8fdb\u5165\uff0c\u5e76\u5c06\u8fdb\u5165\u6570\u52a01\u3002 \u5982\u679c\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5360\u6709\u4e86\u8be5 monitor\uff0c\u5219\u8be5\u7ebf\u7a0b\u4f1a\u963b\u585e\u76f4\u5230 monitor \u7684\u8fdb\u5165\u6570\u4e3a0\uff0c\u7136\u540e\u5c1d\u8bd5\u83b7\u53d6\u6240\u6709\u6743\u3002 Note The thread that executes monitorexit must be the owner of the monitor associated with the instance referenced by objectref. The thread decrements the entry count of the monitor associated with objectref. If as a result the value of the entry count is zero, the thread exits the monitor and is no longer its owner. Other threads that are blocking to enter the monitor are allowed to attempt to do so. \u5927\u81f4\u610f\u601d\u662f\uff1a\u6267\u884c monitorexit \u7684\u7ebf\u7a0b\u5fc5\u987b\u662f objectref \u6240\u5bf9\u5e94\u7684 monitor \u7684\u6240\u6709\u8005\u3002\u8be5\u6307\u4ee4\u6267\u884c\u65f6\uff0c\u7ebf\u7a0b\u4f1a\u5c06 monitor \u7684\u8fdb\u5165\u6570\u51cf1\u3002\u5982\u679c\u8fdb\u5165\u6570\u51cf1\u4e4b\u540e\u4e3a0\uff0c\u5219\u8be5\u7ebf\u7a0b\u9000\u51fa monitor \u5e76\u4e14\u4e0d\u518d\u662f\u5b83\u7684\u6240\u6709\u8005\u3002\u88ab\u963b\u585e\u7684\u5176\u4ed6\u7ebf\u7a0b\u5c06\u5141\u8bb8\u5c1d\u8bd5\u83b7\u53d6\u6240\u6709\u6743\u3002 Java \u5bf9\u8c61\u5934\u548c Monitor \u00b6 Java \u5bf9\u8c61\u5934 \u00b6 \u5bf9\u8c61\u5728\u5806\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u5206\u4e3a\u4e09\u5757\u533a\u57df\uff1a\u5bf9\u8c61\u5934\u3001\u5b9e\u4f8b\u6570\u636e\u548c\u5bf9\u5176\u586b\u5145\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a\u5b58\u653e\u7c7b\u548c\u7236\u7c7b\u7684\u5c5e\u6027\u4fe1\u606f\uff0c\u5982\u679c\u662f\u6570\u7ec4\uff0c\u8fd8\u5305\u62ec\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u4e3a4\u5b57\u8282\u3002 \u586b\u5145\u6570\u636e\uff1aJVM \u8981\u6c42\u5bf9\u8c61\u7684\u5176\u5b9e\u5730\u5740\u5fc5\u987b\u4e3a8\u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u6570\u636e\u9700\u8981\u586b\u5145\uff08\u975e\u5fc5\u987b\uff09\u3002 Java \u7684\u5bf9\u8c61\u5934\u662f\u5b9e\u73b0 synchronized \u7684\u9501\u5bf9\u8c61\u7684\u57fa\u7840\u3002\u4e00\u822c\u60c5\u51b5\uff0csynchronized \u4f7f\u7528\u7684\u9501\u5bf9\u8c61\u90fd\u5b58\u5728 Java \u5bf9\u8c61\u5934\u4e2d\u3002JVM \u91c7\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u5b58\u50a8\u5bf9\u8c61\u5934\uff08\u5982\u679c\u5bf9\u8c61\u662f\u6570\u7ec4\uff0c\u5219\u4f7f\u7528\u4e09\u4e2a\u5b57\u8282\uff0c\u591a\u51fa\u6765\u7684\u5b57\u8282\u5b58\u50a8\u6570\u7ec4\u957f\u5ea6\uff09\uff0c\u4e3b\u8981\u662f\u7531 Mark Word \u548c\u7c7b\u578b\u6307\u9488\u7ec4\u6210\u3002 \u865a\u62df\u673a\u4f4d\u6570 \u5934\u5bf9\u8c61\u7ed3\u6784 \u8bf4\u660e 32/64bit Mark Word \u5b58\u50a8\u5bf9\u8c61\u7684 hashCode\uff0c\u9501\u4fe1\u606f\u3001\u5206\u4ee3\u5e74\u9f84\u3001GC\u6807\u5fd7\u3001\u504f\u5411\u7ebf\u7a0bID\u3001\u504f\u5411\u65f6\u95f4\u6233\u7b49\u4fe1\u606f 32/64bit Class Metadata Address \u7c7b\u578b\u6307\u9488\u6307\u5411\u5bf9\u8c61\u7684\u7c7b\u5143\u6570\u636e\uff0cJVM \u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u786e\u5b9a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u7531\u4e8e\u5bf9\u8c61\u5934\u7684\u4fe1\u606f\u662f\u4e0e\u5bf9\u8c61\u81ea\u8eab\u5b9a\u4e49\u7684\u6570\u636e\u6ca1\u6709\u5173\u7cfb\u7684\u989d\u5916\u5b58\u50a8\u6210\u672c\uff0c\u56e0\u6b64\u8003\u8651\u5230 JVM \u7684\u7a7a\u95f4\u6548\u7387\uff0cMark Word \u88ab\u8bbe\u8ba1\u6210\u4e00\u4e2a\u975e\u56fa\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u5b58\u50a8\u66f4\u591a\u6709\u6548\u7684\u6570\u636e\uff0c\u5b83\u4f1a\u6839\u636e\u5bf9\u8c61\u72b6\u6001\u7684\u53d8\u5316\u590d\u7528\u81ea\u5df1\u7684\u5b58\u50a8\u7a7a\u95f4\u3002Mark Word \u4f1a\u6839\u636e\u7a0b\u5e8f\u7684\u8fd0\u884c\u800c\u53d1\u751f\u53d8\u5316\uff08\u4ee5\u4e0b\u662f32\u4f4d\u865a\u62df\u673a\u9ed8\u8ba4\u7684\u5b58\u50a8\u7ed3\u6784\u548c\u5176\u4ed6\u53d8\u5316\u72b6\u6001\uff09\u3002 32\u4f4d JVM \u7684 Mark Word \u9ed8\u8ba4\u5b58\u50a8\u7ed3\u6784\uff1a \u9501\u72b6\u6001 25bit 4bit 1bit\u662f\u5426\u662f\u504f\u5411\u9501 2bit \u9501\u6807\u5fd7\u4f4d \u65e0\u9501\u72b6\u6001 \u5bf9\u8c61HashCode \u5bf9\u8c61\u5206\u4ee3\u5e74\u9f84 0 01 \u72b6\u6001\u53d8\u5316\uff0832\u4f4d\u865a\u62df\u673a\uff09\uff1a \u5176\u4e2d\u8f7b\u91cf\u7ea7\u9501\u548c\u504f\u5411\u9501\u65f6\u5728 Java 6 \u5bf9 synchronized \u9501\u8fdb\u884c\u4f18\u5316\u540e\u65b0\u589e\u7684\u3002 Monitor \u00b6 Monitor \u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u76d1\u89c6\u5668\uff0c\u5728 Hotspot \u4e2d\uff0c\u5b83\u662f\u7531 ObjectMonitor \u5b9e\u73b0\u7684\uff08\u4f4d\u4e8e HotSpot \u865a\u62df\u673a\u6e90\u7801\u7684 ObjectMonitor.hpp\u6587\u4ef6\u4e2d\uff0cC++\u5b9e\u73b0\uff09\uff0c\u5176\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ObjectMonitor () { _header = NULL ; _count = 0 ; //\u8bb0\u5f55\u4e2a\u6570 _waiters = 0 , _recursions = 0 ; _object = NULL ; _owner = NULL ; _WaitSet = NULL ; //\u5904\u4e8ewait\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u4f1a\u88ab\u52a0\u5165\u5230_WaitSet _WaitSetLock = 0 ; _Responsible = NULL ; _succ = NULL ; _cxq = NULL ; FreeNext = NULL ; _EntryList = NULL ; //\u5904\u4e8e\u7b49\u5f85\u9501block\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u8be5\u5217\u8868 _SpinFreq = 0 ; _SpinClock = 0 ; OwnerIsThread = 0 ; } ObjectMonitor \u4e2d\u6709\u4e24\u4e2a\u961f\u5217 \u2014\u2014 _WaitSet, _EntryList\uff08\u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4e00\u6bb5\u540c\u6b65\u4ee3\u7801\u65f6\uff0c\u9996\u5148\u4f1a\u8fdb\u5165 _EntryList \u96c6\u5408\uff0c\u5f53\u7ebf\u7a0b\u62e5\u6709\u5bf9\u8c61\u7684 monitor \u540e\uff0cObjectMonitor \u4f1a\u5c06 _owner \u53d8\u91cf\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ebf\u7a0b\uff0c\u5e76\u5c06\u8ba1\u6570\u5668 _count \u52a01\uff0c\u5982\u679c\u8be5\u7ebf\u7a0b\u8c03\u7528\u4e86 wait() \u65b9\u6cd5\uff0c\u5b83\u5c06\u4f1a\u91ca\u653e\u5f53\u524d\u6301\u6709\u7684 monitor\uff0c _owner \u5c06\u6062\u590d\u4e3a NULL\uff0c\u540c\u65f6\u8be5\u7ebf\u7a0b\u4f1a\u8fdb\u5165 _WaitSet \u7b49\u5f85\u88ab\u5524\u9192\uff09\u3002\u5b83\u4eec\u662f\u7528\u6765\u4fdd\u5b58 ObjectWaiter \u5bf9\u8c61\u5217\u8868\uff08\u6bcf\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\u90fd\u4f1a\u88ab\u5c01\u88c5\u4e3a ObjectWaiter \u5bf9\u8c61\uff09\uff0c\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\u4e0d\u518d\u53d9\u8ff0(C++\u5b9e\u73b0\u7684\uff0c\u6211\u4e5f\u6ca1\u770b\u8fc7)\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u5f20\u56fe\u6765\u7b80\u5355\u6982\u8ff0\u5b83\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5176\u4e2d\uff1a Owner \uff1a\u521d\u59cb\u5316\u4e3a NULL\uff0c\u5f53\u7ebf\u7a0b\u6210\u529f\u62e5\u6709\u8be5\u9501\u65f6\u4fdd\u5b58\u7ebf\u7a0b\u552f\u4e00\u6807\u8bc6\uff0c\u9501\u88ab\u91ca\u653e\u540e\u53c8\u7f6e\u4e3a NULL\u3002 EntryQ \uff1a\u5173\u8054\u4e00\u4e2a\u7cfb\u7edf\u4e92\u65a5\u9501\uff08semaphore\uff09\uff0c\u963b\u585e\u6240\u6709\u8bd5\u56fe\u9501\u4f4fmonitor record\u5931\u8d25\u7684\u7ebf\u7a0b\u3002 RcThis :\u8868\u793ablocked\u6216waiting\u5728\u8be5monitor record\u4e0a\u7684\u6240\u6709\u7ebf\u7a0b\u7684\u4e2a\u6570\u3002 Nest :\u7528\u6765\u5b9e\u73b0\u91cd\u5165\u9501\u7684\u8ba1\u6570\u3002 HashCode :\u4fdd\u5b58\u4ece\u5bf9\u8c61\u5934\u62f7\u8d1d\u8fc7\u6765\u7684HashCode\u503c\uff08\u53ef\u80fd\u8fd8\u5305\u542bGC age\uff09\u3002 Candidate :\u7528\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u963b\u585e\u6216\u7b49\u5f85\u7ebf\u7a0b\u5524\u9192\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6210\u529f\u62e5\u6709\u9501\uff0c\u5982\u679c\u6bcf\u6b21\u524d\u4e00\u4e2a\u91ca\u653e\u9501\u7684\u7ebf\u7a0b\u5524\u9192\u6240\u6709\u6b63\u5728\u963b\u585e\u6216\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u4f1a\u5f15\u8d77\u4e0d\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff08\u4ece\u963b\u585e\u5230\u5c31\u7eea\u7136\u540e\u56e0\u4e3a\u7ade\u4e89\u9501\u5931\u8d25\u53c8\u88ab\u963b\u585e\uff09\u4ece\u800c\u5bfc\u81f4\u6027\u80fd\u4e25\u91cd\u4e0b\u964d\u3002Candidate\u53ea\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u503c0\u8868\u793a\u6ca1\u6709\u9700\u8981\u5524\u9192\u7684\u7ebf\u7a0b1\u8868\u793a\u8981\u5524\u9192\u4e00\u4e2a\u7ee7\u4efb\u7ebf\u7a0b\u6765\u7ade\u4e89\u9501\u3002 \u6458\u81ea\uff1a \u3010\u6b7b\u78d5Java\u5e76\u53d1\u3011\u2014\u2013\u6df1\u5165\u5206\u6790synchronized\u7684\u5b9e\u73b0\u539f\u7406 Java \u4e2d\u9501\u7684\u4f18\u5316 \u00b6 Jdk 1.6 \u5bf9\u9501\u7684\u5b9e\u73b0\u505a\u4e86\u5927\u91cf\u7684\u4f18\u5316\uff08\u8f7b\u91cf\u7ea7\u9501\uff0c\u504f\u5411\u9501\uff0c\u81ea\u65cb\u9501\uff0c\u9002\u5e94\u6027\u81ea\u65cb\u9501\uff0c\u9501\u6d88\u9664\uff0c\u9501\u7c97\u5316\uff09\uff0c\u9501\u4e3b\u8981\u5b58\u5728\u56db\u79cd\u72b6\u6001\uff08\u4f9d\u6b21\uff09\uff1a\u65e0\u9501\u72b6\u6001\uff0c\u504f\u5411\u9501\u72b6\u6001\uff0c\u8f7b\u91cf\u7ea7\u9501\u72b6\u6001\uff0c\u91cd\u91cf\u7ea7\u9501\u72b6\u6001\u3002\u5b83\u4eec\u4f1a\u968f\u7740\u9501\u7ade\u4e89\u7684\u6fc0\u70c8\u800c\u5347\u7ea7\uff0c\u9501\u53ea\u80fd\u5347\u7ea7\u4e0d\u80fd\u964d\u7ea7\uff08\u4e3a\u4e86\u63d0\u9ad8\u83b7\u5f97\u9501\u548c\u91ca\u653e\u9501\u7684\u6548\u7387\uff09\u3002 \u81ea\u65cb\u9501 \u00b6 \u9002\u5e94\u6027\u81ea\u65cb\u9501 \u00b6 \u9501\u6d88\u9664 \u00b6 \u9501\u7c97\u5316 \u00b6 \u504f\u5411\u9501 \u00b6 \u8f7b\u91cf\u7ea7\u9501 \u00b6 \u91cd\u91cf\u7ea7\u9501 \u00b6 \u901a\u8fc7\u5bf9\u8c61\u5185\u90e8\u7684\u76d1\u89c6\u5668 monitor \u5b9e\u73b0\uff0c\u800c monitor \u7684\u672c\u8d28\u662f\u4f9d\u8d56\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7684 Mutex Lock \u5b9e\u73b0\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u9700\u8981\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u5207\u6362\uff0c\u5207\u6362\u6210\u672c\u975e\u5e38\u9ad8\u3002 \u53c2\u8003\u6587\u7ae0\uff1a Biased Locking in HotSpot JVM\u5185\u90e8\u7ec6\u8282\u4e4b\u4e00\uff1asynchronized\u5173\u952e\u5b57\u53ca\u5b9e\u73b0\u7ec6\u8282(\u8f7b\u91cf\u7ea7\u9501Lightweight Locking) \u3010\u6b7b\u78d5Java\u5e76\u53d1\u3011\u2014\u2013\u6df1\u5165\u5206\u6790synchronized\u7684\u5b9e\u73b0\u539f\u7406","title":"Synchronized \u5b66\u4e60\u7b14\u8bb0"},{"location":"java/synchronized/#_1","text":"Synchronized \u4fdd\u8bc1\u4e86\u65b9\u6cd5\u6216\u8005\u4ee3\u7801\u5757\u5728\u8fd0\u884c\u65f6\uff0c\u540c\u4e00\u65f6\u95f4\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\uff0c\u5e76\u4fdd\u8bc1\u4e86\u5bf9\u5171\u4eab\u53d8\u91cf\u7684\u5185\u5b58\u53ef\u89c1\u6027\u3002 Java \u4e2d synchronized \u96c6\u4e2d\u5b9e\u73b0\u65b9\u6cd5\uff1a \u975e\u9759\u6001\u540c\u6b65\u65b9\u6cd5\uff1a\u9501\u4f4f\u5f53\u524d\u5b9e\u4f8b\u5bf9\u8c61 1 2 3 public synchronized void test () { } \u9759\u6001\u540c\u6b65\u65b9\u6cd5\uff1a\u9501\u4f4f\u5f53\u524d\u7c7b\u7684 class \u5bf9\u8c61 1 2 3 public static synchronized void test () { } \u540c\u6b65\u4ee3\u7801\u5757\uff1a\u9501\u4f4f\u62ec\u53f7\u4e2d\u7684\u5bf9\u8c61 1 2 3 4 5 public void test () { synchronized ( this ) { } } \u6211\u4eec\u5229\u7528\u5de5\u5177\u67e5\u770b\u751f\u6210\u7684 class \u6587\u4ef6\uff0c\u751f\u6210\u7684 class \u6587\u4ef6\u5982\u4e0b\uff1a \u4ece\u4ee5\u4e0a class \u6587\u4ef6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u540c\u6b65\u4ee3\u7801\u5757\u662f\u901a\u8fc7 monitorenter \u548c monitorexit \u6765\u5b9e\u73b0\u7684\uff0c\u540c\u6b65\u65b9\u6cd5\u662f\u4f9d\u9760\u65b9\u6cd5\u4fee\u9970\u7b26\u4e2d\u7684 ACC_SYNCHRONIZED \u5b9e\u73b0\u3002 \u540c\u6b65\u4ee3\u7801\u5757\uff1amoniterenter \u6307\u4ee4\u4f1a\u63d2\u5165\u5230\u540c\u6b65\u4ee3\u7801\u5757\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0cmoniterexit \u63d2\u5165\u5230\u540c\u6b65\u4ee3\u7801\u5757\u7ed3\u675f\u7684\u4f4d\u7f6e\uff0cJVM \u9700\u8981\u4fdd\u8bc1\u6bcf\u4e2a monitorenter \u90fd\u6709\u4e00\u4e2a monitorexit \u76f8\u5bf9\u5e94\u3002\u4efb\u4f55\u5bf9\u8c61\u90fd\u6709\u4e00\u4e2a monitor \u4e0e\u4e4b\u76f8\u5173\u8054\uff0c\u5f53 monitor \u88ab\u6301\u6709\u540e\uff0c\u5b83\u5c06\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u3002\u7ebf\u7a0b\u6267\u884c\u5230 moniterenter \u6307\u4ee4\u65f6\uff0c\u5c06\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u5f53\u524d\u5bf9\u8c61\u5bf9\u5e94\u7684 monitor \u6240\u6709\u6743\uff08\u8fd9\u4e2a\u8fc7\u7a0b\u5c31\u662f\u83b7\u53d6\u9501\uff09\u3002 \u540c\u6b65\u65b9\u6cd5\uff1a\u540c\u6b65\u65b9\u6cd5\u4e2d\u6ca1\u6709 monitorenter \u548c monitorexit\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5728 flags \u4e2d\u6dfb\u52a0\u4e86 ACC_SYNCHRONIZED \u6807\u8bc6\uff0cJVM \u901a\u8fc7\u8be5 ACC_SYNCHRONIZED \u8bbf\u95ee\u6807\u5fd7\u6765\u8fa8\u522b\u4e00\u4e2a\u65b9\u6cd5\u662f\u5426\u58f0\u660e\u4e3a\u540c\u6b65\u65b9\u6cd5\uff0c\u4ece\u800c\u6267\u884c\u76f8\u5e94\u7684\u540c\u6b65\u8c03\u7528\uff08\u65b9\u6cd5\u8c03\u7528\u65f6\uff0c\u8c03\u7528\u6307\u4ee4\u5c06\u4f1a\u68c0\u67e5\u65b9\u6cd5\u662f\u5426\u542b\u6709 ACC_SYNCHRONIZED \u8bbf\u95ee\u6807\u5fd7\uff0c\u5982\u679c\u6709\uff0c\u8c03\u7528\u7ebf\u7a0b\u5c06\u4f1a\u5148\u6301\u6709 monitor\u3002\u5982\u679c\u540c\u6b65\u65b9\u6cd5\u6267\u884c\u671f\u95f4\u629b\u51fa\u4e86\u5f02\u5e38\uff0c\u800c\u4e14\u5728\u65b9\u6cd5\u5185\u90e8\u65e0\u6cd5\u5904\u7406\u5f02\u5e38\uff0c\u5219\u8fd9\u4e2a\u65b9\u6cd5\u6240\u6301\u6709\u7684 monitor \u5c06\u4f1a\u5728\u5f02\u5e38\u629b\u5230\u540c\u6b65\u65b9\u6cd5\u4e4b\u5916\u65f6\u81ea\u52a8\u91ca\u653e\uff09\u3002\u4f7f\u7528\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u6216\u65b9\u6cd5\u6240\u5c5e Class \u5728 JVM \u7684\u5185\u90e8\u5bf9\u8c61\u8868\u793a Klass \u505a\u4e3a\u9501\u5bf9\u8c61\u3002 \u5173\u4e8e monitorenter \u548c moniterexit \u8fd9\u4e24\u6761\u6307\u4ee4 \u5728 JVM \u7684\u89c4\u8303\u4e2d\u6709\u8fd9\u6837\u4e00\u53e5\u8bdd\uff1a Note Each object is associated with a monitor. A monitor is locked if and only if it has an owner. The thread that executes monitorenter attempts to gain ownership of the monitor associated with objectref, as follows: \u2022 If the entry count of the monitor associated with objectref is zero, the thread enters the monitor and sets its entry count to one. The thread is then the owner of the monitor. \u2022 If the thread already owns the monitor associated with objectref, it reenters the monitor, incrementing its entry count. \u2022 If another thread already owns the monitor associated with objectref, the thread blocks until the monitor\u2019s entry count is zero, then tries again to gain ownership. \u4ee5\u4e0a\u5f15\u7528\u4e5f\u8bf4\u660e\u4e86\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5173\u8054\u4e86\u4e00\u4e2a monitor\uff0c\u5982\u679c\u4e00\u4e2amonitor\u88ab\u5360\u7528\u5219\u5b83\u5904\u4e8e\u9501\u5b9a\u72b6\u6001\u3002\u7ebf\u7a0b\u5728\u6267\u884c monitorenter \u6307\u4ee4\u65f6\u4f1a\u5c1d\u8bd5\u83b7\u53d6\u5bf9\u8c61\u5173\u8054\u7684 monitor \u7684\u6240\u6709\u6743\u3002 \u5982\u679c monitor \u7684\u8fdb\u5165\u6570\u4e3a0\uff0c\u5219\u8be5\u7ebf\u7a0b\u8fdb\u5165 monitor\uff0c\u5e76\u5c06\u8fdb\u5165\u6570\u8bbe\u7f6e\u4e3a1\uff0c\u8be5\u7ebf\u7a0b\u4e3a\u8be5 monitor \u7684\u6240\u6709\u8005\u3002 \u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u7ecf\u5360\u6709\u4e86\u5bf9\u8c61\u5173\u8054\u7684 monitor\uff0c\u5b83\u4f1a\u91cd\u65b0\u8fdb\u5165\uff0c\u5e76\u5c06\u8fdb\u5165\u6570\u52a01\u3002 \u5982\u679c\u5df2\u7ecf\u6709\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5360\u6709\u4e86\u8be5 monitor\uff0c\u5219\u8be5\u7ebf\u7a0b\u4f1a\u963b\u585e\u76f4\u5230 monitor \u7684\u8fdb\u5165\u6570\u4e3a0\uff0c\u7136\u540e\u5c1d\u8bd5\u83b7\u53d6\u6240\u6709\u6743\u3002 Note The thread that executes monitorexit must be the owner of the monitor associated with the instance referenced by objectref. The thread decrements the entry count of the monitor associated with objectref. If as a result the value of the entry count is zero, the thread exits the monitor and is no longer its owner. Other threads that are blocking to enter the monitor are allowed to attempt to do so. \u5927\u81f4\u610f\u601d\u662f\uff1a\u6267\u884c monitorexit \u7684\u7ebf\u7a0b\u5fc5\u987b\u662f objectref \u6240\u5bf9\u5e94\u7684 monitor \u7684\u6240\u6709\u8005\u3002\u8be5\u6307\u4ee4\u6267\u884c\u65f6\uff0c\u7ebf\u7a0b\u4f1a\u5c06 monitor \u7684\u8fdb\u5165\u6570\u51cf1\u3002\u5982\u679c\u8fdb\u5165\u6570\u51cf1\u4e4b\u540e\u4e3a0\uff0c\u5219\u8be5\u7ebf\u7a0b\u9000\u51fa monitor \u5e76\u4e14\u4e0d\u518d\u662f\u5b83\u7684\u6240\u6709\u8005\u3002\u88ab\u963b\u585e\u7684\u5176\u4ed6\u7ebf\u7a0b\u5c06\u5141\u8bb8\u5c1d\u8bd5\u83b7\u53d6\u6240\u6709\u6743\u3002","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"java/synchronized/#java-monitor","text":"","title":"Java \u5bf9\u8c61\u5934\u548c Monitor"},{"location":"java/synchronized/#java","text":"\u5bf9\u8c61\u5728\u5806\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u5206\u4e3a\u4e09\u5757\u533a\u57df\uff1a\u5bf9\u8c61\u5934\u3001\u5b9e\u4f8b\u6570\u636e\u548c\u5bf9\u5176\u586b\u5145\u3002 \u5b9e\u4f8b\u53d8\u91cf\uff1a\u5b58\u653e\u7c7b\u548c\u7236\u7c7b\u7684\u5c5e\u6027\u4fe1\u606f\uff0c\u5982\u679c\u662f\u6570\u7ec4\uff0c\u8fd8\u5305\u62ec\u6570\u7ec4\u7684\u957f\u5ea6\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u4e3a4\u5b57\u8282\u3002 \u586b\u5145\u6570\u636e\uff1aJVM \u8981\u6c42\u5bf9\u8c61\u7684\u5176\u5b9e\u5730\u5740\u5fc5\u987b\u4e3a8\u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u6240\u4ee5\u6709\u53ef\u80fd\u6570\u636e\u9700\u8981\u586b\u5145\uff08\u975e\u5fc5\u987b\uff09\u3002 Java \u7684\u5bf9\u8c61\u5934\u662f\u5b9e\u73b0 synchronized \u7684\u9501\u5bf9\u8c61\u7684\u57fa\u7840\u3002\u4e00\u822c\u60c5\u51b5\uff0csynchronized \u4f7f\u7528\u7684\u9501\u5bf9\u8c61\u90fd\u5b58\u5728 Java \u5bf9\u8c61\u5934\u4e2d\u3002JVM \u91c7\u7528\u4e24\u4e2a\u5b57\u8282\u6765\u5b58\u50a8\u5bf9\u8c61\u5934\uff08\u5982\u679c\u5bf9\u8c61\u662f\u6570\u7ec4\uff0c\u5219\u4f7f\u7528\u4e09\u4e2a\u5b57\u8282\uff0c\u591a\u51fa\u6765\u7684\u5b57\u8282\u5b58\u50a8\u6570\u7ec4\u957f\u5ea6\uff09\uff0c\u4e3b\u8981\u662f\u7531 Mark Word \u548c\u7c7b\u578b\u6307\u9488\u7ec4\u6210\u3002 \u865a\u62df\u673a\u4f4d\u6570 \u5934\u5bf9\u8c61\u7ed3\u6784 \u8bf4\u660e 32/64bit Mark Word \u5b58\u50a8\u5bf9\u8c61\u7684 hashCode\uff0c\u9501\u4fe1\u606f\u3001\u5206\u4ee3\u5e74\u9f84\u3001GC\u6807\u5fd7\u3001\u504f\u5411\u7ebf\u7a0bID\u3001\u504f\u5411\u65f6\u95f4\u6233\u7b49\u4fe1\u606f 32/64bit Class Metadata Address \u7c7b\u578b\u6307\u9488\u6307\u5411\u5bf9\u8c61\u7684\u7c7b\u5143\u6570\u636e\uff0cJVM \u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u786e\u5b9a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b \u7531\u4e8e\u5bf9\u8c61\u5934\u7684\u4fe1\u606f\u662f\u4e0e\u5bf9\u8c61\u81ea\u8eab\u5b9a\u4e49\u7684\u6570\u636e\u6ca1\u6709\u5173\u7cfb\u7684\u989d\u5916\u5b58\u50a8\u6210\u672c\uff0c\u56e0\u6b64\u8003\u8651\u5230 JVM \u7684\u7a7a\u95f4\u6548\u7387\uff0cMark Word \u88ab\u8bbe\u8ba1\u6210\u4e00\u4e2a\u975e\u56fa\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u5b58\u50a8\u66f4\u591a\u6709\u6548\u7684\u6570\u636e\uff0c\u5b83\u4f1a\u6839\u636e\u5bf9\u8c61\u72b6\u6001\u7684\u53d8\u5316\u590d\u7528\u81ea\u5df1\u7684\u5b58\u50a8\u7a7a\u95f4\u3002Mark Word \u4f1a\u6839\u636e\u7a0b\u5e8f\u7684\u8fd0\u884c\u800c\u53d1\u751f\u53d8\u5316\uff08\u4ee5\u4e0b\u662f32\u4f4d\u865a\u62df\u673a\u9ed8\u8ba4\u7684\u5b58\u50a8\u7ed3\u6784\u548c\u5176\u4ed6\u53d8\u5316\u72b6\u6001\uff09\u3002 32\u4f4d JVM \u7684 Mark Word \u9ed8\u8ba4\u5b58\u50a8\u7ed3\u6784\uff1a \u9501\u72b6\u6001 25bit 4bit 1bit\u662f\u5426\u662f\u504f\u5411\u9501 2bit \u9501\u6807\u5fd7\u4f4d \u65e0\u9501\u72b6\u6001 \u5bf9\u8c61HashCode \u5bf9\u8c61\u5206\u4ee3\u5e74\u9f84 0 01 \u72b6\u6001\u53d8\u5316\uff0832\u4f4d\u865a\u62df\u673a\uff09\uff1a \u5176\u4e2d\u8f7b\u91cf\u7ea7\u9501\u548c\u504f\u5411\u9501\u65f6\u5728 Java 6 \u5bf9 synchronized \u9501\u8fdb\u884c\u4f18\u5316\u540e\u65b0\u589e\u7684\u3002","title":"Java \u5bf9\u8c61\u5934"},{"location":"java/synchronized/#monitor","text":"Monitor \u53ef\u4ee5\u88ab\u7406\u89e3\u4e3a\u76d1\u89c6\u5668\uff0c\u5728 Hotspot \u4e2d\uff0c\u5b83\u662f\u7531 ObjectMonitor \u5b9e\u73b0\u7684\uff08\u4f4d\u4e8e HotSpot \u865a\u62df\u673a\u6e90\u7801\u7684 ObjectMonitor.hpp\u6587\u4ef6\u4e2d\uff0cC++\u5b9e\u73b0\uff09\uff0c\u5176\u4e3b\u8981\u6570\u636e\u7ed3\u6784\u4e3a\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ObjectMonitor () { _header = NULL ; _count = 0 ; //\u8bb0\u5f55\u4e2a\u6570 _waiters = 0 , _recursions = 0 ; _object = NULL ; _owner = NULL ; _WaitSet = NULL ; //\u5904\u4e8ewait\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u4f1a\u88ab\u52a0\u5165\u5230_WaitSet _WaitSetLock = 0 ; _Responsible = NULL ; _succ = NULL ; _cxq = NULL ; FreeNext = NULL ; _EntryList = NULL ; //\u5904\u4e8e\u7b49\u5f85\u9501block\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u4f1a\u88ab\u52a0\u5165\u5230\u8be5\u5217\u8868 _SpinFreq = 0 ; _SpinClock = 0 ; OwnerIsThread = 0 ; } ObjectMonitor \u4e2d\u6709\u4e24\u4e2a\u961f\u5217 \u2014\u2014 _WaitSet, _EntryList\uff08\u5f53\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u4e00\u6bb5\u540c\u6b65\u4ee3\u7801\u65f6\uff0c\u9996\u5148\u4f1a\u8fdb\u5165 _EntryList \u96c6\u5408\uff0c\u5f53\u7ebf\u7a0b\u62e5\u6709\u5bf9\u8c61\u7684 monitor \u540e\uff0cObjectMonitor \u4f1a\u5c06 _owner \u53d8\u91cf\u8bbe\u7f6e\u4e3a\u5f53\u524d\u7ebf\u7a0b\uff0c\u5e76\u5c06\u8ba1\u6570\u5668 _count \u52a01\uff0c\u5982\u679c\u8be5\u7ebf\u7a0b\u8c03\u7528\u4e86 wait() \u65b9\u6cd5\uff0c\u5b83\u5c06\u4f1a\u91ca\u653e\u5f53\u524d\u6301\u6709\u7684 monitor\uff0c _owner \u5c06\u6062\u590d\u4e3a NULL\uff0c\u540c\u65f6\u8be5\u7ebf\u7a0b\u4f1a\u8fdb\u5165 _WaitSet \u7b49\u5f85\u88ab\u5524\u9192\uff09\u3002\u5b83\u4eec\u662f\u7528\u6765\u4fdd\u5b58 ObjectWaiter \u5bf9\u8c61\u5217\u8868\uff08\u6bcf\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\u90fd\u4f1a\u88ab\u5c01\u88c5\u4e3a ObjectWaiter \u5bf9\u8c61\uff09\uff0c\u5e95\u5c42\u5b9e\u73b0\u539f\u7406\u4e0d\u518d\u53d9\u8ff0(C++\u5b9e\u73b0\u7684\uff0c\u6211\u4e5f\u6ca1\u770b\u8fc7)\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u5f20\u56fe\u6765\u7b80\u5355\u6982\u8ff0\u5b83\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5176\u4e2d\uff1a Owner \uff1a\u521d\u59cb\u5316\u4e3a NULL\uff0c\u5f53\u7ebf\u7a0b\u6210\u529f\u62e5\u6709\u8be5\u9501\u65f6\u4fdd\u5b58\u7ebf\u7a0b\u552f\u4e00\u6807\u8bc6\uff0c\u9501\u88ab\u91ca\u653e\u540e\u53c8\u7f6e\u4e3a NULL\u3002 EntryQ \uff1a\u5173\u8054\u4e00\u4e2a\u7cfb\u7edf\u4e92\u65a5\u9501\uff08semaphore\uff09\uff0c\u963b\u585e\u6240\u6709\u8bd5\u56fe\u9501\u4f4fmonitor record\u5931\u8d25\u7684\u7ebf\u7a0b\u3002 RcThis :\u8868\u793ablocked\u6216waiting\u5728\u8be5monitor record\u4e0a\u7684\u6240\u6709\u7ebf\u7a0b\u7684\u4e2a\u6570\u3002 Nest :\u7528\u6765\u5b9e\u73b0\u91cd\u5165\u9501\u7684\u8ba1\u6570\u3002 HashCode :\u4fdd\u5b58\u4ece\u5bf9\u8c61\u5934\u62f7\u8d1d\u8fc7\u6765\u7684HashCode\u503c\uff08\u53ef\u80fd\u8fd8\u5305\u542bGC age\uff09\u3002 Candidate :\u7528\u6765\u907f\u514d\u4e0d\u5fc5\u8981\u7684\u963b\u585e\u6216\u7b49\u5f85\u7ebf\u7a0b\u5524\u9192\uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u6210\u529f\u62e5\u6709\u9501\uff0c\u5982\u679c\u6bcf\u6b21\u524d\u4e00\u4e2a\u91ca\u653e\u9501\u7684\u7ebf\u7a0b\u5524\u9192\u6240\u6709\u6b63\u5728\u963b\u585e\u6216\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u4f1a\u5f15\u8d77\u4e0d\u5fc5\u8981\u7684\u4e0a\u4e0b\u6587\u5207\u6362\uff08\u4ece\u963b\u585e\u5230\u5c31\u7eea\u7136\u540e\u56e0\u4e3a\u7ade\u4e89\u9501\u5931\u8d25\u53c8\u88ab\u963b\u585e\uff09\u4ece\u800c\u5bfc\u81f4\u6027\u80fd\u4e25\u91cd\u4e0b\u964d\u3002Candidate\u53ea\u6709\u4e24\u79cd\u53ef\u80fd\u7684\u503c0\u8868\u793a\u6ca1\u6709\u9700\u8981\u5524\u9192\u7684\u7ebf\u7a0b1\u8868\u793a\u8981\u5524\u9192\u4e00\u4e2a\u7ee7\u4efb\u7ebf\u7a0b\u6765\u7ade\u4e89\u9501\u3002 \u6458\u81ea\uff1a \u3010\u6b7b\u78d5Java\u5e76\u53d1\u3011\u2014\u2013\u6df1\u5165\u5206\u6790synchronized\u7684\u5b9e\u73b0\u539f\u7406","title":"Monitor"},{"location":"java/synchronized/#java_1","text":"Jdk 1.6 \u5bf9\u9501\u7684\u5b9e\u73b0\u505a\u4e86\u5927\u91cf\u7684\u4f18\u5316\uff08\u8f7b\u91cf\u7ea7\u9501\uff0c\u504f\u5411\u9501\uff0c\u81ea\u65cb\u9501\uff0c\u9002\u5e94\u6027\u81ea\u65cb\u9501\uff0c\u9501\u6d88\u9664\uff0c\u9501\u7c97\u5316\uff09\uff0c\u9501\u4e3b\u8981\u5b58\u5728\u56db\u79cd\u72b6\u6001\uff08\u4f9d\u6b21\uff09\uff1a\u65e0\u9501\u72b6\u6001\uff0c\u504f\u5411\u9501\u72b6\u6001\uff0c\u8f7b\u91cf\u7ea7\u9501\u72b6\u6001\uff0c\u91cd\u91cf\u7ea7\u9501\u72b6\u6001\u3002\u5b83\u4eec\u4f1a\u968f\u7740\u9501\u7ade\u4e89\u7684\u6fc0\u70c8\u800c\u5347\u7ea7\uff0c\u9501\u53ea\u80fd\u5347\u7ea7\u4e0d\u80fd\u964d\u7ea7\uff08\u4e3a\u4e86\u63d0\u9ad8\u83b7\u5f97\u9501\u548c\u91ca\u653e\u9501\u7684\u6548\u7387\uff09\u3002","title":"Java \u4e2d\u9501\u7684\u4f18\u5316"},{"location":"java/synchronized/#_2","text":"","title":"\u81ea\u65cb\u9501"},{"location":"java/synchronized/#_3","text":"","title":"\u9002\u5e94\u6027\u81ea\u65cb\u9501"},{"location":"java/synchronized/#_4","text":"","title":"\u9501\u6d88\u9664"},{"location":"java/synchronized/#_5","text":"","title":"\u9501\u7c97\u5316"},{"location":"java/synchronized/#_6","text":"","title":"\u504f\u5411\u9501"},{"location":"java/synchronized/#_7","text":"","title":"\u8f7b\u91cf\u7ea7\u9501"},{"location":"java/synchronized/#_8","text":"\u901a\u8fc7\u5bf9\u8c61\u5185\u90e8\u7684\u76d1\u89c6\u5668 monitor \u5b9e\u73b0\uff0c\u800c monitor \u7684\u672c\u8d28\u662f\u4f9d\u8d56\u4e8e\u5e95\u5c42\u64cd\u4f5c\u7cfb\u7edf\u7684 Mutex Lock \u5b9e\u73b0\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u9700\u8981\u4ece\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u7684\u5207\u6362\uff0c\u5207\u6362\u6210\u672c\u975e\u5e38\u9ad8\u3002 \u53c2\u8003\u6587\u7ae0\uff1a Biased Locking in HotSpot JVM\u5185\u90e8\u7ec6\u8282\u4e4b\u4e00\uff1asynchronized\u5173\u952e\u5b57\u53ca\u5b9e\u73b0\u7ec6\u8282(\u8f7b\u91cf\u7ea7\u9501Lightweight Locking) \u3010\u6b7b\u78d5Java\u5e76\u53d1\u3011\u2014\u2013\u6df1\u5165\u5206\u6790synchronized\u7684\u5b9e\u73b0\u539f\u7406","title":"\u91cd\u91cf\u7ea7\u9501"},{"location":"java/volatile/","tags":["java"],"text":"volatile \u5e94\u8be5\u7ecf\u5e38\u542c\u8bf4\u6216\u8005\u7528\u5230\u7684\u3002\u5b83\u5728\u5e76\u53d1\u7f16\u7a0b\u4e2d\u8d77\u5230\u4e86\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f volatile \u80fd\u7981\u6b62\u7f16\u8bd1\u5668\u548cCPU\u5bf9\u6307\u4ee4\u91cd\u6392\u5e8f \u5bf9 volatile \u53d8\u91cf\u7684\u64cd\u4f5c\u63d2\u5165\u5185\u5b58\u5c4f\u969c\uff0c\u4fdd\u8bc1\u5185\u5b58\u7684\u53ef\u89c1\u6027 \u4ee5\u4e0b\u662f\u6211\u5b66\u4e60 volatile \u7684\u7b14\u8bb0\uff0c\u5728\u8fd9\u91cc\u8bb0\u5f55\u4e00\u4e0b\u3002 Volatile\u5728JVM\u4e2d\u5982\u4f55\u5b9e\u73b0 \u00b6 \u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\u5728\u7f16\u8bd1\u4e4b\u540e\u7684\u6307\u4ee4\u4e2d\uff0c\u5b9a\u4e49\u53d8\u91cf\u7684 flags \u4f1a\u52a0\u4e0a ACC_VOLATILE \u6807\u5fd7\u3002 javap -v \u67e5\u770b\u5b57\u8282\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 Classfile / Users / leiyongqi / IdeaProjects / study / target / classes / com / keanu / io / study / concurrency / VolatileDemo . class Last modified 2019 - 10 - 15 ; size 583 bytes MD5 checksum 0 b39c03d7d60166f7ab82b07bc3fc58d Compiled from \"VolatileDemo.java\" public class com . keanu . io . study . concurrency . VolatileDemo minor version : 0 major version : 49 flags : ACC_PUBLIC , ACC_SUPER Constant pool : # 1 = Methodref # 6. # 23 // java/lang/Object.\"<init>\":()V # 2 = Fieldref # 3. # 24 // com/keanu/io/study/concurrency/VolatileDemo.i:I # 3 = Class # 25 // com/keanu/io/study/concurrency/VolatileDemo # 4 = Methodref # 3. # 23 // com/keanu/io/study/concurrency/VolatileDemo.\"<init>\":()V # 5 = Methodref # 3. # 26 // com/keanu/io/study/concurrency/VolatileDemo.incr:()V # 6 = Class # 27 // java/lang/Object # 7 = Utf8 i # 8 = Utf8 I # 9 = Utf8 < init > # 10 = Utf8 () V # 11 = Utf8 Code # 12 = Utf8 LineNumberTable # 13 = Utf8 LocalVariableTable # 14 = Utf8 this # 15 = Utf8 Lcom / keanu / io / study / concurrency / VolatileDemo ; # 16 = Utf8 incr # 17 = Utf8 main # 18 = Utf8 ( [ Ljava / lang / String ;) V # 19 = Utf8 args # 20 = Utf8 [ Ljava / lang / String ; # 21 = Utf8 SourceFile # 22 = Utf8 VolatileDemo . java # 23 = NameAndType # 9 : # 10 // \"<init>\":()V # 24 = NameAndType # 7 : # 8 // i:I # 25 = Utf8 com / keanu / io / study / concurrency / VolatileDemo # 26 = NameAndType # 16 : # 10 // incr:()V # 27 = Utf8 java / lang / Object { volatile int i ; descriptor : I flags : ACC_VOLATILE public com . keanu . io . study . concurrency . VolatileDemo (); descriptor : () V flags : ACC_PUBLIC Code : stack = 2 , locals = 1 , args_size = 1 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : aload_0 5 : iconst_0 6 : putfield # 2 // Field i:I 9 : return LineNumberTable : line 3 : 0 line 5 : 4 LocalVariableTable : Start Length Slot Name Signature 0 10 0 this Lcom / keanu / io / study / concurrency / VolatileDemo ; public void incr (); descriptor : () V flags : ACC_PUBLIC Code : stack = 3 , locals = 1 , args_size = 1 0 : aload_0 1 : dup 2 : getfield # 2 // Field i:I 5 : iconst_1 6 : iadd 7 : putfield # 2 // Field i:I 10 : return LineNumberTable : line 8 : 0 line 9 : 10 LocalVariableTable : Start Length Slot Name Signature 0 11 0 this Lcom / keanu / io / study / concurrency / VolatileDemo ; public static void main ( java . lang . String [] ); descriptor : ( [ Ljava / lang / String ;) V flags : ACC_PUBLIC , ACC_STATIC Code : stack = 2 , locals = 1 , args_size = 1 0 : new # 3 // class com/keanu/io/study/concurrency/VolatileDemo 3 : dup 4 : invokespecial # 4 // Method \"<init>\":()V 7 : invokevirtual # 5 // Method incr:()V 10 : return LineNumberTable : line 12 : 0 line 13 : 10 LocalVariableTable : Start Length Slot Name Signature 0 11 0 args [ Ljava / lang / String ; } SourceFile : \"VolatileDemo.java\" ACC_VOLATILE \u6807\u5fd7\u88ab\u5b9a\u4e49\u5728 JVM \u6e90\u7801\u7684 accessFlags.hpp \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // accessFlags.hpp bool is_volatile () const { return ( _flags & JVM_ACC_VOLATILE ) != 0 ; } // bytecodeInterpreter.cpp // \u5b58\u50a8\u53d8\u91cf\u65f6\uff0c\u5224\u65ad\u662f\u5426\u88ab volatile \u4fee\u9970 if ( cache -> is_volatile ()) { // \u5224\u65ad\u6570\u636e\u7c7b\u578b\uff0c\u6839\u636e\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5 if ( tos_type == itos ) { // int \u7c7b\u578b obj -> release_int_field_put ( field_offset , STACK_INT ( -1 )); } else if ( tos_type == atos ) { // obj \u5bf9\u8c61\u7c7b\u578b VERIFY_OOP ( STACK_OBJECT ( -1 )); obj -> release_obj_field_put ( field_offset , STACK_OBJECT ( -1 )); OrderAccess :: release_store ( & BYTE_MAP_BASE [( uintptr_t ) obj >> CardTableModRefBS :: card_shift ], 0 ); } else if ( tos_type == btos ) { // byte \u7c7b\u578b obj -> release_byte_field_put ( field_offset , STACK_INT ( -1 )); } else if ( tos_type == ltos ) { // long \u7c7b\u578b obj -> release_long_field_put ( field_offset , STACK_LONG ( -1 )); } // ... char, short, float, double \u7701\u7565 // \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u6267\u884c\u4e0b\u9762\u8fd9\u4e2a\u65b9\u6cd5 OrderAccess :: storeload (); } // oop.inline.cpp // release_int_field_put \u65b9\u6cd5\u5728\u6b64\u6587\u4ef6\u4e2d inline void oopDesc :: release_int_field_put ( int offset , jint contents ) { OrderAccess :: release_store ( int_field_addr ( offset ), contents ); } // release_store \u65b9\u6cd5\u5728 orderAccess.hpp \u4e2d\u5b9a\u4e49 // orderAccess.hpp static void release_store ( volatile jint * p , jint v ); //\u8fd8\u6709\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49 // \u5177\u4f53\u7684\u5b9e\u73b0\u6839\u636e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edfCPU\u8fdb\u884c\u5b9e\u73b0 Linux, Windows.. \u7b49\u7b49 CPU // \u4f8b\u5982\uff1aorderAccess_linux_x86.inline.hpp inline void OrderAccess::release_store ( volatile jint * p , jint v ) { * p = v ; } // \u6b64\u5904 volatile\uff0c\u8bed\u8a00\u7ea7\u522b\u7684\u5185\u5b58\u5c4f\u969c\u3002\u9632\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\uff0c\u5f3a\u5236\u5bf9\u7f13\u5b58\u4fee\u6539\uff0c\u7acb\u5373\u5199\u5165\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4f7f\u5176\u4ed6 CPU \u7684\u7f13\u5b58\u5931\u6548\u3002 \u5bf9\u6bcf\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u7684\u524d\u9762\u4f1a\u63d2\u5165 storestore barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u540e\u4f1a\u63d2\u5165 storeload barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u8bfb\u64cd\u4f5c\u4e4b\u524d\u63d2\u5165 loadload barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u8bfb\u64cd\u4f5c\u4e4b\u540e\u63d2\u5165 loadstore barrier\u3002 \u4ee5\u4e0a\u4ee3\u7801\u7b2c 23 \u884c\u8bc1\u5b9e\u4e86\u7b2c\u4e8c\u70b9\uff1a(\u5176\u4ed6\u7684\u53ef\u4ee5\u5728\u5176\u4ed6\u6e90\u7801\u4e2d\u627e\u5230) 1 2 3 4 5 6 7 8 9 OrderAccess :: storeload (); // \u8fd9\u662f\u5728\u5199\u64cd\u4f5c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6267\u884c\u7684\u65b9\u6cd5\u3002 // \u8be5\u65b9\u6cd5\u5728 orderAccess_linux_x86.inline.hpp \u4e2d\uff08\u6b64\u5904\u53ea\u770b\u8fd9\u4e00\u4e2a\u5b9e\u73b0\uff09 inline void OrderAccess::loadload () { acquire (); } inline void OrderAccess::storestore () { release (); } inline void OrderAccess::loadstore () { acquire (); } inline void OrderAccess::storeload () { fence (); } // fence() \u65b9\u6cd5\u4e2d\u4f1a\u5728\u6307\u4ee4\u4e4b\u524d\u52a0\u5165 lock \u524d\u7f00\u3002\uff08\u6c47\u7f16\u6307\u4ee4\uff09\u3002\u3002\u3002\u6c47\u7f16\u6307\u4ee4\u6ca1\u6709\u6df1\u5165\u7814\u7a76\uff0c\u4e0d\u8d34\u4ee3\u7801\u4e86\u3002 \u6240\u4ee5 volatile \u4fee\u9970\u7b26\u53ef\u4ee5\u4fdd\u8bc1\u5185\u5b58\u7684\u53ef\u89c1\u6027\uff08\u5185\u5b58\u5c4f\u969c\uff09\u3002 Volatile\u539f\u5b50\u6027\u95ee\u9898 \u00b6 volatile \u53d8\u91cf\u7684\u590d\u5408\u64cd\u4f5c\u662f\u65e0\u6cd5\u4fdd\u8bc1\u539f\u5b50\u6027\u95ee\u9898\u7684\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.keanu.io.study.concurrency ; public class VolatileDemo { volatile int i = 0 ; public void incr () { i ++ ; } public static void main ( String [] args ) { new VolatileDemo (). incr (); } } \u88ab JVM \u7f16\u8bd1\u4e4b\u540e\uff08\u4f7f\u7528 javap -c \u6307\u4ee4\u67e5\u770b\u5b57\u8282\u7801\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class com . keanu . io . study . concurrency . VolatileDemo { volatile int i ; public com . keanu . io . study . concurrency . VolatileDemo (); Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : aload_0 5 : iconst_0 6 : putfield # 2 // Field i:I 9 : return public void incr (); Code : 0 : aload_0 1 : dup 2 : getfield # 2 // Field i:I 5 : iconst_1 6 : iadd 7 : putfield # 2 // Field i:I 10 : return public static void main ( java . lang . String [] ); Code : 0 : new # 3 // class com/keanu/io/study/concurrency/VolatileDemo 3 : dup 4 : invokespecial # 4 // Method \"<init>\":()V 7 : invokevirtual # 5 // Method incr:()V 10 : return } \u53ef\u4ee5\u770b\u5230\uff0c\u7f16\u8bd1\u4e4b\u540e\u7684\u6307\u4ee4\u4e2d\uff0ci++\uff08\u590d\u5408\u64cd\u4f5c\uff09 \u7684\u64cd\u4f5c\u5206\u6210\u4e86 3\u6b65\uff0c\u4ee5\u4e0a\u4ee3\u7801\u7684 17\uff0c19\uff0c20 \u884c\u3002 getfield iadd putfield \u5f53\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u65f6\uff0c\u6709\u53ef\u80fd\u540c\u4e00\u65f6\u95f4\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u4e86 getfield \u6307\u4ee4\uff0c\u53ef\u80fd\u5c31\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u7684\u662f\u65e7\u503c\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u539f\u5b50\u6027\u95ee\u9898\u3002 \u5982\u4f55\u89e3\u51b3\u539f\u5b50\u6027\u95ee\u9898 \u00b6 \u53ef\u4ee5\u901a\u8fc7 synchronized \u5173\u952e\u5b57\u6765\u89e3\u51b3\uff0c\u907f\u514d\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\u3002synchronized \u5b9e\u73b0\u539f\u7406\u53ef\u4ee5\u53c2\u7167\u8fd9\u7bc7\u6587\u7ae0\uff1a Synchronized\u5b66\u4e60\u7b14\u8bb0","title":"Volatile \u5b66\u4e60\u7b14\u8bb0"},{"location":"java/volatile/#volatilejvm","text":"\u88ab volatile \u4fee\u9970\u7684\u53d8\u91cf\u5728\u7f16\u8bd1\u4e4b\u540e\u7684\u6307\u4ee4\u4e2d\uff0c\u5b9a\u4e49\u53d8\u91cf\u7684 flags \u4f1a\u52a0\u4e0a ACC_VOLATILE \u6807\u5fd7\u3002 javap -v \u67e5\u770b\u5b57\u8282\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 Classfile / Users / leiyongqi / IdeaProjects / study / target / classes / com / keanu / io / study / concurrency / VolatileDemo . class Last modified 2019 - 10 - 15 ; size 583 bytes MD5 checksum 0 b39c03d7d60166f7ab82b07bc3fc58d Compiled from \"VolatileDemo.java\" public class com . keanu . io . study . concurrency . VolatileDemo minor version : 0 major version : 49 flags : ACC_PUBLIC , ACC_SUPER Constant pool : # 1 = Methodref # 6. # 23 // java/lang/Object.\"<init>\":()V # 2 = Fieldref # 3. # 24 // com/keanu/io/study/concurrency/VolatileDemo.i:I # 3 = Class # 25 // com/keanu/io/study/concurrency/VolatileDemo # 4 = Methodref # 3. # 23 // com/keanu/io/study/concurrency/VolatileDemo.\"<init>\":()V # 5 = Methodref # 3. # 26 // com/keanu/io/study/concurrency/VolatileDemo.incr:()V # 6 = Class # 27 // java/lang/Object # 7 = Utf8 i # 8 = Utf8 I # 9 = Utf8 < init > # 10 = Utf8 () V # 11 = Utf8 Code # 12 = Utf8 LineNumberTable # 13 = Utf8 LocalVariableTable # 14 = Utf8 this # 15 = Utf8 Lcom / keanu / io / study / concurrency / VolatileDemo ; # 16 = Utf8 incr # 17 = Utf8 main # 18 = Utf8 ( [ Ljava / lang / String ;) V # 19 = Utf8 args # 20 = Utf8 [ Ljava / lang / String ; # 21 = Utf8 SourceFile # 22 = Utf8 VolatileDemo . java # 23 = NameAndType # 9 : # 10 // \"<init>\":()V # 24 = NameAndType # 7 : # 8 // i:I # 25 = Utf8 com / keanu / io / study / concurrency / VolatileDemo # 26 = NameAndType # 16 : # 10 // incr:()V # 27 = Utf8 java / lang / Object { volatile int i ; descriptor : I flags : ACC_VOLATILE public com . keanu . io . study . concurrency . VolatileDemo (); descriptor : () V flags : ACC_PUBLIC Code : stack = 2 , locals = 1 , args_size = 1 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : aload_0 5 : iconst_0 6 : putfield # 2 // Field i:I 9 : return LineNumberTable : line 3 : 0 line 5 : 4 LocalVariableTable : Start Length Slot Name Signature 0 10 0 this Lcom / keanu / io / study / concurrency / VolatileDemo ; public void incr (); descriptor : () V flags : ACC_PUBLIC Code : stack = 3 , locals = 1 , args_size = 1 0 : aload_0 1 : dup 2 : getfield # 2 // Field i:I 5 : iconst_1 6 : iadd 7 : putfield # 2 // Field i:I 10 : return LineNumberTable : line 8 : 0 line 9 : 10 LocalVariableTable : Start Length Slot Name Signature 0 11 0 this Lcom / keanu / io / study / concurrency / VolatileDemo ; public static void main ( java . lang . String [] ); descriptor : ( [ Ljava / lang / String ;) V flags : ACC_PUBLIC , ACC_STATIC Code : stack = 2 , locals = 1 , args_size = 1 0 : new # 3 // class com/keanu/io/study/concurrency/VolatileDemo 3 : dup 4 : invokespecial # 4 // Method \"<init>\":()V 7 : invokevirtual # 5 // Method incr:()V 10 : return LineNumberTable : line 12 : 0 line 13 : 10 LocalVariableTable : Start Length Slot Name Signature 0 11 0 args [ Ljava / lang / String ; } SourceFile : \"VolatileDemo.java\" ACC_VOLATILE \u6807\u5fd7\u88ab\u5b9a\u4e49\u5728 JVM \u6e90\u7801\u7684 accessFlags.hpp \u4e2d\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 // accessFlags.hpp bool is_volatile () const { return ( _flags & JVM_ACC_VOLATILE ) != 0 ; } // bytecodeInterpreter.cpp // \u5b58\u50a8\u53d8\u91cf\u65f6\uff0c\u5224\u65ad\u662f\u5426\u88ab volatile \u4fee\u9970 if ( cache -> is_volatile ()) { // \u5224\u65ad\u6570\u636e\u7c7b\u578b\uff0c\u6839\u636e\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u6267\u884c\u4e0d\u540c\u7684\u65b9\u6cd5 if ( tos_type == itos ) { // int \u7c7b\u578b obj -> release_int_field_put ( field_offset , STACK_INT ( -1 )); } else if ( tos_type == atos ) { // obj \u5bf9\u8c61\u7c7b\u578b VERIFY_OOP ( STACK_OBJECT ( -1 )); obj -> release_obj_field_put ( field_offset , STACK_OBJECT ( -1 )); OrderAccess :: release_store ( & BYTE_MAP_BASE [( uintptr_t ) obj >> CardTableModRefBS :: card_shift ], 0 ); } else if ( tos_type == btos ) { // byte \u7c7b\u578b obj -> release_byte_field_put ( field_offset , STACK_INT ( -1 )); } else if ( tos_type == ltos ) { // long \u7c7b\u578b obj -> release_long_field_put ( field_offset , STACK_LONG ( -1 )); } // ... char, short, float, double \u7701\u7565 // \u6267\u884c\u5b8c\u6bd5\u540e\uff0c\u6267\u884c\u4e0b\u9762\u8fd9\u4e2a\u65b9\u6cd5 OrderAccess :: storeload (); } // oop.inline.cpp // release_int_field_put \u65b9\u6cd5\u5728\u6b64\u6587\u4ef6\u4e2d inline void oopDesc :: release_int_field_put ( int offset , jint contents ) { OrderAccess :: release_store ( int_field_addr ( offset ), contents ); } // release_store \u65b9\u6cd5\u5728 orderAccess.hpp \u4e2d\u5b9a\u4e49 // orderAccess.hpp static void release_store ( volatile jint * p , jint v ); //\u8fd8\u6709\u5bf9\u5176\u4ed6\u6570\u636e\u7c7b\u578b\u7684\u5b9a\u4e49 // \u5177\u4f53\u7684\u5b9e\u73b0\u6839\u636e\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edfCPU\u8fdb\u884c\u5b9e\u73b0 Linux, Windows.. \u7b49\u7b49 CPU // \u4f8b\u5982\uff1aorderAccess_linux_x86.inline.hpp inline void OrderAccess::release_store ( volatile jint * p , jint v ) { * p = v ; } // \u6b64\u5904 volatile\uff0c\u8bed\u8a00\u7ea7\u522b\u7684\u5185\u5b58\u5c4f\u969c\u3002\u9632\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\uff0c\u5f3a\u5236\u5bf9\u7f13\u5b58\u4fee\u6539\uff0c\u7acb\u5373\u5199\u5165\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4f7f\u5176\u4ed6 CPU \u7684\u7f13\u5b58\u5931\u6548\u3002 \u5bf9\u6bcf\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u7684\u524d\u9762\u4f1a\u63d2\u5165 storestore barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u540e\u4f1a\u63d2\u5165 storeload barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u8bfb\u64cd\u4f5c\u4e4b\u524d\u63d2\u5165 loadload barrier\u3002 \u5bf9\u6bcf\u4e2a volatile \u8bfb\u64cd\u4f5c\u4e4b\u540e\u63d2\u5165 loadstore barrier\u3002 \u4ee5\u4e0a\u4ee3\u7801\u7b2c 23 \u884c\u8bc1\u5b9e\u4e86\u7b2c\u4e8c\u70b9\uff1a(\u5176\u4ed6\u7684\u53ef\u4ee5\u5728\u5176\u4ed6\u6e90\u7801\u4e2d\u627e\u5230) 1 2 3 4 5 6 7 8 9 OrderAccess :: storeload (); // \u8fd9\u662f\u5728\u5199\u64cd\u4f5c\u5b8c\u6bd5\u4e4b\u540e\uff0c\u6267\u884c\u7684\u65b9\u6cd5\u3002 // \u8be5\u65b9\u6cd5\u5728 orderAccess_linux_x86.inline.hpp \u4e2d\uff08\u6b64\u5904\u53ea\u770b\u8fd9\u4e00\u4e2a\u5b9e\u73b0\uff09 inline void OrderAccess::loadload () { acquire (); } inline void OrderAccess::storestore () { release (); } inline void OrderAccess::loadstore () { acquire (); } inline void OrderAccess::storeload () { fence (); } // fence() \u65b9\u6cd5\u4e2d\u4f1a\u5728\u6307\u4ee4\u4e4b\u524d\u52a0\u5165 lock \u524d\u7f00\u3002\uff08\u6c47\u7f16\u6307\u4ee4\uff09\u3002\u3002\u3002\u6c47\u7f16\u6307\u4ee4\u6ca1\u6709\u6df1\u5165\u7814\u7a76\uff0c\u4e0d\u8d34\u4ee3\u7801\u4e86\u3002 \u6240\u4ee5 volatile \u4fee\u9970\u7b26\u53ef\u4ee5\u4fdd\u8bc1\u5185\u5b58\u7684\u53ef\u89c1\u6027\uff08\u5185\u5b58\u5c4f\u969c\uff09\u3002","title":"Volatile\u5728JVM\u4e2d\u5982\u4f55\u5b9e\u73b0"},{"location":"java/volatile/#volatile","text":"volatile \u53d8\u91cf\u7684\u590d\u5408\u64cd\u4f5c\u662f\u65e0\u6cd5\u4fdd\u8bc1\u539f\u5b50\u6027\u95ee\u9898\u7684\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f \u4f8b\u5982\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package com.keanu.io.study.concurrency ; public class VolatileDemo { volatile int i = 0 ; public void incr () { i ++ ; } public static void main ( String [] args ) { new VolatileDemo (). incr (); } } \u88ab JVM \u7f16\u8bd1\u4e4b\u540e\uff08\u4f7f\u7528 javap -c \u6307\u4ee4\u67e5\u770b\u5b57\u8282\u7801\uff09\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class com . keanu . io . study . concurrency . VolatileDemo { volatile int i ; public com . keanu . io . study . concurrency . VolatileDemo (); Code : 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object.\"<init>\":()V 4 : aload_0 5 : iconst_0 6 : putfield # 2 // Field i:I 9 : return public void incr (); Code : 0 : aload_0 1 : dup 2 : getfield # 2 // Field i:I 5 : iconst_1 6 : iadd 7 : putfield # 2 // Field i:I 10 : return public static void main ( java . lang . String [] ); Code : 0 : new # 3 // class com/keanu/io/study/concurrency/VolatileDemo 3 : dup 4 : invokespecial # 4 // Method \"<init>\":()V 7 : invokevirtual # 5 // Method incr:()V 10 : return } \u53ef\u4ee5\u770b\u5230\uff0c\u7f16\u8bd1\u4e4b\u540e\u7684\u6307\u4ee4\u4e2d\uff0ci++\uff08\u590d\u5408\u64cd\u4f5c\uff09 \u7684\u64cd\u4f5c\u5206\u6210\u4e86 3\u6b65\uff0c\u4ee5\u4e0a\u4ee3\u7801\u7684 17\uff0c19\uff0c20 \u884c\u3002 getfield iadd putfield \u5f53\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u65f6\uff0c\u6709\u53ef\u80fd\u540c\u4e00\u65f6\u95f4\u6709\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u6267\u884c\u4e86 getfield \u6307\u4ee4\uff0c\u53ef\u80fd\u5c31\u4f1a\u6709\u4e00\u4e2a\u7ebf\u7a0b\u62ff\u5230\u7684\u662f\u65e7\u503c\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u539f\u5b50\u6027\u95ee\u9898\u3002","title":"Volatile\u539f\u5b50\u6027\u95ee\u9898"},{"location":"java/volatile/#_1","text":"\u53ef\u4ee5\u901a\u8fc7 synchronized \u5173\u952e\u5b57\u6765\u89e3\u51b3\uff0c\u907f\u514d\u7ebf\u7a0b\u5e76\u884c\u6267\u884c\u3002synchronized \u5b9e\u73b0\u539f\u7406\u53ef\u4ee5\u53c2\u7167\u8fd9\u7bc7\u6587\u7ae0\uff1a Synchronized\u5b66\u4e60\u7b14\u8bb0","title":"\u5982\u4f55\u89e3\u51b3\u539f\u5b50\u6027\u95ee\u9898"},{"location":"java/interview/bytedance-interview/","tags":["Java","ByteDance","Interview Questions"],"text":"\u5b57\u8282\u8df3\u52a8\uff08\u5317\u4eac\uff09\u7cfb\u7edf\u90e8\u95e8\u540e\u7aef\u5f00\u53d1 \u00b6 \u4e00\u9762 40mins \u00b6 \u81ea\u6211\u4ecb\u7ecd Redis\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001\u8df3\u8868\u662f\u600e\u6837\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u539f\u7406\u3002 \u6570\u636e\u5e93\u4e8b\u52a1\uff1aACID\u3002 \u6301\u4e45\u6027\uff1aredo log MVVC\uff1aundo log bin log\u548credo log\u662f\u505a\u4ec0\u4e48\u7684\uff1f \u8bf4\u8bf4\u6570\u636e\u5e93\u7d22\u5f15\u7684\u539f\u7406\uff08\u63d0\u5230B+\u6811\u3001B\u6811\u3001\u54c8\u5e0c\u7d22\u5f15\u7684\u533a\u522b\uff09 \u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u5305\u540e\u5982\u4f55\u5c06\u5305\u6253\u523080\u7aef\u53e3\uff1f \u8fdb\u7a0b\u662f\u5982\u4f55\u5207\u6362\u7684\uff1f\uff08\u4fdd\u5b58\u3001\u8bfb\u53d6\u4e0a\u4e0b\u6587\uff0c\u865a\u62df\u5730\u5740\u3002\u3002\u3002\uff09 Leetcode 189 \u65cb\u8f6c\u6570\u7ec4 \u4e8c\u9762 50mins \u00b6 HashMap\u539f\u7406\uff08\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3001put\u7684\u8fc7\u7a0b\u3001\u6269\u5bb9\u3001rehash\u8fc7\u7a0b\uff09 ConcurrentHashMap \u76f8\u5173\u95ee\u9898\uff08JDK7\u4e0eJDK8\u7684\u533a\u522b\u3001\u5404\u81ea\u662f\u5982\u4f55\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09 \u591a\u7ebf\u7a0bcoding\uff1a\u4e24\u4e2a\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370 1~10 \u7528\u6570\u7ec4\u5b9e\u73b0\u961f\u5217 SQL\uff1a\u7edf\u8ba1\u5e73\u5747\u5206\u5927\u4e8e80\u5206\u7684\u5b66\u751f\u4e2d\uff0cA\u8bfe\u7a0b\u5206\u6570\u8d85\u8fc790\u5206\u7684\u5b66\u751f\u6570\u91cf \u7b97\u6cd5\u9898\u7701\u7565\u3002\u3002\u3002 \u4e09\u9762 40mins \u00b6 Java\u4e2d\u5e38\u7528\u7684\u5bb9\u5668\u6709\u54ea\u4e9b\uff1f\u4ed6\u4eec\u7684\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \u5982\u679c\u6211\u8981\u62ff\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684Object\u6765\u505aHashMap\u7684key\uff0c\u6211\u81f3\u5c11\u9700\u8981\u91cd\u5199\u4ec0\u4e48\u65b9\u6cd5\uff1f hashcode()\u548cequals() \u4e0a\u9053\u9898\u8ffd\u95ee\uff1a\u4e3a\u4ec0\u4e48\u4e24\u4e2a\u90fd\u8981\u91cd\u5199\uff1f\u53ea\u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u4f1a\u600e\u4e48\u6837\uff1f \u6d89\u53ca\u5230HashMap\u7684\u539f\u7406\uff0c\u5206\u522b\u5206\u6790hashcode()\u548cequals()\u7684\u7ed3\u679c\u4e00\u4e2a\u76f8\u7b49\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u5f71\u54cd\u3002 Redis\u4e3a\u4ec0\u4e48\u7528\u5355\u7ebf\u7a0b\uff1f\u4e3a\u4ec0\u4e48\u5355\u7ebf\u7a0b\u8fd8\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u7684\u8bf7\u6c42\uff1f \u7b54\uff1a\u74f6\u9888\u4e0d\u5728CPU\u3001I/O\u591a\u8def\u590d\u7528\u6a21\u578b\u3002 \u5982\u4f55\u5728\u4e24\u4e2a\u975e\u5e38\u5927\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d\u67e5\u627e\u76f8\u540c\u884c\uff0c\u5e76\u6253\u5370\u5230\u7b2c\u4e09\u4e2a\u6587\u4ef6\u4e2d\u3002 \u7b54\uff1a\u6587\u4ef6\u975e\u5e38\u5927\u6240\u4ee5\u4e0d\u53ef\u80fd\u4e00\u6b21\u6027\u88c5\u5165\u5185\u5b58\uff0c\u53ef\u4ee5\u7528\u54c8\u5e0c\u7b97\u6cd5\u5c06\u5927\u7684\u65e5\u5fd7\u6587\u4ef6\u5206\u6210\u82e5\u5e72\u4e2a\u5c0f\u6587\u4ef6\uff0c\u7136\u540e\u5728\u5c0f\u6587\u4ef6\u4e2d\u8fdb\u884c\u6bd4\u8f83\u3002 \u4e0a\u9053\u9898\u8ffd\u95ee\uff1a\u5982\u679c\u54c8\u5e0c\u5206\u5e03\u7684\u7ed3\u679c\u4e0d\u5747\u5300\u600e\u4e48\u529e\uff1f \u8bf4\u8bf4\u96c6\u4e2dI/O\u6a21\u578b\u7684\u533a\u522b\u3002\uff08BIO\u3001AIO\u3001NIO\uff09 \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u4e1a\u52a1\u8bf7\u6c42\uff0c\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u6570\u636e\uff0c\u518d\u8fd4\u56de\u7ed9\u524d\u7aef\uff0c\u4e00\u5171\u6709\u591a\u5c11\u6b21I/O\uff1f Leetcode 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u5b57\u8282\u98de\u4e66Java\u56db\u8f6e\u9762\u7ecf \u00b6 \u4e00\u9762 52mins \u00b6 OAuth2.0 \u6574\u4e2a\u6d41\u7a0b\uff1f \u79d2\u6740\u7cfb\u7edf\u8d85\u5356\u95ee\u9898\uff08redisson\u5206\u5e03\u5f0f\u4fe1\u53f7\u91cf\uff0c\u5546\u54c1\u5e93\u5e93\u5b58\u8fdbredis\u6263\u51cf\uff09 redisson \u5206\u5e03\u5f0f\u4fe1\u53f7\u91cf\u5e95\u5c42\u5b9e\u73b0 MySQL\u7d22\u5f15\u4e3a\u4ec0\u4e48\u80fd\u52a0\u5feb\u67e5\u8be2\u901f\u5ea6\uff0c\u8054\u5408\u7d22\u5f15\u5728B+\u6811\u4e2d\u600e\u4e48\u5b58\uff1f MySQL\u7d22\u5f15\u4f7f\u7528B+\u6811\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u952e\u7d22\u5f15\u5b58\u653e\u4e86\u6574\u884c\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u56de\u8868\u67e5\u8be2\u3002\u8054\u5408\u7d22\u5f15\u662f\u975e\u805a\u7c07\u7d22\u5f15\uff0c\u975e\u805a\u7c07\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\u5b58\u653e\u4e86\u7d22\u5f15\u5b57\u6bb5\u4ee5\u53ca\u4e3b\u952e\u7d22\u5f15\u7684\u6307\u9488\uff0c\u67e5\u8be2\u65f6\u53d6\u5230\u4e3b\u952e\u56de\u8868\u5230\u805a\u7c07\u7d22\u5f15\u7528\u4e3b\u952e\u67e5\u8be2\u8be5\u4e3b\u952e\u5bf9\u5e94\u7684\u884c\u6570\u636e\u3002 Redis\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5982\u4f55\u4f7f\u7528 Redis\u4e2d\u7684key\u7684\u6dd8\u6c70\u7b56\u7565\uff1f \u60f0\u6027\u5220\u9664\uff1a\u8bbf\u95eekey\u65f6\u5982\u679c\u8fc7\u671f\u4e86\u5c31\u5220\u9664\uff0c\u5bf9CPU\u53cb\u597d\uff0c\u5185\u5b58\u4e0d\u53cb\u597d\u3002 \u5b9a\u671f\u5220\u9664\uff1a\u904d\u5386\u5b57\u5178\u5220\u9664\u8fc7\u671f\u7684key\u3002COU\u4e0d\u53cb\u597d\u3002 \u5b9a\u65f6\u5220\u9664\uff1a\u5728\u8bbe\u7f6ekey\u7684\u8fc7\u671f\u65f6\u95f4\u7684\u540c\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u8ba9\u5b9a\u65f6\u5668\u5728key\u7684\u8fc7\u671f\u65f6\u95f4\u5230\u6765\u65f6\uff0c\u7acb\u5373\u6267\u884c\u5bf9key\u7684\u5220\u9664\uff1b\u5bf9CPU\u6700\u4e0d\u53cb\u597d \u7b97\u6cd5\u9898\uff1a\u672a\u6392\u5e8f\u6570\u7ec4\uff0c\u5728O(n)\u65f6\u95f4\u5185\u627e\u51fa\u6700\u957f\u6570\u5b57\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002 \u4e8c\u9762 80mins \u00b6 \u7f16\u7a0b\uff1a\u5927\u6570\u52a0\u6cd5 synchronized\u653e\u5728\u9759\u6001\u65b9\u6cd5\u548c\u975e\u9759\u6001\u65b9\u6cd5\u6709\u4ec0\u4e48\u533a\u522b\uff1f synchronized(null) \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u7ebf\u7a0b\u62ff\u5230\u9501\u8fd8\u662f\u6ca1\u6709\u62ff\u5230\u9501\uff1f(\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684markword\uff0cnull\u6ca1\u6709markword\uff0c\u6240\u4ee5\u4f1a\u62a5\u7a7a\u6307\u9488) synchronized\u9501\u5347\u7ea7\u8fc7\u7a0b\uff1f synchronized(Integer)\u4f1a\u53d1\u751f\u4ec0\u4e48\u95ee\u9898\uff1f\u4f8b\u5982\uff1asyncronized(1)\u3002 Integer\u5728[-128, 127]\u6709\u7f13\u5b58\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u5230\u4e86 synchronized(1) \uff0c\u8fd9\u4e24\u4e2a\u7ebf\u7a0b\u4f1a\u62a2\u540c\u4e00\u628a\u9501\uff0c\u4f8b\u5982\uff1a\u7ebf\u7a0b1\u6267\u884c method1()\uff0c\u7ebf\u7a0b2\u6267\u884c method2()\uff0c\u4e24\u4e2a\u65b9\u6cd5\u4e2d\u90fd\u6709synchronized(1)\uff0c\u90a3\u4e48\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u7ebf\u7a0b1\u6267\u884c\u65f6\u7ebf\u7a0b2\u6ca1\u6cd5\u6267\u884c\u3002 \u7ebf\u7a0b\u6c60\u6709 coreSize \u548c maxSize \uff0c\u5982\u679c codeSize = 50, maxSize = 30 \uff0c\u4f1a\u521b\u5efa\u51e0\u4e2a\u7ebf\u7a0b\uff1f \u5982\u679c codeSize = 50, maxSize = 50 \uff0c\u4f1a\u521b\u5efa\u51e0\u4e2a\u7ebf\u7a0b\uff1f \u4f1a\u521b\u5efa50\u4e2a\u7ebf\u7a0b\uff0c\u5982\u679c\u963b\u585e\u961f\u5217\u6162\u4e86\u4f1a\u76f4\u63a5\u89e6\u53d1\u62d2\u7edd\u7b56\u7565\u3002 ReentrantLock\u9ed8\u8ba4\u662f\u516c\u5e73\u8fd8\u662f\u975e\u516c\u5e73\uff1f \u9ed8\u8ba4\u975e\u516c\u5e73\uff0c\u6027\u80fd\u597d\u3002 \u516c\u5e73\u9501\u600e\u4e48\u5b9e\u73b0\u7684\uff1f AQS\u6709\u4e2a\u961f\u5217\uff0c\u961f\u9996\u662f\u5f53\u524dRunnable\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u540e\u9762\u7684\u90fd\u662fWaiting\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u516c\u5e73\u9501\u662f\u5728cas\u4fee\u6539state\u4e4b\u524d\u5224\u65ad\u961f\u5217\u662f\u5426\u6709Waiting\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u5982\u679c\u6709\u5c31\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5230\u961f\u5c3e\u3002","title":"\u5b57\u8282\u8df3\u52a8 Java \u9762\u8bd5\u9898"},{"location":"java/interview/bytedance-interview/#_1","text":"","title":"\u5b57\u8282\u8df3\u52a8\uff08\u5317\u4eac\uff09\u7cfb\u7edf\u90e8\u95e8\u540e\u7aef\u5f00\u53d1"},{"location":"java/interview/bytedance-interview/#40mins","text":"\u81ea\u6211\u4ecb\u7ecd Redis\u7684\u57fa\u672c\u6570\u636e\u7c7b\u578b\u3001\u8df3\u8868\u662f\u600e\u6837\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5feb\u901f\u6392\u5e8f\u7684\u539f\u7406\u3002 \u6570\u636e\u5e93\u4e8b\u52a1\uff1aACID\u3002 \u6301\u4e45\u6027\uff1aredo log MVVC\uff1aundo log bin log\u548credo log\u662f\u505a\u4ec0\u4e48\u7684\uff1f \u8bf4\u8bf4\u6570\u636e\u5e93\u7d22\u5f15\u7684\u539f\u7406\uff08\u63d0\u5230B+\u6811\u3001B\u6811\u3001\u54c8\u5e0c\u7d22\u5f15\u7684\u533a\u522b\uff09 \u64cd\u4f5c\u7cfb\u7edf\u6536\u5230\u5305\u540e\u5982\u4f55\u5c06\u5305\u6253\u523080\u7aef\u53e3\uff1f \u8fdb\u7a0b\u662f\u5982\u4f55\u5207\u6362\u7684\uff1f\uff08\u4fdd\u5b58\u3001\u8bfb\u53d6\u4e0a\u4e0b\u6587\uff0c\u865a\u62df\u5730\u5740\u3002\u3002\u3002\uff09 Leetcode 189 \u65cb\u8f6c\u6570\u7ec4","title":"\u4e00\u9762 40mins"},{"location":"java/interview/bytedance-interview/#50mins","text":"HashMap\u539f\u7406\uff08\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u3001put\u7684\u8fc7\u7a0b\u3001\u6269\u5bb9\u3001rehash\u8fc7\u7a0b\uff09 ConcurrentHashMap \u76f8\u5173\u95ee\u9898\uff08JDK7\u4e0eJDK8\u7684\u533a\u522b\u3001\u5404\u81ea\u662f\u5982\u4f55\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff09 \u591a\u7ebf\u7a0bcoding\uff1a\u4e24\u4e2a\u7ebf\u7a0b\u4ea4\u66ff\u6253\u5370 1~10 \u7528\u6570\u7ec4\u5b9e\u73b0\u961f\u5217 SQL\uff1a\u7edf\u8ba1\u5e73\u5747\u5206\u5927\u4e8e80\u5206\u7684\u5b66\u751f\u4e2d\uff0cA\u8bfe\u7a0b\u5206\u6570\u8d85\u8fc790\u5206\u7684\u5b66\u751f\u6570\u91cf \u7b97\u6cd5\u9898\u7701\u7565\u3002\u3002\u3002","title":"\u4e8c\u9762 50mins"},{"location":"java/interview/bytedance-interview/#40mins_1","text":"Java\u4e2d\u5e38\u7528\u7684\u5bb9\u5668\u6709\u54ea\u4e9b\uff1f\u4ed6\u4eec\u7684\u8054\u7cfb\u662f\u4ec0\u4e48\uff1f \u5982\u679c\u6211\u8981\u62ff\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684Object\u6765\u505aHashMap\u7684key\uff0c\u6211\u81f3\u5c11\u9700\u8981\u91cd\u5199\u4ec0\u4e48\u65b9\u6cd5\uff1f hashcode()\u548cequals() \u4e0a\u9053\u9898\u8ffd\u95ee\uff1a\u4e3a\u4ec0\u4e48\u4e24\u4e2a\u90fd\u8981\u91cd\u5199\uff1f\u53ea\u91cd\u5199\u5176\u4e2d\u4e00\u4e2a\u4f1a\u600e\u4e48\u6837\uff1f \u6d89\u53ca\u5230HashMap\u7684\u539f\u7406\uff0c\u5206\u522b\u5206\u6790hashcode()\u548cequals()\u7684\u7ed3\u679c\u4e00\u4e2a\u76f8\u7b49\u4e00\u4e2a\u4e0d\u76f8\u7b49\u7684\u5f71\u54cd\u3002 Redis\u4e3a\u4ec0\u4e48\u7528\u5355\u7ebf\u7a0b\uff1f\u4e3a\u4ec0\u4e48\u5355\u7ebf\u7a0b\u8fd8\u53ef\u4ee5\u5904\u7406\u5927\u91cf\u7684\u8bf7\u6c42\uff1f \u7b54\uff1a\u74f6\u9888\u4e0d\u5728CPU\u3001I/O\u591a\u8def\u590d\u7528\u6a21\u578b\u3002 \u5982\u4f55\u5728\u4e24\u4e2a\u975e\u5e38\u5927\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d\u67e5\u627e\u76f8\u540c\u884c\uff0c\u5e76\u6253\u5370\u5230\u7b2c\u4e09\u4e2a\u6587\u4ef6\u4e2d\u3002 \u7b54\uff1a\u6587\u4ef6\u975e\u5e38\u5927\u6240\u4ee5\u4e0d\u53ef\u80fd\u4e00\u6b21\u6027\u88c5\u5165\u5185\u5b58\uff0c\u53ef\u4ee5\u7528\u54c8\u5e0c\u7b97\u6cd5\u5c06\u5927\u7684\u65e5\u5fd7\u6587\u4ef6\u5206\u6210\u82e5\u5e72\u4e2a\u5c0f\u6587\u4ef6\uff0c\u7136\u540e\u5728\u5c0f\u6587\u4ef6\u4e2d\u8fdb\u884c\u6bd4\u8f83\u3002 \u4e0a\u9053\u9898\u8ffd\u95ee\uff1a\u5982\u679c\u54c8\u5e0c\u5206\u5e03\u7684\u7ed3\u679c\u4e0d\u5747\u5300\u600e\u4e48\u529e\uff1f \u8bf4\u8bf4\u96c6\u4e2dI/O\u6a21\u578b\u7684\u533a\u522b\u3002\uff08BIO\u3001AIO\u3001NIO\uff09 \u670d\u52a1\u5668\u6536\u5230\u4e00\u4e2a\u4e1a\u52a1\u8bf7\u6c42\uff0c\u4ece\u6570\u636e\u5e93\u83b7\u53d6\u6570\u636e\uff0c\u518d\u8fd4\u56de\u7ed9\u524d\u7aef\uff0c\u4e00\u5171\u6709\u591a\u5c11\u6b21I/O\uff1f Leetcode 121 \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a","title":"\u4e09\u9762 40mins"},{"location":"java/interview/bytedance-interview/#java","text":"","title":"\u5b57\u8282\u98de\u4e66Java\u56db\u8f6e\u9762\u7ecf"},{"location":"java/interview/bytedance-interview/#52mins","text":"OAuth2.0 \u6574\u4e2a\u6d41\u7a0b\uff1f \u79d2\u6740\u7cfb\u7edf\u8d85\u5356\u95ee\u9898\uff08redisson\u5206\u5e03\u5f0f\u4fe1\u53f7\u91cf\uff0c\u5546\u54c1\u5e93\u5e93\u5b58\u8fdbredis\u6263\u51cf\uff09 redisson \u5206\u5e03\u5f0f\u4fe1\u53f7\u91cf\u5e95\u5c42\u5b9e\u73b0 MySQL\u7d22\u5f15\u4e3a\u4ec0\u4e48\u80fd\u52a0\u5feb\u67e5\u8be2\u901f\u5ea6\uff0c\u8054\u5408\u7d22\u5f15\u5728B+\u6811\u4e2d\u600e\u4e48\u5b58\uff1f MySQL\u7d22\u5f15\u4f7f\u7528B+\u6811\u6570\u636e\u7ed3\u6784\uff0c\u4e3b\u952e\u7d22\u5f15\u5b58\u653e\u4e86\u6574\u884c\u6570\u636e\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u56de\u8868\u67e5\u8be2\u3002\u8054\u5408\u7d22\u5f15\u662f\u975e\u805a\u7c07\u7d22\u5f15\uff0c\u975e\u805a\u7c07\u7d22\u5f15\u7684\u53f6\u5b50\u8282\u70b9\u5b58\u653e\u4e86\u7d22\u5f15\u5b57\u6bb5\u4ee5\u53ca\u4e3b\u952e\u7d22\u5f15\u7684\u6307\u9488\uff0c\u67e5\u8be2\u65f6\u53d6\u5230\u4e3b\u952e\u56de\u8868\u5230\u805a\u7c07\u7d22\u5f15\u7528\u4e3b\u952e\u67e5\u8be2\u8be5\u4e3b\u952e\u5bf9\u5e94\u7684\u884c\u6570\u636e\u3002 Redis\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u5982\u4f55\u4f7f\u7528 Redis\u4e2d\u7684key\u7684\u6dd8\u6c70\u7b56\u7565\uff1f \u60f0\u6027\u5220\u9664\uff1a\u8bbf\u95eekey\u65f6\u5982\u679c\u8fc7\u671f\u4e86\u5c31\u5220\u9664\uff0c\u5bf9CPU\u53cb\u597d\uff0c\u5185\u5b58\u4e0d\u53cb\u597d\u3002 \u5b9a\u671f\u5220\u9664\uff1a\u904d\u5386\u5b57\u5178\u5220\u9664\u8fc7\u671f\u7684key\u3002COU\u4e0d\u53cb\u597d\u3002 \u5b9a\u65f6\u5220\u9664\uff1a\u5728\u8bbe\u7f6ekey\u7684\u8fc7\u671f\u65f6\u95f4\u7684\u540c\u65f6\uff0c\u521b\u5efa\u4e00\u4e2a\u5b9a\u65f6\u5668\uff0c\u8ba9\u5b9a\u65f6\u5668\u5728key\u7684\u8fc7\u671f\u65f6\u95f4\u5230\u6765\u65f6\uff0c\u7acb\u5373\u6267\u884c\u5bf9key\u7684\u5220\u9664\uff1b\u5bf9CPU\u6700\u4e0d\u53cb\u597d \u7b97\u6cd5\u9898\uff1a\u672a\u6392\u5e8f\u6570\u7ec4\uff0c\u5728O(n)\u65f6\u95f4\u5185\u627e\u51fa\u6700\u957f\u6570\u5b57\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002","title":"\u4e00\u9762 52mins"},{"location":"java/interview/bytedance-interview/#80mins","text":"\u7f16\u7a0b\uff1a\u5927\u6570\u52a0\u6cd5 synchronized\u653e\u5728\u9759\u6001\u65b9\u6cd5\u548c\u975e\u9759\u6001\u65b9\u6cd5\u6709\u4ec0\u4e48\u533a\u522b\uff1f synchronized(null) \u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u8fd9\u4e2a\u7ebf\u7a0b\u62ff\u5230\u9501\u8fd8\u662f\u6ca1\u6709\u62ff\u5230\u9501\uff1f(\u4f1a\u4fee\u6539\u5bf9\u8c61\u7684markword\uff0cnull\u6ca1\u6709markword\uff0c\u6240\u4ee5\u4f1a\u62a5\u7a7a\u6307\u9488) synchronized\u9501\u5347\u7ea7\u8fc7\u7a0b\uff1f synchronized(Integer)\u4f1a\u53d1\u751f\u4ec0\u4e48\u95ee\u9898\uff1f\u4f8b\u5982\uff1asyncronized(1)\u3002 Integer\u5728[-128, 127]\u6709\u7f13\u5b58\u5bf9\u8c61\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u4e24\u4e2a\u7ebf\u7a0b\u90fd\u6267\u884c\u5230\u4e86 synchronized(1) \uff0c\u8fd9\u4e24\u4e2a\u7ebf\u7a0b\u4f1a\u62a2\u540c\u4e00\u628a\u9501\uff0c\u4f8b\u5982\uff1a\u7ebf\u7a0b1\u6267\u884c method1()\uff0c\u7ebf\u7a0b2\u6267\u884c method2()\uff0c\u4e24\u4e2a\u65b9\u6cd5\u4e2d\u90fd\u6709synchronized(1)\uff0c\u90a3\u4e48\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u7ebf\u7a0b1\u6267\u884c\u65f6\u7ebf\u7a0b2\u6ca1\u6cd5\u6267\u884c\u3002 \u7ebf\u7a0b\u6c60\u6709 coreSize \u548c maxSize \uff0c\u5982\u679c codeSize = 50, maxSize = 30 \uff0c\u4f1a\u521b\u5efa\u51e0\u4e2a\u7ebf\u7a0b\uff1f \u5982\u679c codeSize = 50, maxSize = 50 \uff0c\u4f1a\u521b\u5efa\u51e0\u4e2a\u7ebf\u7a0b\uff1f \u4f1a\u521b\u5efa50\u4e2a\u7ebf\u7a0b\uff0c\u5982\u679c\u963b\u585e\u961f\u5217\u6162\u4e86\u4f1a\u76f4\u63a5\u89e6\u53d1\u62d2\u7edd\u7b56\u7565\u3002 ReentrantLock\u9ed8\u8ba4\u662f\u516c\u5e73\u8fd8\u662f\u975e\u516c\u5e73\uff1f \u9ed8\u8ba4\u975e\u516c\u5e73\uff0c\u6027\u80fd\u597d\u3002 \u516c\u5e73\u9501\u600e\u4e48\u5b9e\u73b0\u7684\uff1f AQS\u6709\u4e2a\u961f\u5217\uff0c\u961f\u9996\u662f\u5f53\u524dRunnable\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u540e\u9762\u7684\u90fd\u662fWaiting\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u516c\u5e73\u9501\u662f\u5728cas\u4fee\u6539state\u4e4b\u524d\u5224\u65ad\u961f\u5217\u662f\u5426\u6709Waiting\u72b6\u6001\u7684\u7ebf\u7a0b\uff0c\u5982\u679c\u6709\u5c31\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5230\u961f\u5c3e\u3002","title":"\u4e8c\u9762 80mins"}]}